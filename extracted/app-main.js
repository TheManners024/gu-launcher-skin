(self.webpackChunkdesktop = self.webpackChunkdesktop || []).push([[179], {
    63764: (ee, R, n) => {
        "use strict";
        n.d(R, {S: () => m});
        var p = n(5e3), r = n(69808);
        let m = (() => {
            class e {
                constructor() {
                    this.canCloseFromInside = !1, this.closeModal$ = new p.vpe
                }

                ngOnInit() {
                }

                closeModal(v) {
                    v && !this.canCloseFromInside || this.closeModal$.emit()
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)
            }, e.\u0275cmp = p.Xpm({
                type: e,
                selectors: [["app-info-modal"]],
                inputs: {title: "title", text: "text", styles: "styles", canCloseFromInside: "canCloseFromInside"},
                outputs: {closeModal$: "closeModal$"},
                decls: 7,
                vars: 3,
                consts: [[1, "modal-holder", 3, "ngStyle", "click"], [1, "container-fluid"], [1, "row"], [1, "col-12", "text-center", "gold-text", "bourbon", "title-container"], [1, "col-12", "text-center", "info-container", 3, "innerHTML"]],
                template: function (v, i) {
                    1 & v && (p.TgZ(0, "div", 0), p.NdJ("click", function () {
                        return i.closeModal(!0)
                    }), p.TgZ(1, "div", 1), p.TgZ(2, "div", 2), p.TgZ(3, "div", 3), p._uU(4), p.qZA(), p.qZA(), p.TgZ(5, "div", 2), p._UZ(6, "div", 4), p.qZA(), p.qZA(), p.qZA()), 2 & v && (p.Q6J("ngStyle", i.styles), p.xp6(4), p.hij(" ", i.title, " "), p.xp6(2), p.Q6J("innerHTML", i.text, p.oJD))
                },
                directives: [r.PC],
                styles: [".modal-holder[_ngcontent-%COMP%]{min-width:calc(var(--vw) * 15.62);border:1px solid white;z-index:21;overflow:auto;background-color:#060b11b3;border-radius:calc(var(--vh) * .4)}.title-container[_ngcontent-%COMP%]{padding:calc(var(--vh) * 1.85);border-bottom:1px solid white;font-size:x-large}.info-container[_ngcontent-%COMP%]{padding:calc(var(--vh) * 3.7)}"]
            }), e
        })()
    }, 531: (ee, R, n) => {
        "use strict";
        n.d(R, {$$: () => p, ZW: () => i, u4: () => t, VY: () => o});

        class p {
            constructor(f, P, w, k, F = []) {
                this.id = f, this.name = P, this.god = w, this.items = F, this.deck_type = k
            }
        }

        class i {
            constructor(f, P, w = null) {
                this.deck = f, this.type = P, this.cards = w
            }
        }

        var t = (() => {
            return (C = t || (t = {}))[C.Add = 0] = "Add", C[C.Remove = 1] = "Remove", C[C.Change = 2] = "Change", C[C.CardLimit = 3] = "CardLimit", C[C.DeckLimit = 4] = "DeckLimit", C[C.NoActiveDeck = 5] = "NoActiveDeck", C[C.StatChange = 6] = "StatChange", t;
            var C
        })();

        class o {
            constructor(f, P = null, w = !1) {
                this.deckSelect = f, this.gameModeID = P, this.forAI = w
            }
        }
    }, 57674: (ee, R, n) => {
        "use strict";
        n.d(R, {PE: () => r});
        var r = (() => {
            return (i = r || (r = {}))[i.AscID = 0] = "AscID", i[i.DescID = 1] = "DescID", i[i.AscQuality = 2] = "AscQuality", i[i.DescQuality = 3] = "DescQuality", i[i.AscMana = 4] = "AscMana", i[i.DescMana = 5] = "DescMana", i[i.AscScarcity = 6] = "AscScarcity", i[i.AscHealth = 7] = "AscHealth", i[i.DescHealth = 8] = "DescHealth", i[i.AscAttack = 9] = "AscAttack", i[i.DescAttack = 10] = "DescAttack", i[i.AscTribe = 11] = "AscTribe", i[i.DescTribe = 12] = "DescTribe", i[i.AscRarity = 13] = "AscRarity", i[i.DescRarity = 14] = "DescRarity", i[i.AscType = 15] = "AscType", i[i.DescType = 16] = "DescType", i[i.AscGod = 17] = "AscGod", i[i.DescGod = 18] = "DescGod", i[i.AscSet = 19] = "AscSet", i[i.DescSet = 20] = "DescSet", r;
            var i
        })()
    }, 33403: (ee, R, n) => {
        "use strict";
        n.d(R, {tO: () => p, zy: () => r, B_: () => m, Gn: () => g});
        var p = (() => {
            return (t = p || (p = {}))[t.SOLO = 0] = "SOLO", t[t.CONSTRUCTED = 1] = "CONSTRUCTED", t[t.DIRECT_CHALLENGE = 5] = "DIRECT_CHALLENGE", t[t.SEALED_DECK = 8] = "SEALED_DECK", t[t.TUTORIAL = 6] = "TUTORIAL", p;
            var t
        })(), r = (() => {
            return (t = r || (r = {}))[t.WEEKEND_EVENT = 2] = "WEEKEND_EVENT", r;
            var t
        })(), m = (() => {
            return (t = m || (m = {}))[t.SOLO = 0] = "SOLO", t[t.QUICK_CONSTRUCTED = 2] = "QUICK_CONSTRUCTED", t[t.DIRECT_CHALLENGE = 6] = "DIRECT_CHALLENGE", t[t.QUICK_SEALED = 10] = "QUICK_SEALED", t[t.RANKED_CONSTRUCTED = 13] = "RANKED_CONSTRUCTED", t[t.PAID_GENESIS_SEALED = 14] = "PAID_GENESIS_SEALED", t[t.FREE_4_ALL_SEALED = 15] = "FREE_4_ALL_SEALED", t[t.SERVER_SOLO = 20] = "SERVER_SOLO", t[t.SEALED_DECK = 7] = "SEALED_DECK", t[t.TUTORIAL = 101] = "TUTORIAL", m;
            var t
        })(), g = (() => {
            return (t = g || (g = {}))[t.CARDS = 0] = "CARDS", t[t.LEVEL = 1] = "LEVEL", t[t.UPDATE = 2] = "UPDATE", t[t.LOCKED = 3] = "LOCKED", t[t.ASSETS_UPDATE = 4] = "ASSETS_UPDATE", g;
            var t
        })()
    }, 98009: (ee, R, n) => {
        "use strict";
        n.d(R, {D: () => y});
        var p = n(73307), r = n(591), m = n(36053), e = n(5254), g = n(21086), v = n(92198), i = n(72986), t = n(21406),
            o = n(24850), C = n(40963), f = n(2994), P = n(27221), w = n(61377), F = (n(63411), n(44416)), _ = n(531),
            T = n(5e3);
        let y = (() => {
            class O {
                constructor(u, x, s, Z) {
                    this.utils = u, this.gameApiService = x, this.authService = s, this.cardsService = Z, this._userDecks = new r.X([]), this._starterDecks = new r.X([]), this._activeDeck = new r.X(null), this._activeDeckChange = new r.X(new _.ZW(null, _.u4.NoActiveDeck)), this._deckSelectMode = new r.X(new _.VY(!1)), this.deckSizeLimit = 30, this.dataStore = {
                        userDecks: [],
                        starterDecks: [],
                        activeDeck: null,
                        selectMode: null
                    }
                }

                get activeDeck$() {
                    return this._activeDeck.asObservable()
                }

                get userDecks$() {
                    return this._userDecks.asObservable()
                }

                get starterDecks$() {
                    return this._starterDecks.asObservable()
                }

                get activeDeckChange$() {
                    return this._activeDeckChange.asObservable()
                }

                get deckSelectMode$() {
                    return this._deckSelectMode.asObservable()
                }

                _emitDecks() {
                    this._userDecks.next(Object.assign({}, this.dataStore).userDecks)
                }

                _emitStarterDecks() {
                    this._starterDecks.next(Object.assign({}, this.dataStore).starterDecks)
                }

                _emitActiveDeck(u) {
                    this._activeDeckChange.next(u)
                }

                loadUserDecks() {
                    return this.loadDecksApi()
                }

                fetchStarterDecks() {
                    (0, m.aj)([this.loadStarterDecksApi(), this.cardsService.inventory$, this.cardsService.protoCards$]).pipe((0, v.h)(([u, x, s]) => Object.keys(x).length > 0 && s.size > 0), (0, i.q)(1), (0, t.b)(([u, x, s]) => (0, e.D)(u).pipe((0, o.U)(Z => ({
                        deck: Z,
                        protoCards: s,
                        inventory: x
                    })))), (0, o.U)(u => this.convertToDeckStarter(u.deck, u.inventory, u.protoCards)), (0, C.q)(), (0, f.b)(u => {
                        this.dataStore.starterDecks = u, this._emitStarterDecks()
                    }), (0, P.K)(u => (0, g.of)(u))).subscribe()
                }

                loadStarterDecksApi() {
                    return this.gameApiService.get("/deck?caller=client").pipe((0, o.U)(u => u.filter(x => x.assets.length > 0)))
                }

                fetchDecks() {
                    (0, m.aj)([this.loadDecksApi(), this.cardsService.inventory$, this.cardsService.protoCards$]).pipe((0, v.h)(([u, x, s]) => Object.keys(x).length > 0 && s.size > 0), (0, i.q)(1), (0, t.b)(([u, x, s]) => (0, e.D)(u).pipe((0, o.U)(Z => ({
                        deck: Z,
                        protoCards: s,
                        inventory: x
                    })))), (0, o.U)(u => this.convertToDeck(u.deck, u.inventory, u.protoCards)), (0, C.q)(), (0, f.b)(u => {
                        this.dataStore.userDecks = u, u.length && (this.dataStore.activeDeck = u[0], this.selectActiveDeck(this.dataStore.activeDeck)), this._emitDecks()
                    }), (0, P.K)(u => (0, g.of)(u))).subscribe()
                }

                convertToDeck(u, x, s) {
                    let Z;
                    return Z = "sealed_deck" === u.deck_type ? u.protos.map((me, ue) => ({
                        id: u.ids[ue],
                        proto: me,
                        quality: 5,
                        protoCard: s.get(me)
                    })) : this.utils.convertIdsToCards(u.ids, x, s), new _.$$(u.id, u.name, u.god, u.deck_type, Z)
                }

                convertToDeckStarter(u, x, s) {
                    const Z = this.utils.convertIdsToCards(u.assets, x, s),
                        X = new _.$$(u.id, u.name, u.god, "starter", Z);
                    return X.locked = !0, X
                }

                createDeck(u) {
                    return this.createDeckApi(u).pipe((0, i.q)(1), (0, f.b)(x => {
                        this.dataStore.userDecks.push(x), this._emitDecks(), this.selectActiveDeck(this.deepCopyDeck(x))
                    }))
                }

                createDeckApi(u) {
                    const x = {
                        id: u.id,
                        name: u.name,
                        god: u.god,
                        timestamp: (new Date).getTime(),
                        ids: u.items.reduce((X, me) => X.concat(me.id), [])
                    }, s = this.authService.getUserId(), Z = this.authService.getGameSessionTicket();
                    return this.gameApiService.post(`/account/${s}/deck?session=${Z}`, x).pipe((0, o.U)(X => (u.id = X, this._emitDecks(), u)))
                }

                buildSaveDeckApi() {
                    const u = {
                        id: this.dataStore.activeDeck.id,
                        name: this.dataStore.activeDeck.name,
                        god: this.dataStore.activeDeck.god,
                        timestamp: (new Date).getTime(),
                        deck_type: this.dataStore.activeDeck.deck_type
                    };
                    return Object.assign(Object.assign({}, u), "sealed_deck" === this.dataStore.activeDeck.deck_type ? {
                        ids: this.dataStore.activeDeck.items.reduce((x, s) => x.concat(s.id), []),
                        protos: this.dataStore.activeDeck.items.reduce((x, s) => x.concat(s.proto), [])
                    } : {ids: this.dataStore.activeDeck.items.reduce((x, s) => x.concat(s.id), [])})
                }

                saveActiveDeck(u) {
                    const x = this.buildSaveDeckApi(), s = this.authService.getUserId(),
                        Z = this.authService.getGameSessionTicket();
                    if ("starter" !== this.dataStore.activeDeck.deck_type) return this.gameApiService.put(`/account/${s}/deck/${this.dataStore.activeDeck.id}?session=${Z}`, x).pipe((0, i.q)(1), (0, f.b)(() => {
                        const X = this.dataStore.userDecks.find(ue => ue.id === this.dataStore.activeDeck.id),
                            me = this.dataStore.userDecks.indexOf(X);
                        this.dataStore.userDecks[me] = this.deepCopyDeck(this.dataStore.activeDeck), this._emitDecks()
                    }));
                    if ("starter" === this.dataStore.activeDeck.deck_type) {
                        const X = this.dataStore.starterDecks.find(me => me.id === this.dataStore.activeDeck.id);
                        return u && !this.decksChanged(X, this.dataStore.activeDeck) ? (this.selectActiveDeck(X), (0, g.of)(X.id)) : (x.name = `${x.name} Copy`, this.gameApiService.post(`/account/${s}/deck?session=${Z}`, x).pipe((0, i.q)(1), (0, f.b)(me => {
                            const ue = new _.$$(me, x.name, x.god, "common", [...this.dataStore.activeDeck.items]);
                            this.dataStore.userDecks.push(ue), this._emitDecks(), this.selectActiveDeck(ue)
                        })))
                    }
                }

                decksChanged(u, x) {
                    if (u.items.length !== x.items.length) return !0;
                    let s = !1;
                    return u.items.forEach((Z, X) => {
                        Z.id !== x.items[X].id && (s = !0)
                    }), !!s
                }

                deleteDeck(u) {
                    this.deleteDeckApi(u).pipe((0, i.q)(1), (0, f.b)(x => {
                        this.dataStore.userDecks = this.dataStore.userDecks.filter(s => s.id !== u), this._emitDecks(), this.selectActiveDeck(null)
                    }), (0, P.K)(x => (0, g.of)(x))).subscribe()
                }

                deleteDeckApi(u) {
                    const x = this.authService.getUserId(), s = this.authService.getGameSessionTicket();
                    return this.gameApiService.delete(`/account/${x}/deck/${u}?session=${s}`)
                }

                loadDecksApi() {
                    const u = this.authService.getUserId();
                    return this.gameApiService.get(`/account/${u}/deck`)
                }

                loadGlobalDecksApi() {
                    return this.gameApiService.get("/deck?caller=client")
                }

                getDeckApi(u) {
                    const x = this.authService.getUserId();
                    return this.gameApiService.get(`/account/${x}/deck/${u}`)
                }

                isDeckComplete(u) {
                    return u.global ? (0, g.of)(!0) : this.getDeckApi(u.id).pipe((0, o.U)(x => x && x.ids && x.ids.length === this.deckSizeLimit), (0, P.K)(x => (0, g.of)(!1)))
                }

                updateDeckSelectMode(u, x, s) {
                    this.dataStore.selectMode = new _.VY(u, x, s), this._deckSelectMode.next(Object.assign({}, this.dataStore).selectMode)
                }

                selectActiveDeck(u) {
                    this.dataStore.activeDeck = this.deepCopyDeck(u), this._emitActiveDeck(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.Change))
                }

                selectActiveDeckById(u) {
                    const x = this.dataStore.userDecks.find(s => s.id === u);
                    !x || (this.dataStore.activeDeck = this.deepCopyDeck(x), this._emitActiveDeck(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.Change)))
                }

                deepCopyDeck(u) {
                    return new _.$$(u.id, u.name, u.god, u.deck_type, [...u.items])
                }

                removeDeck(u) {
                    this.deleteDeck(u.id), u === this.dataStore.activeDeck && (this.dataStore.activeDeck = null, this._emitActiveDeck(new _.ZW(null, _.u4.NoActiveDeck))), this.dataStore.userDecks = this.dataStore.userDecks.filter(x => x !== u), this._emitDecks()
                }

                selectDeck(u, x) {
                }

                updateActiveDeckName(u) {
                    !this.dataStore.activeDeck || (this.dataStore.activeDeck.name = u, this.saveActiveDeck().pipe((0, i.q)(1)).subscribe())
                }

                getDeck(u) {
                    return this.userDecks$.pipe((0, o.U)(x => x.find(s => s.id === u)))
                }

                pushToActiveDeck(u) {
                    this.dataStore.activeDeck.items.length >= this.deckSizeLimit ? this._emitActiveDeck(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.DeckLimit)) : this.canAddCardToDeck(this.dataStore.activeDeck, u).pipe((0, f.b)(x => {
                        x ? (this.dataStore.activeDeck.items = this.dataStore.activeDeck.items.concat([u]), this._emitActiveDeck(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.Add, [u]))) : this._activeDeckChange.next(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.CardLimit, [u]))
                    })).subscribe()
                }

                removeCardFromActiveDeck(u) {
                    this.dataStore.activeDeck.items = this.dataStore.activeDeck.items.filter(x => x !== u), this._emitActiveDeck(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.Remove, [u]))
                }

                removeCardsFromActiveDeck(u) {
                    this.dataStore.activeDeck.items = this.dataStore.activeDeck.items.filter(x => !u.includes(x)), this._emitActiveDeck(new _.ZW(Object.assign({}, this.dataStore).activeDeck, _.u4.Remove, [...u]))
                }

                canAddCardToDeck(u, x) {
                    return "sealed_deck" === u.deck_type ? (0, g.of)(!0) : this.cardsService.getProtoCard(x.proto).pipe((0, o.U)(s => (s.god === u.god || "neutral" === s.god) && ("legendary" === s.rarity ? u.items.filter(Z => Z.proto === x.proto).length < 1 : u.items.filter(Z => Z.proto === x.proto).length < 2)))
                }

                forgeUpdate(u, x, s) {
                    this.forgeRemoveIds(u, x), this._emitDecks()
                }

                forgeRemoveIds(u, x) {
                    this.dataStore.userDecks.forEach(s => {
                        s.items = s.items.filter(Z => -1 === u.indexOf(Z.id))
                    })
                }

                generateUniqueCardId(u, x, s) {
                    return -Number(`${u}${x}${s}`)
                }
            }

            return O.\u0275fac = function (u) {
                return new (u || O)(T.LFG(F.F), T.LFG(w.Ft), T.LFG(p.mI), T.LFG(w.dK))
            }, O.\u0275prov = T.Yz7({token: O, factory: O.\u0275fac}), O
        })()
    }, 23569: (ee, R, n) => {
        "use strict";
        n.d(R, {d: () => t});
        var p = n(8929), r = n(591), m = n(92198), e = n(24850), g = n(73307), i = (n(63411), n(5e3));
        let t = (() => {
            class o {
                constructor(f, P) {
                    this.storage = f, this.authService = P, this.unsubscribe = new p.xQ, this.dataStore = {selectedWallet: null}, this._selectedWallet$ = new r.X(null)
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                get selectedWallet$() {
                    return this._selectedWallet$.asObservable()
                }

                get playerWallets$() {
                    return this.authService.account$.pipe((0, m.h)(f => !!f), (0, e.U)(f => f.addresses.map(P => P.address)))
                }

                get storageKey() {
                    return `gu-selected-wallet-${this.authService.getUserId()}`
                }

                fetchPlayerWallets() {
                    this.authService.fetchAccount()
                }

                obfuscateAddresses(f) {
                    if (f && 0 !== f.length) return f.map(P => `${P && P.slice(0, 6)}...`)
                }

                saveSelectedWallet(f) {
                    this.storage.set([this.storageKey], f), this.dataStore.selectedWallet = f, this._selectedWallet$.next(Object.assign({}, this.dataStore).selectedWallet)
                }

                loadSelectedWallet() {
                    const f = this.storage.get([this.storageKey]);
                    this.dataStore.selectedWallet = f, this._selectedWallet$.next(Object.assign({}, this.dataStore).selectedWallet)
                }
            }

            return o.\u0275fac = function (f) {
                return new (f || o)(i.LFG(g.qy), i.LFG(g.mI))
            }, o.\u0275prov = i.Yz7({token: o, factory: o.\u0275fac, providedIn: "root"}), o
        })()
    }, 11130: (ee, R, n) => {
        "use strict";
        n.d(R, {xV: () => ae});
        var p = n(51395), r = n(61377), m = n(8929), e = n(591), g = n(21086), v = n(36053), i = n(98723), t = n(41746),
            o = n(72986), C = n(92198), f = n(2994), P = n(24850), w = n(7625), k = n(61709), F = n(87545),
            _ = n(75778), T = n(40537), y = n(73307), E = (n(63411), n(69340)), u = n(79763), x = n(33403),
            s = n(14618), Z = n(69931), X = n(64523), me = n(72224), ue = n(5e3), we = n(96727);

        class V {
            constructor(be, B, pe) {
                this.name = be, this.value = B, this.image = pe
            }
        }

        let ae = (() => {
            class ve {
                constructor(B, pe, re, Be, De, Y, ne, Q) {
                    this.gameService = B, this.gameDownloadService = pe, this.storage = re, this.gameApi = Be, this.authService = De, this.packService = Y, this.sealedService = ne, this.ngrxStore = Q, this.BUFFER_TIME = 5e3, this.unsubscribe = new m.xQ, this.dataStore = {gameModes: []}, this._gameModes$ = new e.X({
                        gameModes: [],
                        refresh: !1
                    }), this.watchForUpdate(), this.watchForAssetUpdate(), this.watchForPacks()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                get gameModes$() {
                    return this._gameModes$.asObservable()
                }

                updateGameModeDeck(B, pe, re = !1) {
                    this.getGameMode$(B).pipe((0, o.q)(1), (0, C.h)(Be => void 0 !== Be), (0, f.b)(Be => {
                        this.saveGameModeDeck(Be.id, re, pe), re ? Be.aiSelectedDeckId = pe : Be.lastSelectedDeckId = pe, this._emitGameModes()
                    })).subscribe()
                }

                updateGameModeLoadout(B, pe) {
                    this.getGameMode$(B).pipe((0, o.q)(1), (0, C.h)(re => void 0 !== re), (0, f.b)(re => {
                        this.saveGameModeLoadout(re.id, pe), re.selectedLoadoutId = pe, this._emitGameModes()
                    })).subscribe()
                }

                getGameStats(B) {
                    return (0, g.of)({
                        game_mode_id: 1,
                        p1_id: 49,
                        p2_id: 2,
                        did_win: !0,
                        p1_stats: [new V("Wins", 103, "https://images.godsunchained.com/art/250/88.png"), new V("Losses", 8, "https://images.godsunchained.com/art/250/89.png"), new V("Damage Dealt", 7300, "https://images.godsunchained.com/art/250/90.png"), new V("Damage Taken", 1600, "https://images.godsunchained.com/art/250/91.png")],
                        p2_stats: [new V("Wins", 9001, "https://images.godsunchained.com/art/250/88.png"), new V("Losses", 0, "https://images.godsunchained.com/art/250/89.png"), new V("Damage Dealt", 999999, "https://images.godsunchained.com/art/250/90.png"), new V("Damage Taken", 0, "https://images.godsunchained.com/art/250/91.png")]
                    })
                }

                getGameModeDeck(B, pe) {
                    const re = this.getGameModeDeckKey(B, pe);
                    return this.storage.get([re]) || null
                }

                clearGameModeDeck(B, pe) {
                    const re = this.getGameModeDeckKey(B, pe);
                    this.storage.delete([re])
                }

                saveGameModeDeck(B, pe, re) {
                    const Be = this.getGameModeDeckKey(B, pe);
                    this.storage.set([Be], re)
                }

                getGameModeDeckKey(B, pe) {
                    return `gu-deck-${B}${pe ? "-ai" : ""}`
                }

                getGameModeLoadout(B) {
                    const pe = this.getGameModeLoadoutKey(B);
                    return this.storage.get([pe]) || null
                }

                saveGameModeLoadout(B, pe) {
                    const re = this.getGameModeLoadoutKey(B);
                    this.storage.set([re], pe)
                }

                getGameModeLoadoutKey(B) {
                    return `gu-loadout-${B}`
                }

                _emitGameModes(B = !1) {
                    this._gameModes$.next({gameModes: Object.assign({}, this.dataStore).gameModes, refresh: B})
                }

                getGameMode$(B) {
                    return this.gameModes$.pipe((0, P.U)(({gameModes: pe}) => pe.find(re => re.id === B)))
                }

                fetchGameModes(B = !1) {
                    (0, v.aj)([this.fetchPlayerGameModes$(), this.getLock$(), this.fetchPlayerRanks$()]).pipe((0, o.q)(1), (0, P.U)(([pe, re, Be]) => pe.map(De => this.transformGameModes(De, re, Be))), (0, f.b)(pe => {
                        this.scheduleRefresh(pe), this.handleSealedMode(pe), this.dataStore.gameModes = pe, this._emitGameModes(B)
                    })).subscribe()
                }

                handleSealedMode(B) {
                    let pe = B.find(re => re.id === x.B_.SEALED_DECK);
                    !pe || this.scheduleSealedModeRefresh(pe)
                }

                scheduleSealedModeRefresh(B) {
                    const pe = Date.now(), re = new Date(B.end_time_server).getTime(), De = re + 36e5 - pe, Y = re - pe;
                    Y > 0 && Y < me.v && (0, i.H)(Y).pipe((0, w.R)(this.unsubscribe), (0, o.q)(1)).subscribe(ne => this.sealedService.fetchSealed()), De > 0 && De < me.v && (0, i.H)(De).pipe((0, w.R)(this.unsubscribe), (0, o.q)(1)).subscribe(ne => this.sealedService.fetchSealed())
                }

                mockSealedMode() {
                    return {
                        id: 7,
                        name: "Sealed Deck",
                        description: "Love Seals? Try Sealed Mode.",
                        required_level: 0,
                        properties: {
                            type: 8,
                            start_time: "2020-11-10 12:00:00.556238+00",
                            entry_cutoff: "2020-11-10 08:00:00.556238+00",
                            max_losses: 3,
                            max_wins: 9,
                            entry_cost: 100
                        },
                        ranked: !1,
                        order: 6,
                        end_time: "2020-11-18T12:00:00.556238Z",
                        end_timestamp: 1605700805556,
                        image_url: "/assets/images/misc-art/misc-art--C8-026.webp",
                        paid: !1,
                        rotation: 0,
                        rank: null,
                        lock: null,
                        type: 8,
                        lastSelectedDeckId: 133713371337,
                        aiSelectedDeckId: null,
                        selectedLoadoutId: null
                    }
                }

                fetchPlayerGameModes$() {
                    const B = this.authService.getUserId();
                    return this.gameApi.get(`/user/${B}/mode`)
                }

                fetchPlayerRanks$() {
                    const B = this.authService.getUserId();
                    return this.gameApi.get(`/user/${B}/rank`)
                }

                getLock$() {
                    let B = null;
                    return (0, v.aj)([this.gameService.currentGameContext$, this.packService.unopenedPacks$, (0, i.H)(0, 6e5)]).pipe((0, C.h)(([pe, re]) => null != pe), (0, k.VS)(([pe, re]) => {
                        if (B = null, re) {
                            const Be = re.filter(De => "starter" === De.pack_source);
                            Be && Be.length > 0 && (B = {type: x.Gn.CARDS})
                        }
                        return (0, g.of)(pe)
                    }), (0, k.VS)(pe => (0, t.$R)((0, g.of)(pe), this.gameService.getBranch$(pe.id))), (0, k.VS)(([pe, re]) => "" === re.name ? (B = {type: x.Gn.LOCKED}, (0, g.of)([!1, !1])) : (0, t.$R)(this.gameDownloadService.requiresUpdate(pe, re.name), this.gameDownloadService.requiresAssetsUpdate(pe, re.name))), (0, k.VS)(([pe, re]) => (pe ? B = {type: x.Gn.UPDATE} : re.length > 0 && (B = {type: x.Gn.ASSETS_UPDATE}), (0, g.of)(B))))
                }

                checkIfRequiresUpdate() {
                    return this.gameService.currentGameContext$.pipe((0, F.w)(B => (0, t.$R)((0, g.of)(B), this.gameService.getBranch(B.id))), (0, F.w)(([B, pe]) => this.gameDownloadService.requiresUpdate(B, pe)))
                }

                watchForUpdate() {
                    this.ngrxStore.select((0, Z.DM)()).pipe((0, w.R)(this.unsubscribe), (0, C.h)(B => !!B), (0, C.h)(B => "completed" === B.status), (0, _.x)(), (0, f.b)(B => {
                        this.updateLocks(!0), this.ngrxStore.dispatch(new s.Tg({status: "idle", percentage: 0}))
                    })).subscribe()
                }

                watchForAssetUpdate() {
                    this.ngrxStore.select((0, Z.gP)()).pipe((0, w.R)(this.unsubscribe), (0, C.h)(B => !!B), (0, C.h)(B => "completed" === B.status), (0, _.x)(), (0, f.b)(B => {
                        this.updateLocks(!0)
                    })).subscribe()
                }

                watchForPacks() {
                    this.packService.unopenedPacks$.pipe((0, w.R)(this.unsubscribe), (0, _.x)(), (0, f.b)(B => this.updateLocks())).subscribe()
                }

                updateLocks(B = !1) {
                    this.getLock$().pipe((0, o.q)(1), (0, f.b)(pe => {
                        this.dataStore.gameModes.forEach(re => {
                            re.lock = pe
                        })
                    }), (0, T.x)(() => this._emitGameModes(B))).subscribe()
                }

                transformGameModes(B, pe, re) {
                    const Be = re.find(Y => Y.game_mode === B.id) || null;
                    let De = Object.assign(Object.assign({}, B), {
                        rank: Be,
                        lock: pe,
                        type: B.properties.type,
                        lastSelectedDeckId: this.getGameModeDeck(B.id, !1),
                        aiSelectedDeckId: this.getGameModeDeck(B.id, !0),
                        end_timestamp: Date.parse(B.end_time) + 5e3,
                        selectedLoadoutId: this.getGameModeLoadout(B.id)
                    });
                    return De.id === x.B_.SEALED_DECK && (De = this.sealedService.transformSealedModeGameModeData(De)), De
                }

                scheduleRefresh(B = []) {
                    const pe = Date.now(), re = B.filter(Y => 1 === Y.rotation && Y.end_timestamp > pe);
                    if (0 === re.length) return;
                    const De = re.reduce((Y, ne) => Y.end_timestamp < ne.end_timestamp ? Y : ne).end_timestamp - pe;
                    De > 0 && De < me.v && (0, i.H)(De).pipe((0, w.R)(this.unsubscribe), (0, o.q)(1), (0, f.b)(Y => this.fetchGameModes(!0))).subscribe()
                }

                storeUserGameModeOrderMap(B) {
                    const pe = this.authService.getUserId();
                    sessionStorage.setItem(`userGameModesOrder::${pe}`, JSON.stringify(B))
                }

                getUserGameModeOrderMap() {
                    const B = this.authService.getUserId();
                    return JSON.parse(sessionStorage.getItem(`userGameModesOrder::${B}`))
                }

                incrementGameModeCount(B, pe = 1) {
                    const re = this.authService.getUserId(), Be = this.authService.getGameSessionTicket();
                    return this.gameApi.post(`/user/${re}/mode?session=${Be}`, {game_mode: B, add: pe})
                }
            }

            return ve.\u0275fac = function (B) {
                return new (B || ve)(ue.LFG(u.hM), ue.LFG(E.b5), ue.LFG(y.qy), ue.LFG(r.Ft), ue.LFG(y.mI), ue.LFG(p.F), ue.LFG(X.H), ue.LFG(we.yh))
            }, ve.\u0275prov = ue.Yz7({token: ve, factory: ve.\u0275fac, providedIn: "root"}), ve
        })()
    }, 88632: (ee, R, n) => {
        "use strict";
        n.d(R, {MZ: () => C});
        var p = n(79763), m = (n(63411), n(61377)), e = n(591), g = n(2994), v = n(73307), i = n(5e3);
        let C = (() => {
            class f {
                constructor(w, k, F) {
                    this.gameApi = w, this.authService = k, this.gameService = F, this.dataStore = {extendedAccountProperties: null}, this._extendedAccountProperties$ = new e.X(null)
                }

                get extendedAccountProperties$() {
                    return this._extendedAccountProperties$.asObservable()
                }

                getAccountProperties(w, k) {
                    return (!w || !k) && (w = this.authService.getUserId(), k = this.authService.getGameSessionTicket()), this.gameApi.get(`/account/${w}/properties?session=${k}`)
                }

                _emit(w) {
                    this.dataStore.extendedAccountProperties = w, this._extendedAccountProperties$.next(Object.assign({}, this.dataStore).extendedAccountProperties)
                }

                getExtendedAccountPropertiesById(w, k) {
                    return this.gameApi.get(`/account/${w}/properties?format=extended&session=${k}`).pipe((0, g.b)(F => this._emit(F)))
                }

                getExtendedAccountProperties() {
                    const w = this.authService.getUserId(), k = this.authService.getGameSessionTicket();
                    return this.getExtendedAccountPropertiesById(w, k)
                }

                fetchExtendedAccount() {
                    this.getExtendedAccountProperties().subscribe()
                }
            }

            return f.\u0275fac = function (w) {
                return new (w || f)(i.LFG(m.Ft), i.LFG(v.mI), i.LFG(p.hM))
            }, f.\u0275prov = i.Yz7({token: f, factory: f.\u0275fac, providedIn: "root"}), f
        })()
    }, 8561: (ee, R, n) => {
        "use strict";
        n.d(R, {GT: () => Vt, OC: () => D, Qc: () => Te});
        var p = n(59633), r = n(8929), m = n(591), e = n(21086), g = n(61737), v = n(98723), i = n(67876), t = n(7625),
            o = n(24850), C = n(87224), f = n(92198), P = n(87168), w = n(27221), k = n(2994), F = n(72986),
            _ = n(61709), T = n(87545), y = n(77604), O = n(44290), E = n(40537), u = n(61377), x = n(73307),
            s = n(63764), X = (n(63411), n(79763)), me = n(52492), ue = n(66088), we = n(83035), V = (n(26093), n(5e3));
        let ae = (() => {
            class $e {
                constructor(q) {
                    this.auth = q, this.createServer()
                }

                respond(q, de) {
                    return -1 !== q.url.indexOf("config") ? this.getConfig(q, de) : q.url.startsWith("/session") ? this.auth.getGameSessionTicket() : null
                }

                setConfig(q) {
                    this.config = q
                }

                getConfig(q, de) {
                    return this.config
                }

                serverActive() {
                    return !(!window.bridge || !window.bridge.serverActive) && window.bridge.serverActive()
                }

                createServer() {
                    !window.bridge || !window.bridge.createServer || window.bridge.createServer(49011, this.respond.bind(this))
                }

                closeServer() {
                    !window.bridge || !window.bridge.closeServer || window.bridge.closeServer()
                }
            }

            return $e.\u0275fac = function (q) {
                return new (q || $e)(V.LFG(x.mI))
            }, $e.\u0275prov = V.Yz7({token: $e, factory: $e.\u0275fac, providedIn: "root"}), $e
        })();
        var ve = n(33403), be = n(5231), B = n(80537), pe = n(8611), re = n(98009), Be = n(11130), De = n(88632),
            Y = n(47313), ne = n(40520);

        class Te {
            constructor(gt, q, de, Se) {
                this.player = {id: gt, deck: q, collection: {id: de}}, this.opponent = Se ? {deck: Se} : void 0
            }
        }

        var D = (() => {
            return ($e = D || (D = {}))[$e.OUT = 0] = "OUT", $e[$e.IN = 1] = "IN", $e[$e.PROGRESSION_GAME_MODE = 2] = "PROGRESSION_GAME_MODE", $e[$e.PROGRESSION_ACCOUNT = 3] = "PROGRESSION_ACCOUNT", D;
            var $e
        })(), st = (() => {
            return ($e = st || (st = {})).DECK = "deck", $e.DECK_GLOBAL = "deck_global", $e.COLLECTION = "collection", st;
            var $e
        })();
        let Vt = (() => {
            class $e {
                constructor(q, de, Se, Ne, dt, it, W, j, a, h, I, oe, Pe) {
                    this.http = q, this.server = de, this.gameService = Se, this.queueService = Ne, this.authService = dt, this.guUserService = it, this.modalService = W, this.progressionService = j, this.guGameService = a, this.configService = h, this.audioService = I, this.analyticsService = oe, this.deckService = Pe, this.numActiveQueues = 0, this.unsubscribe = new r.xQ, this.dataStore = {currentMatchId: null}, this._currentMatchId$ = new m.X(null), this.queueAcknowledge$ = new r.xQ, this.clientServerPongReceived$ = new r.xQ, this._playing$ = new m.X({status: D.OUT}), this.watchQueues(), window.bridge.onQuit(() => {
                        this.queueService.getGameQueues(1).subscribe(nt => {
                            this.trySendingCancelReq(nt.mode.id, nt.params.player.id)
                        })
                    }), this.configService.loadConfigurations().pipe((0, t.R)(this.unsubscribe)).subscribe(nt => {
                        this.master = {
                            host: nt.matchmakingHost,
                            port: nt.matchmakingPort,
                            password: ""
                        }, this.connectClient()
                    }), this.gameService.getBranch$(1).pipe((0, t.R)(this.unsubscribe)).subscribe(nt => {
                        this.branch = nt
                    }), this.queueService.getGameQueues(1).subscribe(nt => {
                        switch (nt.status) {
                            case"completed":
                                this.completeQueue(nt);
                                break;
                            case"cancelled":
                                this.trySendingCancelReq(nt.mode.id, nt.params.player.id)
                        }
                    })
                }

                ngOnDestroy() {
                    this.client && this.client.destroy && this.client.destroy(), this.unsubscribe.next(), this.unsubscribe.complete()
                }

                get currentMatchId$() {
                    return this._currentMatchId$.asObservable()
                }

                watchQueues() {
                    this.queueService.activeQueues$.pipe((0, t.R)(this.unsubscribe), (0, o.U)(q => q ? q.length : 0)).subscribe(q => this.numActiveQueues = q)
                }

                buildOpponent(q) {
                    let de = {};
                    const Se = q.opponent_attributes.find(it => it.type === st.COLLECTION),
                        Ne = q.opponent_attributes.find(it => it.type === st.DECK),
                        dt = q.opponent_attributes.find(it => it.type === st.DECK_GLOBAL);
                    return Se && (de = Object.assign(Object.assign({}, de), {collection: {id: Se.value}})), Ne && (de = Object.assign(Object.assign({}, de), {
                        deck: {
                            id: Ne.value,
                            global: !1
                        }
                    })), dt && (de = Object.assign(Object.assign({}, de), {deck: Object.assign(Object.assign({}, de.deck), {global: 1 === dt.value})})), de
                }

                handleQueueResponse() {
                    this.client.on(21, q => {
                        const de = this.tryParseJson(q), Se = this.buildOpponent(de);
                        de.game_mode === ve.B_.SERVER_SOLO && (Se.id = 0), this.queueService.getQueue(1, de.game_mode).pipe((0, C.P)(), (0, f.h)(Ne => "active" === Ne.status), (0, P.M)(this.gameService.getBranch$(1)), (0, w.K)(Ne => (console.error("playService->handleQueueResponse() error getting queue", Ne), (0, e.of)([null, null])))).subscribe(([Ne, dt]) => {
                            Ne && (this.queueService.complete(Ne), de.success && (this.dataStore.currentMatchId = de.match_id, this._currentMatchId$.next(this.dataStore.currentMatchId), this.play({
                                realm: dt.id,
                                mode: Ne.mode.id,
                                player: Ne.params.player,
                                match_id: de.match_id,
                                opponent: Se,
                                server: {host: de.location.host, port: de.location.port, password: de.match_pwd}
                            })))
                        })
                    })
                }

                handleQueueAck() {
                    this.client.on(30, q => {
                        const de = this.tryParseJson(q);
                        this.queueAcknowledge$.next(!0), de.success || (this.guGameService.fetchGameModes(!0), this.queueService.getQueue(1, de.game_mode).pipe((0, C.P)()).subscribe(Se => this.queueService.cancel(Se)), "bot" === de.reason ? this.modalService.createModal(pe.n, {}, {
                            blurredBackground: !0,
                            canCloseFromInside: !1,
                            position: me.e1.Center,
                            size: me.Cg.StretchableWorkarea
                        }) : this.showInfoModal("Unable to Queue", "captcha" === de.reason ? B.k.CODE_10 : B.k.CODE_4))
                    })
                }

                handleQueuePing() {
                    this.client.on(35, q => {
                        const de = this.tryParseJson(q);
                        !de || !de.game_mode || this.queueService.getQueue(1, de.game_mode).pipe((0, C.P)(Se => "active" === Se.status), (0, k.b)(() => {
                            const Se = Object.assign(Object.assign({}, de), {realm: this.branch.name});
                            this.trySendingSocketMsg(36, Se)
                        })).subscribe()
                    })
                }

                handleServerClientPing() {
                    this.client.on(8, () => {
                        this.trySendingSocketMsg(9, {})
                    })
                }

                handleClientServerPong() {
                    this.client.on(7, () => {
                        this.clientServerPongReceived$.next(!0)
                    })
                }

                handleCancelResponse() {
                    this.client.on(23, q => {
                        this.tryParseJson(q)
                    })
                }

                handleRestartRequest() {
                    this.client.on(40, q => {
                        this.modalService.createModal(be.s, {
                            title: "Client Updated",
                            message: "Your client has been updated, please reload to continue.",
                            okButtonText: "RELOAD",
                            onOk: () => location.reload()
                        }, {
                            canCloseFromOutside: !1,
                            position: me.e1.Center,
                            size: me.Cg.StretchableFullscreen,
                            blurredBackground: !0
                        })
                    })
                }

                connectClient() {
                    if (this.client && this.client.destroy) try {
                        this.client.destroy()
                    } catch (q) {
                        console.error("playService->connectClient() unable to destroy client.", q)
                    }
                    this.client = window.bridge.createClient(this.master.host, this.master.port), this.handleQueueResponse(), this.handleQueueAck(), this.handleQueuePing(), this.handleCancelResponse(), this.handleRestartRequest(), this.handleServerClientPing(), this.handleClientServerPong()
                }

                tryParseJson(q) {
                    let de;
                    try {
                        de = JSON.parse(q)
                    } catch (Se) {
                        console.error("PlayServer->handleQueuePing error parsing message", Se, q)
                    }
                    return de
                }

                buildAttributes(q) {
                    let de = [];
                    return q.player && q.player.collection && (de = [...de, {
                        type: st.COLLECTION,
                        value: q.player.collection.id
                    }]), q.opponent && q.opponent.deck && (de = [...de, {
                        type: st.DECK,
                        value: q.opponent.deck.id
                    }], de = [...de, {type: st.DECK_GLOBAL, value: q.opponent.deck.global ? 1 : 0}]), de
                }

                buildQueueMessage(q, de, Se, Ne, dt, it) {
                    return {
                        id: de,
                        realm: dt,
                        deck_id: Se,
                        token: "",
                        game_mode: q.id,
                        attributes: Ne,
                        private_match_password: it
                    }
                }

                start(q, de, Se, Ne) {
                    const dt = this.buildQueueMessage(q, de, Se.player.deck.id, this.buildAttributes(Se), this.branch.name, Ne);
                    return this.numActiveQueues > 0 ? (0, g._)(B.k.CODE_0) : this.client.socketConnected ? this.deckService.isDeckComplete(Se.player.deck).pipe((0, F.q)(1), (0, _.VS)(it => it ? this.clientServerPong(q, dt, de, Se) : (this.deckService.fetchDecks(), (0, g._)(B.k.CODE_11)))) : (this.connectClient(), (0, g._)(B.k.CODE_1))
                }

                clientServerPong(q, de, Se, Ne) {
                    return this.clientServerPongReceived$.next(!1), this.trySendingSocketMsg(6, de) ? ((0, v.H)(3e3).subscribe(() => {
                        this.clientServerPongReceived$.next(!1)
                    }), this.clientServerPongReceived$.pipe((0, F.q)(1), (0, _.VS)(it => it ? this.startQueueReq$(q, de, Se, Ne) : (console.log("playService->start() cannot queue, did not receive CLIENT_SERVER_PONG within 3000ms"), this.connectClient(), (0, g._)(B.k.CODE_9))))) : (this.connectClient(), (0, g._)(B.k.CODE_8))
                }

                startQueueReq$(q, de, Se, Ne) {
                    return this.queueAcknowledge$.next(!1), this.trySendingQueueReq(de) ? ((0, v.H)(3e3).subscribe(() => {
                        this.queueAcknowledge$.next(!1)
                    }), this.queueAcknowledge$.pipe((0, F.q)(1), (0, _.VS)(it => it ? this.queueService.start(1, q, Ne) : (console.log("playService->startQueueReq$() cannot queue, did not receive ACK message from server within 3000ms"), this.connectClient(), (0, g._)(B.k.CODE_3))))) : (console.log("playService->startQueueReq$() cannot queue, unable to send queue request message"), this.connectClient(), (0, g._)(B.k.CODE_2))
                }

                trySendingSocketMsg(q, de) {
                    console.log("playService->trySendingSocketMsg()", this.socketMsgName(q), de);
                    try {
                        return this.client.send(q, de), !0
                    } catch (Se) {
                        return console.error("playService->trySendingSocketMsg() failed", Se), !1
                    }
                }

                trySendingQueueReq(q) {
                    return this.trySendingSocketMsg(20, q)
                }

                trySendingCancelReq(q, de) {
                    return this.trySendingSocketMsg(22, {game_mode: q, id: de, realm: this.branch.name})
                }

                completeQueue(q) {
                }

                get playing$() {
                    return this._playing$.asObservable()
                }

                setPlaying(q, de) {
                    this._playing$.next({status: q, gameModeId: de})
                }

                buildArgs(q) {
                    let de = ["-realm", `${q.realm}`, "-user-id", `${q.player.id}`, "-sessionTicket", this.authService.getGameSessionTicket(), "-sessionConfig", JSON.stringify(q)];
                    return q.match_id && (de = [...de, "-game-id", `${q.match_id}`]), de
                }

                play(q) {
                    this.server.serverActive() || (this.server.closeServer(), this.server.createServer()), console.log(JSON.stringify(q)), this.server.setConfig(q), this.modalService.destroyModalsStack(), this.setPlaying(D.IN, q.mode);
                    const de = this.buildArgs(q);
                    this.gameService.currentGameContext$.pipe((0, F.q)(1), (0, T.w)(Se => this.gameService.play(Se, de)), (0, T.w)(Se => (0, v.H)(2e3, 2e3).pipe((0, y.h)(Se), (0, O.o)(() => window.bridge.isRunning(Se.process.pid)))), (0, E.x)(() => {
                        window.bridge.focus(), this.audioService.returnToLauncher.play(), q.mode === ve.B_.SOLO && this.logGameCompleted(q.mode, "Solo"), q.mode === ve.B_.DIRECT_CHALLENGE && this.logGameCompleted(q.mode, "Direct Challenge", q.match_id), this.handleProgression(q.mode)
                    })).subscribe(i.Z, Se => {
                        console.error("playService->play() error starting a game", Se), Object.values(B.k).includes(Se) ? this.showInfoModal("Unable to start game", Se) : this.showInfoModal("Unable to start game", B.k.CODE_5)
                    })
                }

                logGameCompleted(q, de, Se) {
                    "function" == typeof fbq && fbq("track", "ViewContent"), "function" == typeof gtag && gtag("event", "completed", {
                        event_category: "game",
                        event_label: "user"
                    }), this.analyticsService.postEvent(new p.Game.Completed.Event({
                        game_id: 1,
                        latest_id: Se,
                        mode_id: q,
                        mode_name: de
                    }))
                }

                handleProgression(q) {
                    this.checkWhetherToShowAccountProgress().pipe((0, F.q)(1), (0, k.b)(de => {
                        this.setPlaying(de && 0 !== q ? D.PROGRESSION_ACCOUNT : D.OUT, q)
                    })).subscribe()
                }

                checkWhetherToShowAccountProgress() {
                    const q = this.authService.getUserId(), de = this.progressionService.getStoredAccountProgression(q);
                    return this.guUserService.getAccountProperties().pipe((0, F.q)(1), (0, o.U)(Se => this.hasProgressed(de, Se)))
                }

                hasProgressed(q, de) {
                    return q.lvl !== de.level || q.xp !== de.total_xp
                }

                showInfoModal(q, de) {
                    this.modalService.createModal(s.S, {title: q, text: de}, {
                        blurredBackground: !0,
                        canCloseFromInside: !1,
                        position: me.e1.Center,
                        size: me.Cg.StretchableWorkarea
                    })
                }

                socketMsgName(q) {
                    switch (q) {
                        case 6:
                            return "CLIENT_SERVER_PING";
                        case 7:
                            return "CLIENT_SERVER_PONG";
                        case 8:
                            return "SERVER_CLIENT_PING";
                        case 9:
                            return "SERVER_CLIENT_PONG";
                        case 20:
                            return "QUEUE_REQ";
                        case 30:
                            return "QUEUE_ACK";
                        case 21:
                            return "QUEUE_RES";
                        case 35:
                            return "QUEUE_PING";
                        case 36:
                            return "QUEUE_PONG";
                        case 40:
                            return "RESTART_REQ";
                        case 22:
                            return "CANCEL_REQ";
                        case 23:
                            return "CANCEL_RES";
                        default:
                            return "UNKNOWN_MESSAGE"
                    }
                }
            }

            return $e.\u0275fac = function (q) {
                return new (q || $e)(V.LFG(ne.eN), V.LFG(ae), V.LFG(X.hM), V.LFG(we.g), V.LFG(x.mI), V.LFG(De.MZ), V.LFG(ue.Z), V.LFG(Y.$z), V.LFG(Be.xV), V.LFG(u.LE), V.LFG(x.pk), V.LFG(u.yD), V.LFG(re.D))
            }, $e.\u0275prov = V.Yz7({token: $e, factory: $e.\u0275fac, providedIn: "root"}), $e
        })()
    }, 47313: (ee, R, n) => {
        "use strict";
        n.d(R, {oW: () => k, $z: () => E});
        var p = n(591), r = n(61737), m = n(61377), e = n(72986), g = n(2994), v = n(27221), i = n(24850), t = n(11130),
            o = n(73307), C = n(5e3);

        class k {
            constructor(x = 0, s = 0, Z = 0) {
                this.xp = x, this.xpToNext = s, this.lvl = Z
            }
        }

        class y {
            constructor(x, s, Z, X, me, ue) {
                this.game_mode = x, this.rating = s, this.rank_level = Z, this.win_points = X, this.loss_points = me, this.safety_line = ue
            }
        }

        let E = (() => {
            class u {
                constructor(s, Z, X) {
                    this.gameApi = s, this.storage = Z, this.guGameService = X, this.dataStore = {
                        accountThresholds: [],
                        gameRanks: [],
                        userRankLevels: []
                    }, this._accountThresholds$ = new p.X(Object.assign({}, this.dataStore).accountThresholds), this._gameRanks$ = new p.X(Object.assign({}, this.dataStore).gameRanks), this._userRankLevels$ = new p.X(Object.assign({}, this.dataStore).userRankLevels)
                }

                get accountThresholds$() {
                    return this._accountThresholds$.asObservable()
                }

                get gameRanks$() {
                    return this._gameRanks$.asObservable()
                }

                get userRankLevels$() {
                    return this._userRankLevels$.asObservable()
                }

                isMaxRank(s, Z) {
                    return !(!s || !Z || 0 === Z.length) && s.rank_level === Z[Z.length - 1].level
                }

                fetchUserRankLevel() {
                    return this.guGameService.fetchPlayerRanks$().pipe((0, e.q)(1), (0, g.b)(s => (this.dataStore.userRankLevels = s, this._userRankLevels$.next([...s]), s))).subscribe()
                }

                fetchUserGameProgression({userId: s, gameModeId: Z}) {
                    return this.gameApi.get(`/user/${s}/progression/${Z}`).pipe((0, e.q)(1), (0, v.K)(X => (console.error("error during loading of post game progression stats"), (0, r._)(X))))
                }

                fetchGameRanks() {
                    this.gameApi.get("/rank").pipe((0, e.q)(1), (0, g.b)(s => (this.dataStore.gameRanks = s, this._gameRanks$.next([...s]), s)), (0, v.K)(s => (console.error("error during loading game ranks"), console.error(s), s))).subscribe()
                }

                fetchAccountThresholds() {
                    this.gameApi.get("/level_threshold").pipe((0, e.q)(1), (0, g.b)(s => {
                        this.dataStore.accountThresholds = s, this._accountThresholds$.next(Object.assign({}, this.dataStore).accountThresholds)
                    }), (0, v.K)(s => (console.error("error during loading lvl thresholds"), s))).subscribe()
                }

                fetchAccountThresholdsByUserId(s) {
                    this.gameApi.get(`/user/${s}/level_threshold`).pipe((0, e.q)(1), (0, g.b)(Z => {
                        this.dataStore.accountThresholds = Z, this._accountThresholds$.next(Object.assign({}, this.dataStore).accountThresholds)
                    }), (0, v.K)(Z => (console.error("error during loading lvl thresholds"), Z))).subscribe()
                }

                storeAccountProgression(s, Z) {
                    this.storage.set([`last-progress-${s.toString()}`], Z)
                }

                storeRankedProgression(s, Z) {
                    this.storage.set([`last-progress-${s.toString()}`], Z)
                }

                getStoredAccountProgression(s) {
                    return this.storage.get([`last-progress-${s.toString()}`]) || new k
                }

                storeLastGameId(s, Z) {
                    this.storage.set([`last-game-${s.toString()}`], Z)
                }

                getStoredLastGameId(s) {
                    return this.storage.get([`last-game-${s.toString()}`]) || ""
                }

                saveRankedProgression(s, Z) {
                    this.storage.set([`last-ranked-progress-${s.toString()}`, Z.game_mode.toString()], Z)
                }

                getStoredRankedProgression(s, Z) {
                    const X = this.storage.get([`last-ranked-progress-${s.toString()}`, Z.toString()]) || new y(Z, 0, 1, 0, 0, 40);
                    return this.dataStore.userRankLevels.push(X), this._userRankLevels$.next([...this.dataStore.userRankLevels]), X
                }

                getRankedProgressions(s) {
                    return this.gameApi.get(`/user/${s}/rank`)
                }

                getRankedProgressionById(s, Z) {
                    return this.getRankedProgressions(s).pipe((0, i.U)(X => X.find(me => me.game_mode === Z)), (0, g.b)(X => (this.saveRankedProgression(s, X), X)))
                }

                calcPercentage(s, Z) {
                    const X = this.getLowerBoundaryForLvl(s.lvl, Z);
                    return 100 * (s.xp - X) / (s.xp + s.xpToNext - X)
                }

                getLowerBoundaryForLvl(s, Z) {
                    const X = Z.find(me => me.level === s - 1);
                    return X ? X.total_xp : 0
                }
            }

            return u.\u0275fac = function (s) {
                return new (s || u)(C.LFG(m.Ft), C.LFG(o.qy), C.LFG(t.xV))
            }, u.\u0275prov = C.Yz7({token: u, factory: u.\u0275fac}), u
        })()
    }, 64523: (ee, R, n) => {
        "use strict";
        n.d(R, {r: () => F, H: () => _});
        var p = n(72224), r = n(44416), m = n(61377), e = n(73307), g = n(591), v = n(8929), i = n(98723), t = n(72986),
            o = n(2994), C = n(7625), f = n(24850), P = n(83035), w = n(33403), k = n(5e3), F = (() => {
                return (T = F || (F = {}))[T.AVAILABLE = 0] = "AVAILABLE", T[T.WAITING_TO_START = 1] = "WAITING_TO_START", T[T.STARTED = 2] = "STARTED", T[T.REWARDS_AVAILABLE = 3] = "REWARDS_AVAILABLE", T[T.ENDED = 4] = "ENDED", F;
                var T
            })();
        let _ = (() => {
            class T {
                constructor(O, E, u, x) {
                    this.gameApi = O, this.authService = E, this.queueService = u, this.utilService = x, this.dataStore = {
                        sealedMode: null,
                        sealedModeStatus: F.AVAILABLE
                    }, this._sealedMode$ = new g.X(null), this._sealedModeStatus$ = new g.X(this.dataStore.sealedModeStatus), this.unsubscribe = new v.xQ
                }

                get sealedMode$() {
                    return this._sealedMode$.asObservable()
                }

                get sealedModeStatus$() {
                    return this._sealedModeStatus$.asObservable()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                fetchSealed() {
                    const O = this.authService.getUserId(), E = this.authService.getGameSessionTicket();
                    this.gameApi.get(`/user/${O}/mode/${w.B_.SEALED_DECK}/deck?session=${E}`).pipe((0, t.q)(1)).subscribe(u => {
                        this.updateSealedMode(u)
                    }, u => {
                        this.updateSealedMode(void 0)
                    })
                }

                enterSealed$(O) {
                    const E = this.authService.getUserId(), u = this.authService.getGameSessionTicket();
                    return this.gameApi.post(`/user/${E}/mode/${w.B_.SEALED_DECK}/deck?session=${u}`, {god: O}).pipe((0, t.q)(1), (0, o.b)(x => {
                        this.updateSealedMode(x)
                    }))
                }

                updateSealedMode(O) {
                    O && (O.game_mode_data = this.transformSealedModeGameModeData(O.game_mode_data)), this.dataStore.sealedMode = O, this._sealedMode$.next(O ? Object.assign({}, this.dataStore.sealedMode) : void 0), this.handleSealedModeStatus(O)
                }

                transformSealedModeGameModeData(O) {
                    const E = this.utilService.adjustToServerTime(O.end_time_remaining);
                    return Object.assign(Object.assign({}, O), {
                        end_time_server: E,
                        end_timestamp_server: Date.parse(E),
                        properties: Object.assign(Object.assign({}, O.properties), {
                            entry_cutoff_server: this.utilService.adjustToServerTime(O.properties.entry_cutoff_remaining),
                            start_time_server: this.utilService.adjustToServerTime(O.properties.start_time_remaining)
                        })
                    })
                }

                handleSealedModeStatus(O) {
                    if (O && O.sealed_id) if ("ended" !== O.status) {
                        if (!this.areRewardsAvailable(O)) return this.areWaitingToStart(O) ? (this.scheduleRefresh(O.game_mode_data.properties.start_time_server), void this.updateSealedModeStatus(F.WAITING_TO_START)) : (this.scheduleRefresh(O.game_mode_data.end_time_server, this.onSealedEnded.bind(this)), void this.updateSealedModeStatus(F.STARTED));
                        this.updateSealedModeStatus(F.REWARDS_AVAILABLE)
                    } else this.updateSealedModeStatus(F.ENDED); else this.updateSealedModeStatus(F.AVAILABLE)
                }

                scheduleRefresh(O, E) {
                    const u = Date.now(), s = new Date(O).getTime() + 1e3 - u;
                    s > 0 && s < p.v && (0, i.H)(s).pipe((0, C.R)(this.unsubscribe), (0, t.q)(1)).subscribe(Z => {
                        this.fetchSealed(), E && E()
                    })
                }

                onSealedEnded() {
                    this.queueService.activeQueues$.pipe((0, t.q)(1), (0, f.U)(O => O.find(E => E.mode.id === w.B_.SEALED_DECK))).subscribe(O => {
                        O && this.queueService.cancel(O)
                    })
                }

                areRewardsAvailable(O) {
                    const E = Date.now(), u = new Date(O.game_mode_data.end_time_server).getTime();
                    return O.losses >= O.max_losses || O.wins >= O.max_wins || E > u
                }

                areWaitingToStart(O) {
                    const E = Date.now(), u = new Date(O.game_mode_data.properties.start_time_server).getTime();
                    return u && E < u
                }

                updateSealedModeStatus(O) {
                    this.dataStore.sealedModeStatus = O, this._sealedModeStatus$.next(this.dataStore.sealedModeStatus)
                }

                claimRewards$(O) {
                    const E = this.authService.getUserId(), u = this.authService.getGameSessionTicket();
                    return this.gameApi.put(`/user/${E}/mode/${w.B_.SEALED_DECK}/deck/${O}?session=${u}`, {action: "claim"})
                }
            }

            return T.\u0275fac = function (O) {
                return new (O || T)(k.LFG(m.Ft), k.LFG(e.mI), k.LFG(P.g), k.LFG(r.F))
            }, T.\u0275prov = k.Yz7({token: T, factory: T.\u0275fac, providedIn: "root"}), T
        })()
    }, 80537: (ee, R, n) => {
        "use strict";
        n.d(R, {k: () => p});
        var p = (() => {
            return (r = p || (p = {})).CODE_0 = "You are already queueing for another game mode. (Error Code 0)", r.CODE_1 = "Unable to connect to server. Please try again later. If this problem persists, go to Settings and clear the cache. (Error Code 1)", r.CODE_2 = "Unable to connect to server. Please try again later. If this problem persists, go to Settings and clear the cache. (Error Code 2)", r.CODE_3 = "Unable to connect to server. Please try again later. If this problem persists, go to Settings and clear the cache. (Error Code 3)", r.CODE_4 = "Queueing is currently disabled for maintenance. Please try again later. (Error Code 4)", r.CODE_5 = "There was an error while starting the game. (Error Code 5)", r.CODE_6 = "There was an error while starting the game. Unable to verify game files. (Error Code 6)", r.CODE_7 = "There was an error while starting the game. Unable to verify game files. (Error Code 7)", r.CODE_8 = "Unable to connect to server. Please try again later. If this problem persists, go to Settings and clear the cache. (Error Code 8)", r.CODE_9 = "Unable to connect to server. Please try again later. If this problem persists, go to Settings and clear the cache. (Error Code 9)", r.CODE_10 = "Unable to join queue. Suspicious account activity has been detected. (Error Code 10)", r.CODE_11 = "The deck you are queueing with is not complete. (Error Code 11)", r.CODE_12 = "There was an issue authorising the game build download. (Error Code 12)", r.CODE_13 = "There was an issue downloading the game. (Error Code 13)", r.CODE_14 = "There was an issue extracting the game. (Error Code 14)", p;
            var r
        })()
    }, 8611: (ee, R, n) => {
        "use strict";
        n.d(R, {n: () => m});
        var p = n(66088), r = n(5e3);
        let m = (() => {
            class e {
                constructor(v) {
                    this.modalService = v
                }

                ngOnInit() {
                }

                hideModal() {
                    this.modalService.destroyTopModal()
                }

                reject() {
                    window.open("https://immutable.atlassian.net/servicedesk/customer/portal/1/group/1/create/18", "_blank")
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)(r.Y36(p.Z))
            }, e.\u0275cmp = r.Xpm({
                type: e,
                selectors: [["app-bot-alert-modal"]],
                inputs: {title: "title", message: "message", onOk: "onOk", okButtonText: "okButtonText"},
                decls: 12,
                vars: 0,
                consts: [[1, "gradientOverlay"], [1, "title"], [1, "description"], ["size", "large", "text", "accept", 1, "acceptButton", 3, "click"], [1, "rejectText", 3, "click"]],
                template: function (v, i) {
                    1 & v && (r._UZ(0, "div", 0), r.TgZ(1, "div", 1), r._uU(2, " account issue "), r.qZA(), r.TgZ(3, "div", 2), r._uU(4, " We\u2019ve detected some unusual activity on your account, and suspect you might be a bot. "), r._UZ(5, "br"), r._UZ(6, "br"), r._UZ(7, "br"), r._uU(8, " You won\u2019t be able to queue for games or fuse cards until we can be sure you\u2019re a human.\n"), r.qZA(), r.TgZ(9, "gu-primary-hex-button", 3), r.NdJ("click", function () {
                        return i.hideModal()
                    }), r.qZA(), r.TgZ(10, "a", 4), r.NdJ("click", function () {
                        return i.reject()
                    }), r._uU(11, " i am not a bot "), r.qZA())
                },
                styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}.title[_ngcontent-%COMP%], h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.rejectText[_ngcontent-%COMP%], .description[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.title[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.96);line-height:1.3}.rejectText[_ngcontent-%COMP%], .description[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.description[_ngcontent-%COMP%]{line-height:1.4}@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}[_nghost-%COMP%]{display:flex;flex-direction:column;align-items:center;width:calc(var(--vh) * 50);height:calc(var(--vh) * 45);padding-bottom:calc(var(--vw) * 2.5);background-image:url(/gu-assets/images/backgrounds/trader-overlay-bg.webp);background-size:cover;background-position:center}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.gradientOverlay[_ngcontent-%COMP%]{position:absolute;width:calc(var(--vh) * 50);height:calc(var(--vh) * 45);border:1px solid #182531;background:radial-gradient(ellipse at center,rgba(12,22,32,0) -80%,#0c1620 70%)}.title[_ngcontent-%COMP%]{background:linear-gradient(to bottom,#fff2d8 0%,#ebc98b 50%,#c6a052 100%);-webkit-background-clip:text;background-clip:text;-webkit-text-fill-color:transparent;padding-bottom:calc(var(--vh) * 2);padding-top:calc(var(--vh) * 6);text-transform:uppercase}.description[_ngcontent-%COMP%]{margin-top:calc(calc(var(--vw) * 2) * .7);padding-left:calc(var(--vh) * 6);padding-right:calc(var(--vh) * 6);text-align:center}.acceptButton[_ngcontent-%COMP%]{margin-top:calc(var(--vw) * 2)}.rejectText[_ngcontent-%COMP%]{margin-top:calc(var(--vw) * 2);text-transform:uppercase;color:#8be1e0;cursor:pointer}.rejectText[_ngcontent-%COMP%]:hover{text-decoration:underline}"]
            }), e
        })()
    }, 5231: (ee, R, n) => {
        "use strict";
        n.d(R, {s: () => m});
        var p = n(66088), r = n(5e3);
        let m = (() => {
            class e {
                constructor(v) {
                    this.modalService = v
                }

                ngOnInit() {
                }

                onOkCLick() {
                    this.onOk()
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)(r.Y36(p.Z))
            }, e.\u0275cmp = r.Xpm({
                type: e,
                selectors: [["app-hijack-modal"]],
                inputs: {title: "title", message: "message", onOk: "onOk", okButtonText: "okButtonText"},
                decls: 5,
                vars: 3,
                consts: [[1, "title-section"], [1, "message-section"], ["size", "large", 1, "cta-button", 3, "text", "click"]],
                template: function (v, i) {
                    1 & v && (r.TgZ(0, "div", 0), r._uU(1), r.qZA(), r.TgZ(2, "div", 1), r._uU(3), r.qZA(), r.TgZ(4, "gu-primary-hex-button", 2), r.NdJ("click", function () {
                        return i.onOkCLick()
                    }), r.qZA()), 2 & v && (r.xp6(1), r.Oqu(i.title), r.xp6(2), r.Oqu(i.message), r.xp6(1), r.Q6J("text", i.okButtonText))
                },
                styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}.title-section[_ngcontent-%COMP%], h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.message-section[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.title-section[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.96);line-height:1.3}.message-section[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.22)}.message-section[_ngcontent-%COMP%]{line-height:1.4}@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}[_nghost-%COMP%]{border:calc(var(--vh) * .15) solid #527493;background-color:#0c1620;position:relative;display:block;color:#f6f6f6;padding:calc(var(--vw) * 2);width:calc(var(--vw) * 30);display:flex;flex-flow:column nowrap;align-items:center;padding-bottom:calc(var(--vw) * 2.5)}.title-section[_ngcontent-%COMP%]{padding-bottom:calc(var(--vh) * 2);border-bottom:calc(var(--vh) * .15) solid #fff;text-transform:uppercase}.message-section[_ngcontent-%COMP%]{margin-top:calc(calc(var(--vw) * 2) * .7);text-align:center}.cta-button[_ngcontent-%COMP%]{margin-top:calc(var(--vw) * 2)}"]
            }), e
        })()
    }, 14618: (ee, R, n) => {
        "use strict";
        n.d(R, {
            gK: () => p,
            ky: () => r,
            Kg: () => m,
            dY: () => e,
            yn: () => g,
            Ry: () => v,
            Tg: () => i,
            c7: () => t,
            Vm: () => o,
            $9: () => C,
            X4: () => f,
            Lg: () => P,
            P6: () => w,
            wT: () => k
        });
        var p = (() => {
            return (F = p || (p = {})).GAME_BUILD_DOWNLOAD_CHECK = "[GameResources] Game Build Download Check", F.GAME_BUILD_DOWNLOAD_REQUEST = "[GameResources] Game Build Download Request", F.GAME_BUILD_DOWNLOAD_PROGRESS = "[GameResources] Game Build Download Progress", F.GAME_BUILD_DOWNLOAD_EXTRACT = "[GameResources] Game Build Download Extract", F.GAME_BUILD_DOWNLOAD_SUCCESS = "[GameResources] Game Build Download Success", F.GAME_BUILD_DOWNLOAD_ERROR = "[GameResources] Game Build Download Error", F.GAME_BUILD_DOWNLOAD_UPDATE_STATUS = "[GameResources] Game Build Download Update Status", F.GAME_ASSETS_DOWNLOAD_CHECK = "[GameResources] Game Assets Download Check", F.GAME_ASSETS_DOWNLOAD_REQUEST = "[GameResources] Game Assets Download Request", F.GAME_ASSETS_DOWNLOAD_PROGRESS = "[GameResources] Game Assets Download Progress", F.GAME_ASSETS_DOWNLOAD_SUCCESS = "[GameResources]  Game Assets Download Success", F.GAME_ASSETS_DOWNLOAD_ERROR = "[GameResources]  Game Assets Download Error", F.GAME_ASSETS_DOWNLOAD_UPDATE_STATUS = "[GameResources] Game Assets Download Update Status", p;
            var F
        })();

        class r {
            constructor(_) {
                this.payload = _, this.type = p.GAME_BUILD_DOWNLOAD_CHECK
            }
        }

        class m {
            constructor() {
                this.type = p.GAME_BUILD_DOWNLOAD_REQUEST
            }
        }

        class e {
            constructor(_) {
                this.payload = _, this.type = p.GAME_BUILD_DOWNLOAD_PROGRESS
            }
        }

        class g {
            constructor(_) {
                this.payload = _, this.type = p.GAME_BUILD_DOWNLOAD_EXTRACT
            }
        }

        class v {
            constructor() {
                this.type = p.GAME_BUILD_DOWNLOAD_SUCCESS
            }
        }

        class i {
            constructor(_) {
                this.payload = _, this.type = p.GAME_BUILD_DOWNLOAD_UPDATE_STATUS
            }
        }

        class t {
            constructor(_) {
                this.payload = _, this.type = p.GAME_BUILD_DOWNLOAD_ERROR
            }
        }

        class o {
            constructor(_) {
                this.payload = _, this.type = p.GAME_ASSETS_DOWNLOAD_CHECK
            }
        }

        class C {
            constructor() {
                this.type = p.GAME_ASSETS_DOWNLOAD_REQUEST
            }
        }

        class f {
            constructor(_) {
                this.payload = _, this.type = p.GAME_ASSETS_DOWNLOAD_PROGRESS
            }
        }

        class P {
            constructor(_) {
                this.payload = _, this.type = p.GAME_ASSETS_DOWNLOAD_UPDATE_STATUS
            }
        }

        class w {
            constructor() {
                this.type = p.GAME_ASSETS_DOWNLOAD_SUCCESS
            }
        }

        class k {
            constructor(_) {
                this.payload = _, this.type = p.GAME_ASSETS_DOWNLOAD_ERROR
            }
        }
    }, 69931: (ee, R, n) => {
        "use strict";
        n.d(R, {VD: () => r, DM: () => m, gP: () => e});
        var p = n(96727);
        const r = (0, p.ZF)("gameResources"), m = () => (0, p.P1)(r, g => g.gameBuild),
            e = () => (0, p.P1)(r, g => g.gameAssets)
    }, 63411: (ee, R, n) => {
        "use strict";
        n.d(R, {e: () => _});
        var p = n(73175), r = n(591), m = n(61737), e = n(21086), g = n(2994), v = n(61709), i = n(27221), t = n(24850),
            o = n(72986), C = n(40520), f = n(73307), P = n(5e3), w = n(11735);
        const k = new p.N0;
        let _ = (() => {
            class T {
                constructor(O, E, u, x) {
                    this.authHostService = O, this.storage = E, this.featureFlagsService = u, this.router = x, this.isRemembering = !0, this.dataStore = {account: null}, this._account$ = new r.X(null)
                }

                login(O, E, u) {
                    return this.authHostService.post("/auth2?type=login&code=" + this.generate(), O).pipe((0, g.b)(x => this.sendAnalytics(!0, O.email, +x.id)), (0, v.VS)(x => this.saveAccount(x, E, u)), (0, g.b)(x => this.fetchAccount()), (0, i.K)(x => (this.sendAnalytics(!1, O.email), (0, m._)(x))))
                }

                saveAccount(O, E, u) {
                    return this.auth = O, "function" == typeof window.bridge.updateAuthPair && window.bridge.updateAuthPair(O), this.isRemembering = E, E && (this.storage.set(["user_id"], O.id), this.storage.set(["refresh"], O.refresh), this.storage.set(["access"], O.access)), this.authHostService.post(`/account/${O.id}/session`, {game_id: u}).pipe((0, g.b)(x => {
                        "function" == typeof window.bridge.updateSession && window.bridge.updateSession(x), this.storage.set(["game_session"], x)
                    }), (0, t.U)(() => !0), (0, i.K)(x => (0, e.of)(!1)))
                }

                getLinkedAddresses(O) {
                    return this.authHostService.get(`v2/account/${O}`).pipe((0, t.U)(E => E.addresses.map(u => u.address)))
                }

                fetchSession() {
                    return (0, e.of)(this.getGameSessionTicket())
                }

                sendAnalytics(O, E, u) {
                }

                get account$() {
                    return this._account$.asObservable()
                }

                _emitAccount(O) {
                    this.dataStore.account = O, this._account$.next(Object.assign({}, this.dataStore).account), this.featureFlagsService.setContext(O ? {
                        userID: `${O.id}`,
                        email: O.email,
                        name: O.username,
                        anonymous: !1
                    } : {anonymous: !0})
                }

                getUserId() {
                    return this.auth && null != this.auth.id ? this.auth.id : this.storage.get(["user_id"])
                }

                getGameSessionTicket() {
                    return this.storage.get(["game_session"])
                }

                fetchAccount() {
                    const O = this.getUserId();
                    !O || this.authHostService.get(`/v2/account/${O}`).pipe((0, o.q)(1), (0, g.b)(E => this._emitAccount(E))).subscribe()
                }

                fetchAccountDetails() {
                    const O = this.getUserId();
                    if (O) return this.authHostService.get(`/v2/account/${O}`)
                }

                updateCurrentUser(O) {
                    const E = this.getUserId();
                    return this.updateUser(E, O)
                }

                updateUser(O, E) {
                    return this.authHostService.put("/account/" + O, E).pipe((0, o.q)(1), (0, g.b)(u => this._emitAccount(u)))
                }

                getAuthHeader() {
                    let O = new C.WM;
                    return O = O.append("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"), O = O.append("Authorization", this.getAccessToken()), O
                }

                getRefreshToken() {
                    return this.storage.get(["refresh"])
                }

                getAccessToken() {
                    return this.storage.get(["access"])
                }

                getAuthToken() {
                    return this.auth
                }

                register(O) {
                    return this.authHostService.post("/register", O)
                }

                resend(O) {
                    return this.authHostService.post("/resend", {email: O})
                }

                resetPassword(O) {
                    return this.authHostService.put("/reset", {email: O})
                }

                isLoggedIn() {
                    const O = this.getRefreshToken();
                    return null != O && O.length > 0
                }

                logout() {
                    this.auth = null, this._emitAccount(null), this.storage.delete(["user_id"]), this.storage.delete(["refresh"]), this.storage.delete(["access"]), this.storage.delete(["email"]), this.storage.delete(["subscribe"]), this.authHostService.post("/logout"), this.router.navigate(["/login"]), this.featureFlagsService.setContext({
                        userID: void 0,
                        email: void 0,
                        name: void 0,
                        anonymous: !0
                    })
                }

                refreshToken() {
                    const O = this.getRefreshToken();
                    return this.authHostService.post("/auth2?type=refresh&code=" + this.generate(), {refresh: O}).pipe((0, g.b)(E => {
                    }))
                }

                linkReferralCode(O) {
                    const E = this.getUserId();
                    return this.authHostService.post(`/account/${E}/referrer`, {referral: O})
                }

                tokenIsExpired() {
                    const O = this.getAuthToken();
                    return k.isTokenExpired(O.access)
                }

                generate() {
                    function O(N, V) {
                        return (N.length - N.replace(new RegExp(V, "g"), "").length) / V.length
                    }

                    function E(N, V, ae) {
                        return V > N.length - 1 ? N : N.substr(0, V) + ae + N.substr(V + 1)
                    }

                    const u = function (N) {
                        const ae = Math.pow(16, Math.min(N, 8) - 1), ve = Math.pow(16, Math.min(N, 8)) - 1;
                        let B = (Math.floor(Math.random() * (ve - ae + 1)) + ae).toString(16);
                        for (; B.length < N;) B += u(N - 8);
                        return B
                    }, x = Math.ceil(25 * Math.random()), s = 32 - x - 4;
                    let Z = ("" + u(x) + 2 + u(2) + 2 + u(s)).toLowerCase(), ue = O(Z, "a") - O(Z, "b") + 1, we = 0;
                    for (; ue > 0 && ("a" !== Z[we] && "b" !== Z[we] && "2" !== Z[we] && (Z = E(Z, we, "b"), ue--), we++, !(we > Z.length));) ;
                    for (; ue < 0 && ("a" !== Z[we] && "b" !== Z[we] && "2" !== Z[we] && (Z = E(Z, we, "a"), ue++), we++, !(we > Z.length));) ;
                    return Z
                }
            }

            return T.\u0275fac = function (O) {
                return new (O || T)(P.LFG(f.LI), P.LFG(f.qy), P.LFG(f.B3), P.LFG(w.F0))
            }, T.\u0275prov = P.Yz7({token: T, factory: T.\u0275fac}), T
        })()
    }, 69340: (ee, R, n) => {
        "use strict";
        n.d(R, {b5: () => T});
        var p = n(21086), r = n(41746), m = n(8929), e = n(56498), g = n(24850), v = n(87168), i = n(61709),
            t = n(87545), o = n(14618), C = n(69931), f = n(79763), P = n(44416), w = n(5e3), k = n(96727);
        let T = (() => {
            class y {
                constructor(E, u, x, s) {
                    this.gameService = E, this.zone = u, this.utils = x, this.ngrxStore = s, this.downloads = new Map
                }

                getCurrentDownload() {
                    return this.currentDownload
                }

                getVersionFile(E, u) {
                    return window.bridge.httpGet(`https://s3-ap-southeast-2.amazonaws.com/gods-builds/manifests/${u}-manifest.json`).pipe(this.utils.enterZone(this.zone))
                }

                getLatest(E, u) {
                    return this.getVersionFile(E, u).pipe((0, g.U)(x => x.build_version))
                }

                getLocal(E) {
                    return (0, p.of)(this.gameService.getProperty(E.id, "version"))
                }

                getVersions(E, u) {
                    let x;
                    return x = (0, r.$R)("local" === u ? this.getLocal(E) : this.getLatest(E, u), this.getLocal(E)), x
                }

                requiresUpdate(E, u) {
                    return this.getVersions(E, u).pipe((0, v.M)(this.ngrxStore.select(C.VD)), (0, i.VS)(([[x, s], Z]) => {
                        let X = !0;
                        return s && s === x && (X = "downloaded" === this.gameService.getProperty(E.id, "status")), X && "downloading" !== Z.gameBuild.status && "extracting" !== Z.gameBuild.status && this.ngrxStore.dispatch(new o.ky({isUpdateRequired: X})), (0, p.of)(X)
                    }))
                }

                getUserPlatform() {
                    return "win32" === window.bridge.platform() ? "win" : "mac"
                }

                getLatestAssetsVersions(E, u) {
                    const x = {platform: this.getUserPlatform(), branch: u};
                    return window.bridge.httpPost("https://oyhca2oyje.execute-api.us-east-1.amazonaws.com/test/1/game/assets", x).pipe(this.utils.enterZone(this.zone))
                }

                getLocalAssetsVersions(E) {
                    return this.gameService.getProperty(E.id, "assets") ? (0, p.of)(JSON.parse(this.gameService.getProperty(E.id, "assets"))) : (0, p.of)(null)
                }

                requiresAssetsUpdate(E, u) {
                    return (0, r.$R)(this.getLocalAssetsVersions(E), this.getLatestAssetsVersions(E, u)).pipe((0, v.M)(this.ngrxStore.select(C.VD)), (0, t.w)(([[x, s], Z]) => {
                        let X;
                        return X = x ? this.deltaAssetsVersions(x, s) : s, X.length > 0 && "downloading" !== Z.gameAssets.status && this.ngrxStore.dispatch(new o.Vm({isUpdateRequired: X.length > 0})), (0, p.of)(X)
                    }))
                }

                deltaAssetsVersions(E, u) {
                    let x = [];
                    return x = E ? u ? u.filter(s => !E.some(Z => s.etag === Z.etag)) : [] : u, x
                }

                getDownloadInfo(E, u, x) {
                    return this.gameService.isObfuscatedBranch(E.id) ? {
                        url: `${E.base_url_auth}/builds/game/${u}/${this.getFileName(E, u)}`,
                        authToken: x
                    } : {url: `${E.base_url}/builds/${u}/${this.getFileName(E, u)}`, authToken: void 0}
                }

                getFileName(E, u) {
                    return "win32" === window.bridge.platform() ? "gods_" + u + E.extensions.windows : "gods_" + u + E.extensions.osx
                }

                downloadAndExtract(E, u, x) {
                    const s = this.gameService.getInstallPath(E), Z = this.getDownloadInfo(E, u, x),
                        X = window.bridge.download(Z.url, s, this.getFileName(E, u), x).pipe((0, g.U)(me => (this.currentDownload.extracting = !0, this.gameService.setProperty(E.id, "version", u), this.gameService.setProperty(E.id, "status", "downloaded"), {
                            game: E,
                            fileName: this.getFileName(E, u),
                            installPath: s
                        })));
                    return this.currentDownload = {
                        progress: window.bridge.progress,
                        download: X,
                        extracting: !1,
                        error$: new m.xQ
                    }, this.currentDownload
                }

                displayDownloadCompleteNotification(E) {
                    new window.Notification("Download Complete", {
                        body: E.title + " has finished downloading.",
                        silent: !0
                    }).onclick = () => {
                    }
                }

                deleteFile(E, u) {
                    const x = window.bridge.join(u, E);
                    window.bridge.exists(x) && window.bridge.deleteFile(x)
                }

                extractGame(E, u, x) {
                    return new e.y(s => {
                        const Z = window.bridge.join(x, u), X = window.bridge.join(x, E.title);
                        window.bridge.exists(Z) || (console.error("GameDownloadService->extractGame() unable to find file to extract"), s.error("File not found! Cannot extract.")), window.bridge.extract(Z, X, me => {
                            "win32" !== window.bridge.platform() ? window.bridge.chmod(X + "/StandaloneOSXUniversal/gods.app/Contents/MacOS/gods", we => {
                                we ? (console.error(we), s.error(we)) : s.next(!0)
                            }) : s.next(!0)
                        })
                    }).pipe((0, i.VS)(s => {
                        if (s) return this.gameService.setProperty(E.id, "status", "extracted"), this.gameService.refreshGameContext(), null != this.currentDownload && (this.currentDownload.extracting = !1), (0, p.of)(s)
                    }))
                }

                uninstallGame(E, u) {
                    window.bridge.deleteFile(window.bridge.join(u, E.title))
                }
            }

            return y.\u0275fac = function (E) {
                return new (E || y)(w.LFG(f.hM), w.LFG(w.R0b), w.LFG(P.F), w.LFG(k.yh))
            }, y.\u0275prov = w.Yz7({token: y, factory: y.\u0275fac, providedIn: "root"}), y
        })()
    }, 79763: (ee, R, n) => {
        "use strict";
        n.d(R, {hM: () => y});
        var p = n(591), r = n(61737), m = n(21086), e = n(24850), g = n(92198), v = n(72986), i = n(61377),
            t = n(73307), o = n(63764), C = n(80537), P = (n(63411), n(52492)), w = n(66088), k = n(5e3);
        let y = (() => {
            class O {
                constructor(u, x, s, Z, X, me) {
                    this.authHostService = u, this.auth = x, this.storage = s, this.modalService = Z, this.akuma = X, this.gameApi = me, this._currentGameContext$ = new p.X(null), this._branches$ = new p.X([]), this.dataStore = {
                        currentGameContext: null,
                        branches: []
                    }
                }

                get currentGameContext$() {
                    return this._currentGameContext$.asObservable()
                }

                get branches$() {
                    return this._branches$.asObservable()
                }

                getBranch$(u) {
                    const x = this.getProperty(u, "branch"), s = x && "" !== x ? x : "beta";
                    return this.branches$.pipe((0, e.U)(Z => Z.find(X => X.name === s)), (0, g.h)(Z => !!Z))
                }

                isObfuscatedBranch(u = 1) {
                    const x = this.getProperty(u, "branch"), s = this.dataStore.branches.find(Z => Z.name === x);
                    return s && s.obfuscated
                }

                onValidBranch(u, x) {
                    return !(!u || !x.find(s => s.name === u))
                }

                fetchBranchesExtended(u) {
                    const x = this.getProperty(u, "branch");
                    this.fetchBranchesExtendedApi(u).subscribe(s => {
                        this.onValidBranch(x, s) || (this.setProperty(u, "branch", "beta"), this.refreshGameContext(), this.auth.logout(), setTimeout(() => window.location.reload())), this.dataStore.branches = s, this._branches$.next([...this.dataStore.branches])
                    })
                }

                fetchBranchesExtendedApi(u) {
                    const x = this.auth.getUserId();
                    return this.authHostService.get(`/game/${u}/player/${x}/branch?format=extended`).pipe((0, v.q)(1))
                }

                setGuGameContext() {
                    this.dataStore.currentGameContext = this.getMockedGuGame(), this._emitCurrentGameContext()
                }

                refreshGameContext() {
                    this._emitCurrentGameContext()
                }

                _emitCurrentGameContext() {
                    this._currentGameContext$.next(Object.assign({}, this.dataStore).currentGameContext)
                }

                getGames(u) {
                    return this.authHostService.get("/account/" + u + "/game")
                }

                getUserTutorialMissions(u, x) {
                    return (!u || !x) && (u = this.auth.getUserId(), x = this.auth.getGameSessionTicket()), this.gameApi.get(`/user/${u}/tutorial?session=${x}`)
                }

                updateUserTutorialMissions(u, x, s) {
                    return (!u || !s) && (u = this.auth.getUserId(), s = this.auth.getGameSessionTicket()), this.gameApi.post(`/user/${u}/tutorial?session=${s}`, x)
                }

                setProcessID(u, x) {
                    null == this.sessions && (this.sessions = new Map);
                    const s = this.sessions.get(u);
                    s && (s.pid = x, this.sessions.set(u, s))
                }

                isInstalled(u) {
                    const x = this.getPlayPath(u), s = window.bridge.exists(x);
                    return s || console.error("Game is not installed", x), s
                }

                play(u, x) {
                    const s = this.getPlayPath(u);
                    if (!this.isInstalled(u)) return console.error("gameService->play() game not intalled", u.id, u.title), (0, r._)(C.k.CODE_6);
                    let Z;
                    return Z = x ? window.bridge.executeArgs(s, x, (X, me) => {
                        if (me) return console.error("gameService->play()->window.bridge.executeArgs() error starting game", s, me), (0, r._)(C.k.CODE_7);
                        this.logGameClientLaunched()
                    }) : window.bridge.execute(s, (X, me) => {
                        if (me) return console.error("gameService->play()->window.bridge.execute() error starting game", s, me), (0, r._)(C.k.CODE_7);
                        this.logGameClientLaunched()
                    }), "win32" !== window.bridge.platform() && Z.pid++, this.setProcessID(u.id, Z.pid), (0, m.of)({process: Z})
                }

                logGameClientLaunched() {
                    "function" == typeof gtag && gtag("event", "succeeded", {event_category: "gameClientLaunched"}), this.akuma.postEvent("Flow", "_gameClientLaunched_succeeed")
                }

                getPlayPath(u) {
                    const x = this.getInstallPath(u), s = window.bridge.join(x, u.title);
                    return "win32" === window.bridge.platform() ? window.bridge.join(s, u.executables.windows) : window.bridge.join(s, u.executables.osx)
                }

                showInfoModal(u, x) {
                    this.modalService.createModal(o.S, {title: u, text: x}, {
                        blurredBackground: !0,
                        canCloseFromInside: !1,
                        position: P.e1.Center,
                        size: P.Cg.StretchableWorkarea
                    })
                }

                getMockedGuGame() {
                    return {
                        id: 1,
                        title: "Gods Unchained",
                        description: "Gods Unchained is a state of the art competitive card game driven by decentralized asset ownership.\n      <br><br>Gods Unchained combines the convenience and beauty of digital card games with\n      the true ownership offered by physical card games to create the world's first blockchain eSport.",
                        background_url: "",
                        thumbnail_url: "launcher-mockup-gu-logo.png",
                        base_url: "https://builds.godsunchained.com",
                        base_url_auth: "https://d2kgdofmel8ecp.cloudfront.net",
                        userId: this.auth.getUserId(),
                        role: "dev",
                        executables: {
                            osx: "/StandaloneOSXUniversal/gods.app",
                            windows: "/StandaloneWindows64/gods.exe"
                        },
                        extensions: {osx: "_osx_full.zip", windows: "_win64_full.zip"}
                    }
                }

                getDefaultInstallPath() {
                    return "win32" === window.bridge.platform() ? window.bridge.homeDirectory() + "\\AppData\\Local\\GodsUnchained" : window.bridge.homeDirectory() + "/Library/GodsUnchained/"
                }

                getInstallPath(u) {
                    return this.getProperty(u.id, "path") || this.getDefaultInstallPath()
                }

                getAssetsPath() {
                    return "win32" === window.bridge.platform() ? window.bridge.homeDirectory() + "\\Documents\\My Games\\GodsUnchained\\Assets" : window.bridge.homeDirectory() + "/Library/GodsUnchained/Assets"
                }

                getGameId() {
                    return this.dataStore.currentGameContext ? this.dataStore.currentGameContext.id : null
                }

                getProperty(u, x) {
                    return this.storage.get(["game", String(u), x])
                }

                deleteProperty(u, x) {
                    return this.storage.delete(["game", String(u), x])
                }

                setProperty(u, x, s) {
                    return this.storage.set(["game", String(u), x], s)
                }

                getBranch(u) {
                    const x = this.getProperty(u, "branch");
                    return (0, m.of)(x && "" !== x ? x : "beta")
                }

                clearAssets(u) {
                    this.setProperty(u, "assets", JSON.stringify([])), window.bridge.clearGUAssets(x => {
                        console.error("Error Clearing New Assets", x)
                    }), location.reload()
                }

                checkInstallationPath(u) {
                    if (!this.getProperty(u, "path")) {
                        const s = this.getDefaultInstallPath();
                        this.setProperty(u, "path", s), this.clearVersion(u)
                    }
                }

                clearVersion(u) {
                    this.deleteProperty(u, "version"), this.refreshGameContext(), setTimeout(() => window.location.reload())
                }
            }

            return O.\u0275fac = function (u) {
                return new (u || O)(k.LFG(t.LI), k.LFG(t.mI), k.LFG(t.qy), k.LFG(w.Z), k.LFG(i.jt), k.LFG(i.Ft))
            }, O.\u0275prov = k.Yz7({token: O, factory: O.\u0275fac, providedIn: "root"}), O
        })()
    }, 24058: (ee, R, n) => {
        "use strict";
        n.d(R, {m: () => m});
        var p = n(73307), r = n(5e3);
        let m = (() => {
            class e {
                constructor(v) {
                    this.storageService = v, this.logsClearedKey = "logsCleared", this.fileNames = ["main.log", "main.old.log", "renderer.log", "renderer.old.log"]
                }

                shouldClearLogs() {
                    return !this.storageService.get([this.logsClearedKey])
                }

                clearLogs() {
                    ("win32" === window.bridge.platform() ? this.windowsPaths() : this.macPaths()).forEach(i => {
                        this.fileNames.forEach(t => {
                            const o = `${i}${t}`;
                            window.bridge.exists(o) && window.bridge.deleteFile(o)
                        })
                    }), this.storageService.set([this.logsClearedKey], !0)
                }

                windowsPaths() {
                    return [`${window.bridge.homeDirectory()}\\AppData\\Roaming\\immutable-launcher\\logs\\`, `${window.bridge.homeDirectory()}\\AppData\\Roaming\\apollo-launcher\\logs\\`]
                }

                macPaths() {
                    return [`${window.bridge.homeDirectory()}/Library/Logs/immutable-launcher/`, `${window.bridge.homeDirectory()}/Library/Logs/apollo-launcher/`]
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)(r.LFG(p.qy))
            }, e.\u0275prov = r.Yz7({token: e, factory: e.\u0275fac, providedIn: "root"}), e
        })()
    }, 52492: (ee, R, n) => {
        "use strict";
        n.d(R, {e1: () => p, Cg: () => r});
        var p = (() => {
            return (e = p || (p = {}))[e.Center = 0] = "Center", e[e.Custom = 1] = "Custom", p;
            var e
        })(), r = (() => {
            return (e = r || (r = {}))[e.Fullscreen = 0] = "Fullscreen", e[e.Workarea = 1] = "Workarea", e[e.StretchableFullscreen = 2] = "StretchableFullscreen", e[e.StretchableWorkarea = 3] = "StretchableWorkarea", r;
            var e
        })()
    }, 66088: (ee, R, n) => {
        "use strict";
        n.d(R, {Z: () => w});
        var p = n(8929), r = n(2994), m = n(57503), e = n(5e3), g = n(22313), v = n(69808);
        const i = ["modalHolder"];

        function t(k, F) {
        }

        let o = (() => {
            class k {
                constructor(_, T, y) {
                    this.resolver = _, this.sanitizer = T, this.el = y, this.blurredBackground = !1, this.canCloseFromInside = !1, this.canCloseFromOutside = !0, this.closeModal$ = new e.vpe
                }

                get myStyle() {
                    return this.sanitizer.bypassSecurityTrustStyle(`\n      z-index: ${this.styles.zIndex};\n    `)
                }

                ngOnInit() {
                    const _ = this.resolver.resolveComponentFactory(this.component);
                    this.componentRef = this.modalHolder.createComponent(_, 0, this.modalHolder.injector, [[]]), Object.assign(this.componentRef.instance, this.inputs), this.calculateLocation()
                }

                ngOnDestroy() {
                    this.componentRef = null
                }

                calculateLocation() {
                }

                closeModal(_) {
                    _ && !this.canCloseFromInside || !_ && this.canCloseFromOutside && this.closeModal$.emit()
                }

                onClickedOutside(_) {
                }
            }

            return k.\u0275fac = function (_) {
                return new (_ || k)(e.Y36(e._Vd), e.Y36(g.H7), e.Y36(e.SBq))
            }, k.\u0275cmp = e.Xpm({
                type: k,
                selectors: [["app-modal"]],
                viewQuery: function (_, T) {
                    if (1 & _ && e.Gf(i, 7, e.s_b), 2 & _) {
                        let y;
                        e.iGM(y = e.CRH()) && (T.modalHolder = y.first)
                    }
                },
                hostVars: 2,
                hostBindings: function (_, T) {
                    2 & _ && e.Akn(T.myStyle)
                },
                inputs: {
                    component: "component",
                    inputs: "inputs",
                    styles: "styles",
                    blurredBackground: "blurredBackground",
                    canCloseFromInside: "canCloseFromInside",
                    canCloseFromOutside: "canCloseFromOutside"
                },
                outputs: {closeModal$: "closeModal$"},
                decls: 4,
                vars: 1,
                consts: [[1, "bgOverlay", 3, "click"], [1, "modalContentContainer", 3, "ngStyle", "click"], ["modalHolder", ""]],
                template: function (_, T) {
                    1 & _ && (e.TgZ(0, "a", 0), e.NdJ("click", function () {
                        return T.closeModal(!1)
                    }), e.qZA(), e.TgZ(1, "div", 1), e.NdJ("click", function () {
                        return T.closeModal(!0)
                    }), e.YNc(2, t, 0, 0, "ng-template", null, 2, e.W1O), e.qZA()), 2 & _ && (e.xp6(1), e.Q6J("ngStyle", T.styles))
                },
                directives: [v.PC],
                styles: ["@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}[_nghost-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%;display:block}.bgOverlay[_ngcontent-%COMP%]{position:absolute;right:0;left:0;top:0;bottom:0;background-color:#0c1620;opacity:.7}.bgOverlay--transparent[_ngcontent-%COMP%]{background:transparent}.modalContentContainer[_ngcontent-%COMP%]{position:absolute;top:0;left:0;opacity:1}"]
            }), k
        })();
        var C = n(6674), f = n(44416), P = n(52492);
        let w = (() => {
            class k {
                constructor(_, T, y, O, E) {
                    this.resolver = _, this.appRef = T, this.utilsService = O, this.resizeService = E, this._modalDestroy$ = new p.xQ, this.modalsStack = [], this.modalFactory = this.resolver.resolveComponentFactory(o), this.renderer = y.createRenderer(null, null), this.resizeService.viewPortUnits$.pipe((0, r.b)(({vh: u}) => this.vh = u)).subscribe()
                }

                setModalVCRs(_, T) {
                    this.workareaVcr = _, this.fullscreenVcr = T
                }

                get modalDestroy$() {
                    return this._modalDestroy$.asObservable()
                }

                createModal(_, T = {}, {
                    canCloseFromInside: y = !1,
                    canCloseFromOutside: O = !0,
                    blurredBackground: E = !1,
                    position: u = P.e1.Center,
                    customPosition: x = null,
                    size: s = P.Cg.StretchableFullscreen
                } = {}, Z) {
                    const X = Z || this.getVCR(s), me = this.getModalHolderStyles(u, s, x);
                    0 === this.modalsStack.length && (this.renderer.addClass(X.element.nativeElement.parentElement, "addModalBlurBackground"), this.modalsStack.push({
                        vcr: X,
                        nativeElement: X.element.nativeElement,
                        parentElement: X.element.nativeElement.parentElement
                    }));
                    const ue = this.createModalComponent(_, T, X, me, E, y, O);
                    this.modalsStack.push({
                        component: ue,
                        vcr: X,
                        nativeElement: ue.instance.el.nativeElement
                    }), this.updateBlur()
                }

                getVCR(_) {
                    switch (_) {
                        case P.Cg.Fullscreen:
                        case P.Cg.StretchableFullscreen:
                            return this.fullscreenVcr || this.appRef.components[0].instance.vcr;
                        case P.Cg.Workarea:
                        case P.Cg.StretchableWorkarea:
                            return this.workareaVcr
                    }
                }

                getModalHolderStyles(_, T, y) {
                    if (_ === P.e1.Custom) {
                        (null === y || 2 !== y.split(":").length) && console.error("Provide valid customPosition (SELECTOR:POSITION ex. '#elementId:left')");
                        const O = y.split(":");
                        return Object.assign(Object.assign({}, this.getRelativePos(O[0], O[1])), {zIndex: T === P.Cg.Workarea ? m.Rl.measurements.headerBarZLevel - 1 : m.Rl.measurements.modalLayerZLevel})
                    }
                    return Object.assign(Object.assign({}, this.getBoundaries(_, T)), {zIndex: T === P.Cg.Workarea ? m.Rl.measurements.headerBarZLevel - 1 : m.Rl.measurements.modalLayerZLevel})
                }

                destroyTopModal() {
                    if (0 === this.modalsStack.length) return;
                    const _ = this.modalsStack.pop();
                    this._modalDestroy$.next(_.component.componentType), _.component && _.component.destroy(), _.component = null, this.updateBlur(), 1 === this.modalsStack.length && (this.renderer.removeClass(this.modalsStack[0].parentElement, "addModalBlurBackground"), this.modalsStack = [])
                }

                destroyModalsStack() {
                    0 !== this.modalsStack.length && (this.modalsStack.filter(_ => _.component).forEach(_ => {
                        this._modalDestroy$.next(_.component.componentType), _.component.destroy(), _.component = null, _.nativeElement = null
                    }), this.updateBlur(), this.renderer.removeClass(this.modalsStack[0].parentElement, "addModalBlurBackground"), this.modalsStack = [])
                }

                createModalComponent(_, T, y, O, E, u, x) {
                    const s = y.createComponent(this.modalFactory, this.modalsStack.length - 1, y.injector, [[]]);
                    return Object.assign(s.instance, {
                        styles: O,
                        blurredBackground: E,
                        canCloseFromInside: u,
                        canCloseFromOutside: x,
                        component: _,
                        inputs: T
                    }), s.instance.closeModal$.subscribe(() => {
                        y.remove(), this.destroyTopModal()
                    }), s
                }

                getBoundaries(_, T) {
                    if (_ === P.e1.Center) {
                        if (T === P.Cg.StretchableFullscreen || T === P.Cg.StretchableWorkarea) return {
                            "top.%": 50,
                            "left.%": 50,
                            transform: "translate(-50%, -50%)"
                        };
                        if (T === P.Cg.Fullscreen || T === P.Cg.Workarea) return {top: 0, bottom: 0, left: 0, right: 0};
                        console.error(`Size '${T}' not supported`)
                    } else console.error(`Position '${_}' not supported`)
                }

                getRelativePos(_, T) {
                    const O = window.document.querySelector(_).getBoundingClientRect();
                    switch (T) {
                        case"left":
                            return {
                                "right.px": document.body.clientWidth - O.right + O.width + 15,
                                "top.px": O.top + O.height / 2,
                                transform: "translateY(-50%)"
                            };
                        case"right":
                            return {
                                "left.px": O.right + 15,
                                "top.px": O.top + O.height / 2,
                                transform: "translateY(-50%)"
                            };
                        case"top":
                            return {
                                top: "unset",
                                "bottom.px": document.body.clientHeight - O.bottom + O.height + 15,
                                "left.px": O.left + O.width / 2,
                                transform: "translateX(-50%)"
                            };
                        case"bottom":
                            return {
                                "top.px": O.bottom + 15,
                                "left.px": O.left + O.width / 2,
                                transform: "translateX(-50%)"
                            }
                    }
                    return {"top.%": 50, "left.%": 50, transform: "translate(-50%, -50%)"}
                }

                updateBlur() {
                    if (this.modalsStack.filter(_ => !!_.nativeElement).forEach(_ => this.setBlurredBackground(_.nativeElement, !1)), this.modalsStack.length > 1) {
                        const _ = this.utilsService.findLastIndex(this.modalsStack, T => T.component && T.component.instance && T.component.instance.blurredBackground);
                        _ > 0 && this.setBlurredBackground(this.modalsStack[_].nativeElement, !0)
                    }
                }

                setBlurredBackground(_, T) {
                    let y;
                    _ instanceof Comment ? y = _.previousSibling : (y = _, this.renderer.setStyle(_, "backgroundColor", T ? "rgba(29,47,65, 0.6)" : "unset")), this.renderer.setStyle(y, "backdrop-filter", T ? `blur(${1.5 * this.vh}px)` : "none")
                }
            }

            return k.\u0275fac = function (_) {
                return new (_ || k)(e.LFG(e._Vd), e.LFG(e.z2F), e.LFG(e.FYo), e.LFG(f.F), e.LFG(C._))
            }, k.\u0275prov = e.Yz7({token: k, factory: k.\u0275fac}), k
        })()
    }, 77391: (ee, R, n) => {
        "use strict";
        n.d(R, {f: () => m});
        var p = n(591), r = n(5e3);
        let m = (() => {
            class e {
                constructor() {
                    this._currentRoute$ = new p.X("")
                }

                get currentRoute$() {
                    return this._currentRoute$.asObservable()
                }

                updateCurrentRoute(v) {
                    this._currentRoute$.next(v)
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)
            }, e.\u0275prov = r.Yz7({token: e, factory: e.\u0275fac, providedIn: "root"}), e
        })()
    }, 236: (ee, R, n) => {
        "use strict";
        n.d(R, {u: () => r});
        var p = n(5e3);
        let r = (() => {
            class m {
                transform(g) {
                    const v = Math.floor(g / 60);
                    return v.toString().padStart(1, "0") + ":" + Math.floor(g - 60 * v).toString().padStart(2, "0")
                }
            }

            return m.\u0275fac = function (g) {
                return new (g || m)
            }, m.\u0275pipe = p.Yjl({name: "duration", type: m, pure: !0}), m
        })()
    }, 83035: (ee, R, n) => {
        "use strict";
        n.d(R, {g: () => t});
        var p = n(59633), m = n(591), e = n(1059), g = n(92198), v = n(61377), i = n(5e3);
        let t = (() => {
            class o {
                constructor(f, P) {
                    this.analyticsService = f, this.akumaService = P, this.dataStore = {activeQueues: []}, this._activeQueues$ = new m.X([]), this._queueStatus$ = new m.X(null)
                }

                get queueStatus$() {
                    return this._queueStatus$.asObservable()
                }

                get activeQueues$() {
                    return this._activeQueues$.asObservable()
                }

                _emitQueues() {
                    this._activeQueues$.next(Object.assign({}, this.dataStore).activeQueues)
                }

                enqueue(f) {
                    this.dataStore.activeQueues.push(f), this._emitQueues()
                }

                dequeue(f) {
                    this.dataStore.activeQueues = this.dataStore.activeQueues.filter(P => P !== f), this._emitQueues()
                }

                start(f, P, w) {
                    const k = {game_id: f, mode: P, startTimestamp: (new Date).getTime(), status: "active", params: w};
                    return this.enqueue(k), this._queueStatus$.next(k), this.logQueueStarted(k), this.getQueueSubset(_ => _ === k).pipe((0, e.O)(k))
                }

                cancel(f) {
                    this.dataStore.activeQueues = this.dataStore.activeQueues.filter(P => P && (P.game_id !== f.game_id || P.mode.id !== f.mode.id)), f.status = "cancelled", f.startTimestamp = null, this._queueStatus$.next(f), this._emitQueues(), this.logQueueCancelled(f)
                }

                complete(f) {
                    this.dataStore.activeQueues = this.dataStore.activeQueues.filter(P => P && (P.game_id !== f.game_id || P.mode.id !== f.mode.id)), f.status = "completed", f.startTimestamp = null, this._queueStatus$.next(f), this._emitQueues(), this.logQueueCompleted(f)
                }

                stopAllQueues() {
                    this.dataStore.activeQueues.forEach(f => this.cancel(f))
                }

                getQueue(f, P) {
                    return this.getQueueSubset(w => w && w.game_id === f && w.mode.id === P)
                }

                getGameQueues(f) {
                    return this.getQueueSubset(P => P && P.game_id === f)
                }

                getQueueSubset(f) {
                    return this.queueStatus$.pipe((0, g.h)(P => f(P)))
                }

                logQueueCancelled(f) {
                    "function" == typeof gtag && gtag("event", "failed", {event_category: "queue"});
                    const P = {
                        game_id: f.game_id,
                        mode_id: f.mode.id,
                        mode_name: f.mode.name,
                        button_state: "queue_cancelled"
                    };
                    this.analyticsService.postEvent(new p.Queue.Cancelled.Event(P)), this.akumaService.postEvent("Flow", "_queue_failed", P), this.akumaService.postEvent("Control", "arenaHomeGameStartBtn_pressed", P)
                }

                logQueueCompleted(f) {
                    "function" == typeof gtag && gtag("event", "succeeded", {event_category: "queue"});
                    const P = {
                        game_id: f.game_id,
                        mode_id: f.mode.id,
                        mode_name: f.mode.name,
                        button_state: "queue_completed"
                    };
                    this.analyticsService.postEvent(new p.Queue.Completed.Event(P)), this.akumaService.postEvent("Flow", "_queue_succeeded", P)
                }

                logQueueStarted(f) {
                    "function" == typeof gtag && gtag("event", "started", {event_category: "queue"});
                    const P = {
                        game_id: f.game_id,
                        mode_id: f.mode.id,
                        mode_name: f.mode.name,
                        button_state: "queue_started"
                    };
                    this.analyticsService.postEvent(new p.Queue.Started.Event(P)), this.akumaService.postEvent("Flow", "_queue_started", P), this.akumaService.postEvent("Control", "arenaHomeGameStartBtn_pressed", P)
                }
            }

            return o.\u0275fac = function (f) {
                return new (f || o)(i.LFG(v.yD), i.LFG(v.jt))
            }, o.\u0275prov = i.Yz7({token: o, factory: o.\u0275fac, providedIn: "root"}), o
        })()
    }, 6674: (ee, R, n) => {
        "use strict";
        n.d(R, {_: () => f});
        var p = n(8929), r = n(591), m = n(23753), e = n(80013), g = n(92198), v = n(2994), i = n(7625), t = n(44416),
            o = n(73307), C = n(5e3);
        let f = (() => {
            class P {
                constructor(k, F, _) {
                    this.utils = k, this.zone = F, this.storage = _, this.unsubscribe = new p.xQ, this._windowSize$ = new r.X({
                        width: 0,
                        height: 0
                    }), this._viewPortUnits$ = new r.X({
                        vh: 0,
                        vw: 0
                    }), this.ClientSize = "CLIENT_SIZE", this.updateBridgeClientViewport(), this.watchWindowResize()
                }

                get windowSize$() {
                    return this._windowSize$.asObservable()
                }

                get viewPortUnits$() {
                    return this._viewPortUnits$.asObservable()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                onResize(k) {
                    this._windowSize$.next({width: k.target.innerWidth, height: k.target.innerHeight})
                }

                setViewPortUnits({vh: k, vw: F}) {
                    this._viewPortUnits$.next({vw: F, vh: k})
                }

                watchWindowResize() {
                    (0, m.R)(window, "resize").pipe((0, e.b)(100)).subscribe(k => this.onResize(k))
                }

                watchClientResize() {
                    this._currentDisplaySize = window.bridge.getDisplaySize(), window.bridge.displayMetricsChange$.pipe(this.utils.enterZone(this.zone), (0, g.h)(k => this.displayMetricsDiffer(k)), (0, v.b)(k => {
                        this._currentDisplaySize = k, this.resizeClient(this.currentClientSize)
                    })).subscribe()
                }

                get currentClientSize() {
                    return this.storage.get([this.ClientSize]) || "medium"
                }

                resizeClient(k) {
                    const F = P.clientSizes.find(T => T.name === k);
                    if (!F) return void console.error(`Client Size: ${k}, not supported`);
                    this.storage.set([this.ClientSize], F.name);
                    const _ = this.calcClientSize(F.displayPortion, this._currentDisplaySize.width);
                    window.bridge.setClientSize(_.width, _.height, !0, !0)
                }

                calcClientSize(k, F) {
                    const _ = Math.floor(F * k);
                    return {width: _, height: Math.floor(9 * _ / 16)}
                }

                displayMetricsDiffer(k) {
                    return k.width !== this._currentDisplaySize.width && k.height !== this._currentDisplaySize.height
                }

                updateBridgeClientViewport() {
                    this.viewPortUnits$.pipe((0, g.h)(() => "function" == typeof window.bridge.updateViewportUnits), (0, v.b)(k => window.bridge.updateViewportUnits(k)), (0, i.R)(this.unsubscribe)).subscribe()
                }
            }

            return P.clientSizes = [{name: "small", displayPortion: .5}, {
                name: "medium",
                displayPortion: .75
            }, {name: "large", displayPortion: .85}], P.\u0275fac = function (k) {
                return new (k || P)(C.LFG(t.F), C.LFG(C.R0b), C.LFG(o.qy))
            }, P.\u0275prov = C.Yz7({token: P, factory: P.\u0275fac}), P
        })()
    }, 5969: (ee, R, n) => {
        "use strict";
        n.d(R, {g: () => m});
        var p = n(591), r = n(5e3);
        let m = (() => {
            class e {
                constructor() {
                    this._openSettings$ = new p.X(null)
                }

                get openSettings$() {
                    return this._openSettings$.asObservable()
                }

                openSettings(v = "immutable") {
                    this._openSettings$.next(v)
                }

                markSettingsAsOpen() {
                    this._openSettings$.next(null)
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)
            }, e.\u0275prov = r.Yz7({token: e, factory: e.\u0275fac}), e
        })()
    }, 44416: (ee, R, n) => {
        "use strict";
        n.d(R, {F: () => v});
        var p = n(52886), r = n(61377), m = n(56498), e = n(57674), g = n(5e3);
        let v = (() => {
            class i {
                constructor(o) {
                    this.filterService = o
                }

                markFormGroupTouched(o) {
                    Object.values(o.controls).forEach(C => {
                        C.markAsTouched(), C.controls && this.markFormGroupTouched(C)
                    })
                }

                getRandomInt(o, C) {
                    return o = Math.ceil(o), C = Math.floor(C), Math.floor(Math.random() * (C - o + 1)) + o
                }

                arrayToMap(o, C, f) {
                    return o ? o.reduce((P, w) => (P[C(w)] = f(w), P), {}) : {}
                }

                groupBy(o, C) {
                    const f = new Map;
                    return o.forEach(P => {
                        const w = C(P), k = f.get(w);
                        k ? k.push(P) : f.set(w, [P])
                    }), f
                }

                convertIdsToCards(o, C, f) {
                    const P = [];
                    for (const w in C) if (C[w]) {
                        const k = f.get(parseInt(w));
                        C[w].forEach(F => {
                            if (-1 !== o.indexOf(F.id)) {
                                const _ = new p.Zb(F.id, parseInt(w), F.q, k, F.status);
                                P.push(_)
                            }
                        })
                    }
                    return P
                }

                diff(o, C) {
                    return [...o.filter(w => !C.includes(w)), ...C.filter(w => !o.includes(w))]
                }

                enterZone(o) {
                    return C => new m.y(f => C.subscribe({
                        next(P) {
                            o.run(() => f.next(P))
                        }, error(P) {
                            f.error(P)
                        }, complete() {
                            f.complete()
                        }
                    }))
                }

                findLastIndex(o, C) {
                    const f = o.slice().reverse().findIndex(C);
                    return f >= 0 ? o.length - 1 - f : f
                }

                hashCode(o) {
                    let f, P, C = 0;
                    if (0 === o.length) return C;
                    for (f = 0; f < o.length; f++) P = o.charCodeAt(f), C = (C << 5) - C + P, C |= 0;
                    return C
                }

                chunk(o, C) {
                    const f = [];
                    for (; o.length;) f.push(o.splice(0, C));
                    return f
                }

                calcTopCards(o, C, f) {
                    const P = this.filterService.getSort(e.PE.AscScarcity, o), w = [...C].sort(P),
                        k = Math.min(f, w.length);
                    return w.slice(0, k)
                }

                toISODateString(o) {
                    function C(f) {
                        return f < 10 ? "0" + f : f
                    }

                    return o.getUTCFullYear() + "-" + C(o.getUTCMonth() + 1) + "-" + C(o.getUTCDate()) + "T" + C(o.getUTCHours()) + ":" + C(o.getUTCMinutes()) + ":" + C(o.getUTCSeconds()) + "." + C(o.getUTCMilliseconds()) + "Z"
                }

                calculateContentHeight(o, C) {
                    let f = o.style.height, P = o.offsetHeight, w = o.scrollHeight, k = o.style.overflow;
                    if (!(P >= w)) return w;
                    if (o.style.height = P + C + "px", o.style.overflow = "hidden", w < o.scrollHeight) {
                        for (; o.offsetHeight >= o.scrollHeight;) o.style.height = (P -= C) + "px";
                        for (; o.offsetHeight < o.scrollHeight;) o.style.height = P++ + "px";
                        return o.style.height = f, o.style.overflow = k, P
                    }
                }

                dictionaryToMap(o) {
                    return Object.entries(o).map(([C, f]) => ({
                        key: C,
                        val: f
                    })).reduce((C, f) => C.set(Number(f.key), f.val), new Map)
                }

                adjustToServerTime(o) {
                    const C = 1e3 * o, P = (new Date).getTime() + C;
                    return new Date(P).toISOString()
                }
            }

            return i.\u0275fac = function (o) {
                return new (o || i)(g.LFG(r.iZ))
            }, i.\u0275prov = g.Yz7({token: i, factory: i.\u0275fac, providedIn: "root"}), i
        })()
    }, 49757: (ee, R, n) => {
        "use strict";
        n.d(R, {m: () => u});
        var p = n(45210), r = n(69808), m = n(93075), e = n(73307), g = n(51649), v = n(5e3);
        let i = (() => {
            class x {
            }

            return x.\u0275fac = function (Z) {
                return new (Z || x)
            }, x.\u0275mod = v.oAB({type: x}), x.\u0275inj = v.cJS({
                providers: [{provide: g.R, useClass: g.E}],
                imports: [[r.ez]]
            }), x
        })();
        var t = n(61377), o = n(43991);
        let C = (() => {
            class x {
            }

            return x.\u0275fac = function (Z) {
                return new (Z || x)
            }, x.\u0275mod = v.oAB({type: x}), x.\u0275inj = v.cJS({providers: [o.z], imports: [[r.ez, t.xd]]}), x
        })();
        var f = n(1639), P = n(69878), w = n(23569), k = n(79763), F = n(66088), _ = n(236), T = n(18464);
        let O = (() => {
            class x {
                transform(Z, X) {
                    const me = new T.BigNumber(10).pow(18);
                    return Z ? new T.BigNumber(Z).div(me) : null
                }
            }

            return x.\u0275fac = function (Z) {
                return new (Z || x)
            }, x.\u0275pipe = v.Yjl({name: "WeiToEth", type: x, pure: !0}), x
        })();
        var E = n(5969);
        let u = (() => {
            class x {
                static forRoot() {
                    return {ngModule: x, providers: [F.Z, k.hM, _.u, O, t.$c, w.d, E.g, {provide: e.Ho, useValue: P.N}]}
                }
            }

            return x.\u0275fac = function (Z) {
                return new (Z || x)
            }, x.\u0275mod = v.oAB({type: x}), x.\u0275inj = v.cJS({imports: [[r.ez, p.aw, m.u5, m.UX, f.W2, C, t.xd, i], p.aw, m.UX, f.W2, t.xd, i]}), x
        })()
    }, 69878: (ee, R, n) => {
        "use strict";
        n.d(R, {N: () => F});
        var p = n(61377), r = n(43991), m = n(63411), e = n(73307), g = n(40886), v = n(26959), i = n(45425),
            t = n(5254), o = n(68896), C = n(18499), f = n(24850), P = n(5e3);
        const F = {
            production: !0,
            appConfig: "./assets/config/appConfig.prod.json",
            appConfigDev: "./assets/config/appConfig.dev.json",
            facebookId: "1069247517330-3up4o81s0idk15isj1j884v7i4kng8l9.apps.googleusercontent.com",
            googleId: "329849180933335",
            ipApiKey: "MaCXYSWqarQdyw4",
            wyreId: "AC_D3GURN789ZF",
            tickerHost: "https://api.coinmarketcap.com/v1/ticker",
            analyticsHost: "https://ingest.immutable.com/",
            immutableWalletPageURL: "https://landing.immutable.com/wallet",
            envClasses: {
                authService: m.e, ethService: (() => {
                    class _ {
                        constructor(y) {
                            this.environment = y, this.initHTTPProvider()
                        }

                        initHTTPProvider() {
                            this._httpProvider = this.environment.production ? new v.J : new v.J("ropsten")
                        }

                        get httpProvider() {
                            return this._httpProvider
                        }

                        getTransactionReceipt$(y) {
                            return (0, t.D)(this._httpProvider.getTransactionReceipt(y))
                        }

                        getBalance(y) {
                            return (0, t.D)(this._httpProvider.getBalance(y))
                        }

                        getTransaction$(y) {
                            return (0, t.D)(this.provider.getTransaction(y))
                        }

                        getWETHBalance(y) {
                            let O, E;
                            return O = new i.ethers.providers.InfuraProvider(this.environment.production ? g.t : g.Y), E = this.environment.production ? "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2" : "0xc778417e063141139fce010982780140aa0cd5ab", (0, t.D)(C.WETH9.at(O, E).balanceOf(y)).pipe((0, f.U)(u => u.toString()))
                        }

                        getGasPrice() {
                            return (0, t.D)(this.provider ? this.provider.getGasPrice() : (0, o.c)())
                        }
                    }

                    return _.\u0275fac = function (y) {
                        return new (y || _)(P.LFG(e.Ho))
                    }, _.\u0275prov = P.Yz7({token: _, factory: _.\u0275fac}), _
                })(), cardsService: p.dK, storageService: (() => {
                    class _ {
                        constructor() {
                        }

                        set(y, O) {
                            return null != O && window.bridge.set(y, O)
                        }

                        get(y) {
                            return window.bridge.get(y)
                        }

                        delete(y) {
                            return window.bridge.delete(y)
                        }
                    }

                    return _.\u0275fac = function (y) {
                        return new (y || _)
                    }, _.\u0275prov = P.Yz7({token: _, factory: _.\u0275fac, providedIn: "root"}), _
                })(), authHostService: p.f1, assetsService: r.z, audioService: p.QF, featureFlagsService: p.ai
            },
            clientType: "desktop",
            guWebsite: "https://godsunchained.com",
            guManageWalletsURL: "https://godsunchained.com/manage-wallets",
            GUPropertyValidators: {
                card: "0x200e6fb8febf5355596ccdefe1247e92382cfcfb",
                board: "0x81428219ba5faee2afbe1dbe26ba5e47aab1ed45",
                trinket: "0xc50fd991bc8008928853048d0a4f9fecf3a5e8a3",
                noprop: "0xfd75675db386450d42e3968f405d34dce317adb8"
            },
            recaptchaPublicSiteKeyV2: "6LeBjfcUAAAAAMnGQNtQk2aQZ1W3pENSCbOPfp3g",
            recaptchaPublicSiteKeyV3: "6LcdouAUAAAAABwriEGDpNUrkXoIPbSSVVB2WP2f",
            sentry: {
                dsn: "https://6f5677b3a54f433bbb68ca9f275ebd2a@o1090070.ingest.sentry.io/6112682",
                tracesSampleRate: .1
            },
            purchasingUiHost: "https://purchasing-ui.prod.godsunchained.com",
            launchDarklyKey: "60135261d87a7e09e20a42fe",
            immutableXMarketplaceUrl: "https://market.x.immutable.com",
            immutableXMarketplaceUrlGUCollection: "https://market.x.immutable.com/assets?collection=0xacb3c6a43d15b907e8433077b6d38ae40936fe2c",
            GUCollectioimmutableXMarketplaceUrlGUInventory: "https://market.x.immutable.com/inventory/0xacb3c6a43d15b907e8433077b6d38ae40936fe2c"
        }
    }, 11978: (ee, R, n) => {
        "use strict";
        var p = n(22313), r = n(8929), m = n(591), e = n(21086), g = n(5254);

        class t {
            constructor(L, l, M, U) {
                this.remote = L, this.directory = l, this.filename = M
            }

            start() {
            }

            pause() {
            }

            resume() {
            }

            finish() {
            }

            cancel() {
            }

            download(L) {
                return (0, e.of)()
            }

            dummyDownload(L) {
                return (0, e.of)()
            }
        }

        class P {
            constructor() {
                this.log = void 0, this.warn = void 0, this.error = void 0, this.initLogger()
            }

            initLogger() {
            }
        }

        P.consoleLog = console.log, P.consoleError = console.error, P.consoleWarn = console.warn;
        var w = n(35736);

        class F {
            constructor(L = 1) {
                this.currentRequests = [], this.runningRequests = 0, this.maxConcurrentRequests = L
            }

            callFunction(L, ...l) {
                return L.bind(this, l), console.log("callFunction ---- ", L.name, l), new Promise((M, U) => {
                    this.currentRequests.push({resolve: M, reject: U, fnToCall: L, args: l}), this.tryNext()
                })
            }

            tryNext() {
                if (this.currentRequests.length && this.runningRequests < this.maxConcurrentRequests) {
                    const {resolve: L, reject: l, fnToCall: M, args: U} = this.currentRequests.shift();
                    this.runningRequests++, M(...U).then(ke => L(ke)).catch(ke => l(ke)).finally(() => {
                        this.runningRequests--, this.tryNext()
                    })
                }
            }
        }

        function _(b) {
            return b.join("-")
        }

        function T(b) {
            return "object" == typeof navigator && "string" == typeof navigator.userAgent && navigator.userAgent.indexOf(b) >= 0
        }

        !window.bridge && (!T("Electron") || T("Cypress")) && (window.bridge = new class {
            constructor() {
                this.logger = new P, this.variant = "browser", this.progress = new r.xQ, this.appsModalExisting$ = new m.X(!1), this.displayMetricsChange$ = new r.xQ, this.isInGame$ = new m.X(!1), this.protocolRedirect$ = new m.X(null), this.watchForDisplayChanges(), this.watchInGameStatus(), this.checkAdditionalArgs(), this.watchForAppsModal(), this.watchProtocolRedirect()
            }

            getDownloadProgress$() {
                return (0, e.of)()
            }

            watchProtocolRedirect() {
                return null
            }

            cancelDownload() {
                console.log("Preload->cancelDownload()"), this.gameDownload && this.gameDownload.cancel()
            }

            pauseDownload() {
                console.log("Preload->pauseDownload()"), this.gameDownload && this.gameDownload.pause()
            }

            resumeDownload() {
                console.log("Preload->resumeDownload()"), this.gameDownload && this.gameDownload.resume()
            }

            openDialog(L, l) {
            }

            isRunning(L) {
                return !0
            }

            extract(L, l, M) {
            }

            download(L, l, M, U) {
                return console.log("Preload->download(urlr, location, filename)", L, l, M), this.gameDownload = new t(L, l, M), this.progress = new r.xQ, (0, g.D)(this.gameDownload.download({
                    authToken: U,
                    onStart: le => {
                        console.log("Preload->download()->onStart", le)
                    },
                    onProgress: le => {
                        null != window && this.progress.next(le)
                    },
                    onEnd: le => {
                        this.progress.complete()
                    }
                }))
            }

            downloadAssets(L, l) {
                console.log("Preload->downloadAssets(WithOutSempahore)", L);
                let M = [];
                return M = L.map((U, le) => new t(U.url, l + U.location, U.file_name)), M
            }

            downloadAssetsWithSempahore(L, l, M, U, le) {
                console.log("Preload->downloadAssetsWithSempahore()", L);
                const ke = new F(le);
                return L.map((He, je) => {
                    const Je = {
                        authToken: U, onStart: fe => {
                        }, onProgress: fe => {
                            M[je].next(fe)
                        }, onEnd: fe => {
                            M[je].complete()
                        }
                    };
                    console.log(He.url, l + He.location, He.file_name);
                    const Gt = new t(He.url, l + He.location, He.file_name), ye = Gt.download.bind(Gt, Je);
                    return (0, g.D)(ke.callFunction(ye, Je))
                })
            }

            onQuit(L) {
            }

            focus() {
            }

            deleteFile(L) {
            }

            chmod(L, l) {
            }

            execute(L, l) {
                return null
            }

            executeArgs(L, l, M) {
                return null
            }

            clearCache() {
            }

            exists(L) {
                return !0
            }

            homeDirectory() {
                return ""
            }

            platform() {
                return ""
            }

            createServer(L, l) {
            }

            serverActive() {
                return null
            }

            closeServer() {
            }

            set(L, l) {
                window.sessionStorage.setItem(_(L), JSON.stringify(l))
            }

            get(L) {
                const l = window.sessionStorage.getItem(_(L));
                return null !== l ? JSON.parse(l) : null
            }

            delete(L) {
                window.sessionStorage.removeItem(_(L))
            }

            minimizeWindow() {
            }

            maximizeWindow() {
            }

            closeWindow() {
            }

            setFullscreen(L) {
            }

            getDisplaySize() {
                return {height: 0, width: 0}
            }

            setClientSize(L, l, M = !1, U = !1) {
            }

            watchForDisplayChanges() {
            }

            watchInGameStatus() {
            }

            watchForAppsModal() {
            }

            setInGameStatus(L) {
            }

            clearGUAssets(L) {
            }

            checkAdditionalArgs() {
                const L = w.argv.map(l => l.split("=")).reduce((l, [M, U]) => (l[M] = U, l), {});
                L["--auth-id"] && L["--auth-access"] && (this.authId = +L["--auth-id"], this.authAccess = L["--auth-access"]), L["--session-ticket"] && (this.sessionTicket = L["--session-ticket"]), L["--vw"] && L["--vh"] && (this.vw = L["--vw"], this.vh = L["--vh"])
            }

            updateAuthPair(L) {
            }

            updateSession(L) {
            }

            updateViewportUnits(L) {
            }

            setClientPosition(L, l, M = !1) {
            }

            toggleFullscreen() {
            }

            createClient(L, l) {
            }

            join(...L) {
            }

            version() {
            }

            launcherTarget() {
            }

            httpGet(L) {
                return (0, g.D)(fetch(L).then(l => l.json()))
            }

            httpPost(L, l) {
                return (0, e.of)()
            }
        });
        var E = n(43050), u = n(85115), x = n(25340), s = n(5e3);
        const Z = JSON.parse('{"buildNumber":"888","branch":"master"}');
        var X = n.t(Z, 2), ue = (n(12751), n(53161)), we = n(16517), N = n(32182), V = n(96727), ae = n(99565),
            ve = n(60870), be = n(40520), B = n(93075), pe = n(76360), re = n(73307), Be = n(38076);
        let De = (() => {
            class b {
                constructor(l) {
                    this.authService = l
                }

                init() {
                    this.authService.account$.subscribe(l => {
                        l ? Be.av({id: String(l.id), username: l.username}) : Be.e(M => M.setUser(null))
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.LFG(re.mI))
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac, providedIn: "root"}), b
        })();
        var Y = n(87182), ne = n(11735);
        n(57334);
        let Le = (() => {
            class b {
                serialize(l) {
                    return {
                        url: l.url,
                        params: Ce(l.root, M => M.params),
                        queryParams: Ce(l.root, M => M.queryParams),
                        data: qe(l.root)
                    }
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac}), b
        })();

        function Ce(b, L) {
            if (!b) return {};
            const l = L(b), M = b.children.find(U => "primary" === U.outlet) || b.firstChild;
            return Object.assign(Object.assign({}, l), Ce(M, L))
        }

        function qe(b) {
            if (!b) return {};
            const L = b.data, l = b.children.find(M => "primary" === M.outlet) || b.firstChild;
            return Object.assign(Object.assign({}, L), qe(l))
        }

        const Ye = {stateKey: "router", navigationActionTiming: N.R0.PostActivation, serialzer: Le};
        (0, V.ZF)(Ye.stateKey);
        var J = n(61377), ie = n(1639), xe = n(69878), Ze = (n(70893), n(59633)), pt = n(61715), rt = n(7625),
            Fe = n(61709), Ie = n(27221), We = n(92198), Me = n(24850), Oe = n(2994), Pt = (n(57503), n(70655)),
            st = n(79763);
        let Vt = (() => {
            class b {
                constructor(l, M) {
                    this.authHostService = l, this.gameService = M
                }

                recordActivity(l) {
                    return (0, g.D)(this.getCurrentGameID()).pipe((0, Fe.VS)(M => this.authHostService.post("/account/" + l + "/activity", {game_id: M})))
                }

                getCurrentGameID() {
                    return (0, Pt.mG)(this, void 0, void 0, function* () {
                        return this.gameService.getGameId()
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.LFG(re.LI), s.LFG(st.hM))
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac, providedIn: "root"}), b
        })();
        n(63411);
        var gt = n(44416);
        let q = (() => {
            class b {
                constructor(l, M, U) {
                    this.utils = l, this.zone = M, this.router = U, this._protocolPayload$ = new r.xQ, this.unsubscribe = new r.xQ
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                get protocolPayload$() {
                    return this._protocolPayload$.asObservable()
                }

                watchProtocol() {
                    window.bridge.protocolRedirect$.pipe(this.utils.enterZone(this.zone), (0, rt.R)(this.unsubscribe), (0, We.h)(l => !!l), (0, Oe.b)(({url: l}) => {
                        this.handlePayload(l), this.handleRouteChange(l)
                    })).subscribe()
                }

                handlePayload(l) {
                    const M = l.split("?payload=")[1];
                    if (!M) return !1;
                    const U = decodeURIComponent(M), le = JSON.parse(U);
                    if (this._protocolPayload$.next(le), le.toString().indexOf("/game/gu/")) {
                        const ke = le.toString();
                        this.router.navigate([ke])
                    }
                }

                handleRouteChange(l) {
                    const M = l.match(/(imtbl.*):\/\/(game\/gu\/.*)/);
                    if (!M) return !1;
                    const U = M[2];
                    U && this.router.navigate([`/${U}`])
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.LFG(gt.F), s.LFG(s.R0b), s.LFG(ne.F0))
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac, providedIn: "root"}), b
        })();
        var de = n(77391), Se = n(6674);
        const Ne = ["ratioSetter"], dt = ["*"];
        let it = (() => {
            class b {
                constructor(l, M) {
                    this.resizeService = l, this.el = M
                }

                ngOnInit() {
                    this.resizeService.windowSize$.subscribe(() => this.setCustomViewportProps()), this.setCustomViewportProps()
                }

                triggerCalcs() {
                    this.setCustomViewportProps()
                }

                setCustomViewportProps() {
                    const l = this.ratioSetter.nativeElement, M = .01 * l.offsetWidth, U = .01 * l.offsetHeight;
                    document.documentElement.style.setProperty("--vw", `${M}px`), document.documentElement.style.setProperty("--vh", `${U}px`), this.resizeService.setViewPortUnits({
                        vw: M,
                        vh: U
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(Se._), s.Y36(s.SBq))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-auto-letterbox"]],
                viewQuery: function (l, M) {
                    if (1 & l && s.Gf(Ne, 7), 2 & l) {
                        let U;
                        s.iGM(U = s.CRH()) && (M.ratioSetter = U.first)
                    }
                },
                ngContentSelectors: dt,
                decls: 5,
                vars: 0,
                consts: [[1, "appRatioSetter"], ["ratioSetter", ""], ["src", "/assets/images/16-x-9-ratio.png", "alt", "ratio image", 1, "appRatioSetter__ratioImage", 3, "load"], [1, "innerAppContainer"]],
                template: function (l, M) {
                    1 & l && (s.F$t(), s.TgZ(0, "div", 0, 1), s.TgZ(2, "img", 2), s.NdJ("load", function () {
                        return M.triggerCalcs()
                    }), s.qZA(), s.TgZ(3, "div", 3), s.Hsn(4), s.qZA(), s.qZA())
                },
                styles: [`
                [_nghost-%COMP%] {
                    display: flex;
                    flex-flow: column nowrap;
                    height: 100vh;
                    width: 100vw;
                    background: var(--gu-blue-dark);
                }
                .appRatioSetter[_ngcontent-%COMP%] {
                    margin: auto;
                    position: relative;
                    width: 100vw;
                    padding-bottom: 56.23%
                }
                .appRatioSetter__ratioImage[_ngcontent-%COMP%] {
                    display: none
                }
                .innerAppContainer[_ngcontent-%COMP%] {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    top: 0;
                    left: 0;
                    overflow: hidden;
                    display: flex;
                    flex-direction: column
                }
                @media screen and (min-aspect-ratio: 1282/720) {
                    .appRatioSetter[_ngcontent-%COMP%] {
                        height: 100vh;
                        width: auto;
                        padding-bottom: 0
                    }
                    .appRatioSetter__ratioImage[_ngcontent-%COMP%] {
                        display: block;
                        width: auto;
                        height: 100%
                    }
                }
                `]
            }), b
        })();
        var W = n(52492), j = n(66088), a = n(41777), h = n(72986), I = n(69808), oe = n(80013), Pe = n(40537),
            at = n(83035);

        function nt(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "form", 8), s.TgZ(1, "label", 9), s._uU(2, "Username"), s.qZA(), s.TgZ(3, "div", 10), s.TgZ(4, "input", 11), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().audioService.clickTinyV1.play()
                }), s.qZA(), s.TgZ(5, "gu-primary-hex-button", 12), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().updateUser()
                }), s.qZA(), s.qZA(), s.TgZ(6, "div", 13), s._uU(7, " Your username will be publicly visible. "), s.qZA(), s.qZA()
            }
            if (2 & b) {
                const l = s.oxw();
                s.Q6J("formGroup", l.formGroup), s.xp6(5), s.Q6J("text", l.updating ? "Saving" : "Save")
            }
        }

        function Kt(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "gu-primary-hex-button", 14), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().logout()
                }), s.qZA()
            }
        }

        const {buildNumber: Bt, branch: Ps} = X,
            ht = window.bridge && window.bridge.version ? window.bridge.version() : 0,
            bt = window.bridge && window.bridge.launcherTarget ? window.bridge.launcherTarget() : "PROD";
        let ts = (() => {
            class b {
                constructor(l, M, U, le, ke, ze, He, je) {
                    this.authService = l, this.fb = M, this.audioService = U, this.modalService = le, this.resizeService = ke, this.utils = ze, this.storage = He, this.queueService = je, this.loading = !1, this.updating = !1, this.version = ht, this.launcherTarget = bt, this.cerberusBuildNumber = Bt, this.cerberusBranch = Ps, this.clientSizes = Se._.clientSizes, this.volume = 0, this.volumeControl = new B.NI(.9), this.unsubscribe = new r.xQ
                }

                ngOnInit() {
                    this.anonymous || this.initUserNameForm(), this.clientSize = this.resizeService.currentClientSize, this.initVolumeControl()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                initVolumeControl() {
                    const l = this.storage.get(["gu-audioVolume"]);
                    this.volumeControl.setValue(l), this.volumeControl.valueChanges.pipe((0, rt.R)(this.unsubscribe), (0, oe.b)(100)).subscribe(M => this.audioService.setGlobalVolume(M))
                }

                logout() {
                    this.modalService.destroyTopModal(), this.queueService.stopAllQueues(), this.authService.logout()
                }

                clearCache() {
                    window.bridge.clearCache(), location.reload()
                }

                updateUser() {
                    this.formGroup.invalid ? this.utils.markFormGroupTouched(this.formGroup) : this.updating || (this.updating = !0, this.authService.updateCurrentUser({username: this.formGroup.get("username").value}).pipe((0, Pe.x)(() => {
                        this.updating = !1
                    })).subscribe())
                }

                updateClientSize(l) {
                    this.resizeService.resizeClient(l)
                }

                initUserNameForm() {
                    this.buildFormGroup(), this.loading = !0, this.authService.account$.pipe((0, rt.R)(this.unsubscribe), (0, Oe.b)(l => this.formGroup.get("username").setValue(l.username)), (0, Ie.K)(l => (this.logout(), l)), (0, Pe.x)(() => this.loading = !1)).subscribe()
                }

                buildFormGroup() {
                    this.formGroup = this.fb.group({
                        username: ["", B.kI.required],
                        volume: [this.storage.get(["gu-audioVolume"]) || 0, B.kI.required]
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(re.mI), s.Y36(B.qu), s.Y36(re.pk), s.Y36(j.Z), s.Y36(Se._), s.Y36(gt.F), s.Y36(re.qy), s.Y36(at.g))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-apollo-settings"]],
                inputs: {anonymous: "anonymous"},
                decls: 14,
                vars: 10,
                consts: [["class", "settingsForm", 3, "formGroup", 4, "ngIf"], [1, "audioControl"], [1, "audioControl__heading"], ["id", "volume", "type", "range", "min", "0", "max", "1", "step", "0.1", 1, "audioControl__rangeInput", 3, "formControl"], ["for", "#volume", 1, "audioControl__volumeLabel"], [1, "version-label"], ["size", "regular", "text", "Clear Cache", 1, "settingsForm__bottomCta", "settingsForm__bottomCta--cacheClear", 3, "click"], ["class", "settingsForm__bottomCta", "size", "regular", "text", "Logout", 3, "click", 4, "ngIf"], [1, "settingsForm", 3, "formGroup"], ["for", "usernameInput", 1, "settingsForm__label"], [1, "settingsForm__inputsRow"], ["name", "username", "type", "text", "formControlName", "username", "id", "usernameInput", "aria-describedby", "usernameHelp", 1, "settingsForm__textInput", 3, "click"], ["size", "regular", 1, "settingsForm__cta", 3, "text", "click"], ["id", "usernameHelp", 1, "settingsForm__hintText"], ["size", "regular", "text", "Logout", 1, "settingsForm__bottomCta", 3, "click"]],
                template: function (l, M) {
                    1 & l && (s.YNc(0, nt, 8, 2, "form", 0), s.TgZ(1, "div", 1), s.TgZ(2, "label", 2), s._uU(3, "Audio Volume"), s.qZA(), s._UZ(4, "input", 3), s.TgZ(5, "label", 4), s._uU(6), s.qZA(), s.qZA(), s.TgZ(7, "h5", 5), s._uU(8), s.ALo(9, "lowercase"), s.qZA(), s.TgZ(10, "h5", 5), s._uU(11), s.qZA(), s.TgZ(12, "gu-primary-hex-button", 6), s.NdJ("click", function () {
                        return M.clearCache()
                    }), s.qZA(), s.YNc(13, Kt, 1, 0, "gu-primary-hex-button", 7)), 2 & l && (s.Q6J("ngIf", !M.anonymous), s.xp6(4), s.Q6J("formControl", M.volumeControl), s.xp6(2), s.Oqu(M.volumeControl.value), s.xp6(2), s.AsE("Launcher Version: ", M.version, "-", s.lcZ(9, 8, M.launcherTarget), ""), s.xp6(3), s.AsE("Cerberus Version: ", M.cerberusBranch, ".", M.cerberusBuildNumber, ""), s.xp6(2), s.Q6J("ngIf", !M.anonymous))
                },
                directives: [I.O5, B.eT, B.Fj, B.JJ, B.oH, B._Y, B.JL, B.sg, B.u],
                pipes: [I.i8],
                styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}.version-label[_ngcontent-%COMP%], h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%], .settingsForm__hintText[_ngcontent-%COMP%], .settingsForm__textInput[_ngcontent-%COMP%], .audioControl__heading[_ngcontent-%COMP%], .settingsForm__label[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.version-label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.96);line-height:1.3}.audioControl__heading[_ngcontent-%COMP%], .settingsForm__label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.9)}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%], .settingsForm__hintText[_ngcontent-%COMP%], .settingsForm__textInput[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%], .settingsForm__hintText[_ngcontent-%COMP%], .settingsForm__textInput[_ngcontent-%COMP%]{line-height:1.4}@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;margin:auto}.settingsForm[_ngcontent-%COMP%]{display:flex;flex-flow:column nowrap;align-self:center;width:70%}.settingsForm__inputsRow[_ngcontent-%COMP%]{display:flex;align-items:center;width:100%}.settingsForm__textInput[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4);flex-grow:1;margin:0 calc(var(--vw) * 1) 0 0}.settingsForm__textInput[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.settingsForm__cta[_ngcontent-%COMP%]{min-width:calc(var(--vw) * 8);flex-grow:0}.settingsForm__hintText[_ngcontent-%COMP%]{padding-top:calc(var(--vh) * 2)}.version-label[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 4);text-align:center;user-select:all}.settingsForm__select[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .65);font-size:calc(var(--vh) * 1.9)}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4)}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.settingsForm__bottomCta[_ngcontent-%COMP%]{width:70%;margin:0 auto}.settingsForm__bottomCta--cacheClear[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 4);margin-bottom:calc(var(--vh) * 2)}.audioControl[_ngcontent-%COMP%]{width:70%;margin:calc(var(--vh) * 3) auto}.audioControl__volumeLabel[_ngcontent-%COMP%]{display:inline-block;position:relative;width:60px;line-height:20px;text-align:center;border-radius:3px;color:#e0c58f;padding:5px 10px;margin-left:8px}.audioControl__rangeInput[_ngcontent-%COMP%]{-webkit-appearance:none;width:calc(100% - 73px);height:10px;border-radius:5px;background:#1d2f41;outline:none;padding:0;margin:0}.audioControl__rangeInput[_ngcontent-%COMP%]::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:20px;height:20px;border-radius:50%;background:#e0c58f;cursor:pointer}.audioControl__rangeInput[_ngcontent-%COMP%]:active::-webkit-slider-thumb{background:#e0c58f}.audioControl__rangeInput[_ngcontent-%COMP%]::-moz-range-thumb{width:20px;height:20px;border:0;border-radius:50%;background:#e0c58f;cursor:pointer}"]
            }), b
        })();
        var Yt = n(69340);

        function Ft(b, L) {
            if (1 & b && (s.TgZ(0, "option", 12), s._uU(1), s.qZA()), 2 & b) {
                const l = L.$implicit;
                s.Q6J("ngValue", l.name), s.xp6(1), s.Oqu(l.name)
            }
        }

        function zt(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.ynx(0), s.TgZ(1, "label", 9), s._uU(2, "Branch"), s.qZA(), s.TgZ(3, "select", 10), s.NdJ("ngModelChange", function (U) {
                    return s.CHM(l), s.oxw(2).updateBranch(U, !0)
                })("click", function () {
                    return s.CHM(l), s.oxw(2).playClickTinyV1()
                })("ngModelChange", function (U) {
                    return s.CHM(l), s.oxw(2).branch = U
                }), s.YNc(4, Ft, 2, 2, "option", 11), s.qZA(), s.BQk()
            }
            if (2 & b) {
                const l = s.oxw(2);
                s.xp6(3), s.Q6J("ngModel", l.branch), s.xp6(1), s.Q6J("ngForOf", l.branchesExtended)
            }
        }

        function ss(b, L) {
            if (1 & b && (s.ynx(0), s.TgZ(1, "label", 13), s._uU(2, "Local Version"), s.qZA(), s._UZ(3, "input", 5), s.BQk()), 2 & b) {
                const l = s.oxw(2);
                s.xp6(3), s.Q6J("value", l.local)
            }
        }

        function At(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "form", 1), s.YNc(1, zt, 5, 2, "ng-container", 2), s.TgZ(2, "label", 3), s._uU(3, "Installation Path"), s.qZA(), s.TgZ(4, "div", 4), s._UZ(5, "input", 5), s.TgZ(6, "gu-icon", 6), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().showDialog()
                }), s.qZA(), s.qZA(), s.YNc(7, ss, 4, 1, "ng-container", 2), s.TgZ(8, "gu-primary-hex-button", 7), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().clearVersion()
                }), s.qZA(), s.TgZ(9, "gu-primary-hex-button", 8), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().clearAssets()
                }), s.qZA(), s.qZA()
            }
            if (2 & b) {
                const l = s.oxw();
                s.xp6(1), s.Q6J("ngIf", l.branchesExtended), s.xp6(4), s.Q6J("value", l.path), s.xp6(2), s.Q6J("ngIf", l.local)
            }
        }

        let ws = (() => {
            class b {
                constructor(l, M, U) {
                    this.gameService = l, this.gameDownloadService = M, this.audioService = U, this.loaded = !1
                }

                ngOnInit() {
                    !this.game || (this.branch = this.gameService.getProperty(this.game.id, "branch"), this.path = this.gameService.getInstallPath(this.game), this.version = this.gameService.getProperty(this.game.id, "version"), this.updateBranch(this.branch), this.initBranches())
                }

                initBranches() {
                    this.gameService.branches$.pipe((0, Fe.VS)(l => (this.branchesExtended = l, !this.branch && this.branchesExtended && this.updateBranch(this.branchesExtended[0].name), this.gameDownloadService.getVersions(this.game, this.branch)))).subscribe(([l, M]) => {
                        this.local = M, this.loaded = !0
                    }, () => this.loaded = !0)
                }

                updateBranch(l, M) {
                    this.branch = l, this.gameService.setProperty(this.game.id, "branch", this.branch), this.gameService.refreshGameContext(), M && setTimeout(() => window.location.reload())
                }

                clearVersion() {
                    this.gameService.deleteProperty(this.game.id, "version"), this.gameService.refreshGameContext(), setTimeout(() => window.location.reload())
                }

                clearAssets() {
                    this.gameService.clearAssets(this.game.id)
                }

                showDialog() {
                    this.playClickTinyV1(), window.bridge.openDialog({
                        properties: ["openDirectory", "createDirectory"],
                        defaultPath: this.path,
                        message: "Choose Install Directory"
                    }, (l, M) => {
                        l && l.length > 0 && (this.path = l[0], this.gameService.setProperty(this.game.id, "path", this.path))
                    })
                }

                playClickTinyV1() {
                    this.audioService.clickTinyV1.play()
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(st.hM), s.Y36(Yt.b5), s.Y36(re.pk))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-game-settings"]],
                inputs: {game: "game"},
                decls: 1,
                vars: 1,
                consts: [["class", "settingsForm", 4, "ngIf"], [1, "settingsForm"], [4, "ngIf"], ["for", "installpath", 1, "settingsForm__label"], [1, "settingsForm__path"], ["type", "text", "disabled", "", 1, "settingsForm__textInput", 3, "value"], ["iconLigature", "settings_cog", 1, "path-select-btn", 3, "click"], ["size", "large", "text", "Clear Version", 1, "settingsForm__cta", 3, "click"], ["size", "large", "text", "Clear Assets", 1, "settingsForm__cta", 3, "click"], ["for", "sel1", 1, "settingsForm__label"], ["name", "branch", "id", "sel1", 1, "settingsForm__select", 3, "ngModel", "ngModelChange", "click"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"], [1, "settingsForm__label"]],
                template: function (l, M) {
                    1 & l && s.YNc(0, At, 10, 3, "form", 0), 2 & l && s.Q6J("ngIf", M.loaded)
                },
                directives: [I.O5, B._Y, B.JL, B.F, B.EJ, B.JJ, B.On, I.sg, B.YN, B.Kr],
                styles: ["@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.settingsForm__textInput[_ngcontent-%COMP%], .settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%], .settingsForm__label[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.settingsForm__label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.9)}.settingsForm__textInput[_ngcontent-%COMP%], .settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.settingsForm__textInput[_ngcontent-%COMP%], .settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{line-height:1.4}[_nghost-%COMP%]{display:block;margin:auto}.settingsForm[_ngcontent-%COMP%]{display:flex;flex-flow:column nowrap;width:60%;margin:auto}.settingsForm__path[_ngcontent-%COMP%]{display:flex}.settingsForm__label[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 3)}.path-select-btn[_ngcontent-%COMP%]{height:calc(var(--vh) * 5);line-height:calc(var(--vh) * 5);width:calc(var(--vh) * 5);margin-top:calc(var(--vh) * .65);background-color:#072337;border-radius:0 calc(var(--vh) * .4) calc(var(--vh) * .4) 0;cursor:pointer;border:calc(var(--vh) * .15) solid #c6a052;border-left:none;text-align:center;display:flex}.path-select-btn[_ngcontent-%COMP%]     i{margin:auto}.settingsForm__select[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .65)}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4)}.settingsForm__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.settingsForm__textInput[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4);margin-top:calc(var(--vh) * .65)}.settingsForm__textInput[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.settingsForm__textInput[_ngcontent-%COMP%]{flex:1;border:calc(var(--vh) * .15) solid #c6a052;border-radius:calc(var(--vh) * .4) 0 0 calc(var(--vh) * .4)}.settingsForm__cta[_ngcontent-%COMP%]{align-self:center;margin:0 auto;margin-top:calc(var(--vh) * 4)}"]
            }), b
        })(), ks = (() => {
            class b {
                constructor() {
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-wallet-settings"]],
                decls: 9,
                vars: 0,
                consts: [["top", "2x-large", 1, "manageWalletsLink"], ["kind", "large", "fontWeight", "bold", "fillColor", "colors.light.100"], ["both", "large"], ["kind", "small", "fillColor", "colors.light.100"], ["href", "https://godsunchained.com/manage-wallets", "target", "_blank", "backgroundFillColor", "colors.gunmetal.500", "borderColor", "colors.gunmetal.300", "borderColorHover", "colors.gunmetal.100", "fillColor", "colors.light.300", "icon", "leave_website", "leftIconPosition", "true"]],
                template: function (l, M) {
                    1 & l && (s.TgZ(0, "gu-vertical-space", 0), s.TgZ(1, "gu-vertical-space"), s.TgZ(2, "gu-paragraph-text", 1), s._uU(3, " Wallet Management & Linking to Immutable X "), s.qZA(), s.qZA(), s.TgZ(4, "gu-vertical-space", 2), s.TgZ(5, "gu-paragraph-text", 3), s._uU(6, " Add, remove, or view wallets, and link your wallets to the Immutable X marketplace. "), s.qZA(), s.qZA(), s.TgZ(7, "gu-plain-square-button", 4), s._uU(8, " Go to Website "), s.qZA(), s.qZA())
                },
                styles: ["@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%], .settings__label[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.settings__label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.9)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{line-height:1.4}[_nghost-%COMP%]{display:block;margin:0 auto}.settings[_ngcontent-%COMP%]{display:flex;flex-flow:column nowrap;width:100%;margin:auto}.settings__label[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 3)}.settings__select[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .65)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.settings__cta[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .65);color:#affaed}.manageWalletsLink[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:flex-start}"]
            }), b
        })();

        function jt(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "div", 1), s.NdJ("click", function () {
                    const le = s.CHM(l).$implicit;
                    return s.oxw().selectTab(le.title, le)
                }), s._uU(1), s.qZA()
            }
            if (2 & b) {
                const l = L.$implicit, M = s.oxw();
                s.ekj("active", l.title === M.activeTab), s.xp6(1), s.hij(" ", l.title.toUpperCase(), " ")
            }
        }

        function ns(b, L) {
            if (1 & b && s._UZ(0, "app-apollo-settings", 7), 2 & b) {
                const l = s.oxw();
                s.Q6J("anonymous", l.anonymous)
            }
        }

        function Es(b, L) {
            if (1 & b && s._UZ(0, "app-game-settings", 8), 2 & b) {
                const l = s.oxw();
                s.Q6J("game", l.selectedGame)
            }
        }

        function _t(b, L) {
            1 & b && s._UZ(0, "app-wallet-settings", 9)
        }

        let Qt = (() => {
            class b {
                constructor(l, M, U) {
                    this.gameService = l, this.audioService = M, this.authService = U, this.activeTab = "immutable", this.games = []
                }

                ngOnInit() {
                    const l = this.authService.getUserId();
                    l ? (this.anonymous = !1, this.gameService.getGames(l).pipe((0, h.q)(1)).subscribe(M => this.games = M.records)) : this.anonymous = !0
                }

                selectTab(l, M) {
                    this.audioService.clickMediumV1.play(), this.activeTab = l, M && (this.selectedGame = M)
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(st.hM), s.Y36(re.pk), s.Y36(re.mI))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-settings-modal"]],
                inputs: {activeTab: "activeTab"},
                decls: 10,
                vars: 9,
                consts: [[1, "side-pane"], [1, "side-pane-item", 3, "click"], ["class", "side-pane-item", 3, "active", "click", 4, "ngFor", "ngForOf"], [1, "settingsContent"], ["class", "settingsContent__tab", 3, "anonymous", 4, "ngIf"], ["class", "settingsContent__tab", 3, "game", 4, "ngIf"], ["class", "settingsContent__tab", 4, "ngIf"], [1, "settingsContent__tab", 3, "anonymous"], [1, "settingsContent__tab", 3, "game"], [1, "settingsContent__tab"]],
                template: function (l, M) {
                    1 & l && (s.TgZ(0, "aside", 0), s.TgZ(1, "div", 1), s.NdJ("click", function () {
                        return M.selectTab("immutable")
                    }), s._uU(2, " Immutable "), s.qZA(), s.YNc(3, jt, 2, 3, "div", 2), s.TgZ(4, "div", 1), s.NdJ("click", function () {
                        return M.selectTab("wallet")
                    }), s._uU(5, " WALLET "), s.qZA(), s.qZA(), s.TgZ(6, "div", 3), s.YNc(7, ns, 1, 1, "app-apollo-settings", 4), s.YNc(8, Es, 1, 1, "app-game-settings", 5), s.YNc(9, _t, 1, 0, "app-wallet-settings", 6), s.qZA()), 2 & l && (s.xp6(1), s.ekj("active", "immutable" === M.activeTab), s.xp6(2), s.Q6J("ngForOf", M.games), s.xp6(1), s.ekj("active", "wallet" === M.activeTab), s.xp6(2), s.Q6J("@fade", M.activeTab), s.xp6(1), s.Q6J("ngIf", "immutable" === M.activeTab), s.xp6(1), s.Q6J("ngIf", "wallet" !== M.activeTab && "immutable" !== M.activeTab), s.xp6(1), s.Q6J("ngIf", "wallet" === M.activeTab))
                },
                directives: [I.sg, I.O5, ts, ws, ks],
                styles: ["@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}.side-pane-item[_ngcontent-%COMP%], h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.side-pane-item[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.22);line-height:1.4}[_nghost-%COMP%]{width:calc(var(--vw) * 60);height:calc(var(--vh) * 80);border-radius:calc(var(--vh) * .4);background-color:#0c1620;border:calc(var(--vh) * .15) solid #e0c58f;display:flex}.side-pane[_ngcontent-%COMP%]{width:30%;border-right:calc(var(--vh) * .15) solid #e0c58f;display:flex;flex-flow:column nowrap}.side-pane-item[_ngcontent-%COMP%]{padding:calc(var(--vh) * 1.8);color:#f6f6f6;text-align:center;transition:all .15s ease;cursor:pointer}.side-pane-item[_ngcontent-%COMP%]:hover{background-color:#1d2f41}.side-pane-item.active[_ngcontent-%COMP%]{background-color:#182531}.settingsContent[_ngcontent-%COMP%]{padding:calc(var(--vh) * 1.8);flex:1;display:flex}.settingsContent__tab[_ngcontent-%COMP%]{width:calc(var(--vw) * 30)}"],
                data: {animation: [(0, a.X$)("fade", [(0, a.eR)("* => *", [(0, a.jt)(500, (0, a.F4)([(0, a.oB)({opacity: 0}), (0, a.oB)({opacity: 1})]))])])]}
            }), b
        })();
        var he = n(5969);
        let Et = (() => {
            class b {
                constructor(l, M, U, le) {
                    this.modalService = l, this.audioService = M, this.settingsService = U, this.akumaService = le, this.unsubscribe = new r.xQ
                }

                ngOnInit() {
                    this.watchSettingsService()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                watchSettingsService() {
                    this.settingsService.openSettings$.pipe((0, rt.R)(this.unsubscribe), (0, We.h)(l => !!l)).subscribe(l => {
                        this.openSettings(l), this.settingsService.markSettingsAsOpen()
                    })
                }

                windowFullscreen() {
                    this.audioService.clickTinyV1.play(), window.bridge.toggleFullscreen()
                }

                closeWindow() {
                    this.audioService.clickTinyV1.play(), window.bridge.closeWindow()
                }

                minimize() {
                    this.audioService.clickTinyV1.play(), window.bridge.minimizeWindow()
                }

                openSettings(l) {
                    this.akumaService.postControlEvent("gu", "Arena", "", "settings", "Mnu", "pressed"), this.audioService.clickTinyV1.play(), this.modalService.createModal(Qt, {activeTab: l}, {
                        blurredBackground: !0,
                        canCloseFromOutside: !0,
                        position: W.e1.Center,
                        size: W.Cg.StretchableFullscreen
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(j.Z), s.Y36(re.pk), s.Y36(he.g), s.Y36(J.jt))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["cerberus-draggable-titlebar"]],
                decls: 9,
                vars: 0,
                consts: [[1, "electronMenuItem", "electronMenuItem--closeWindow", 3, "click"], ["iconLigature", "close_x", 1, "electronMenuItem__icon"], [1, "electronMenuItem", "electronMenuItem--windowToggle", 3, "click"], ["iconLigature", "window_toggle", 1, "electronMenuItem__icon"], [1, "electronMenuItem", "electronMenuItem--minimise", 3, "click"], ["iconLigature", "window_minimise", 1, "electronMenuItem__icon"], [1, "electronMenuItem", "electronMenuItem--settings", 3, "click"], ["iconLigature", "settings_cog", 1, "electronMenuItem__icon"], [1, "draggable"]],
                template: function (l, M) {
                    1 & l && (s.TgZ(0, "a", 0), s.NdJ("click", function () {
                        return M.closeWindow()
                    }), s._UZ(1, "gu-icon", 1), s.qZA(), s.TgZ(2, "a", 2), s.NdJ("click", function () {
                        return M.windowFullscreen()
                    }), s._UZ(3, "gu-icon", 3), s.qZA(), s.TgZ(4, "a", 4), s.NdJ("click", function () {
                        return M.minimize()
                    }), s._UZ(5, "gu-icon", 5), s.qZA(), s.TgZ(6, "a", 6), s.NdJ("click", function () {
                        return M.openSettings("immutable")
                    }), s._UZ(7, "gu-icon", 7), s.qZA(), s._UZ(8, "div", 8))
                },
                styles: [`
                [_nghost-%COMP%] {
                    width:100%;
                    height:28px;
                    z-index:23;
                    display:flex;
                    flex-direction:row-reverse;
                    padding-right:8px;
                }
                .draggable[_ngcontent-%COMP%] {
                    flex:1;
                    -webkit-app-region:drag
                }
                .electronMenuItem[_ngcontent-%COMP%]  {
                    cursor:pointer;
                    display:flex;
                    width:28px
                }
                .electronMenuItem[_ngcontent-%COMP%]:hover .electronMenuItem__icon[_ngcontent-%COMP%] {
                    color:#f6f6f6
                }
                .electronMenuItem__icon[_ngcontent-%COMP%]  {
                    font-size: 14px;
                    margin: auto;
                    text-shadow: 0 2px 0 rgba(39, 39, 39, .4);
                    color: #7192b0;
                }
                `]
            }), b
        })();
        var zs = n(39765), Os = n(25774), ds = n(97993);

        function xt(b, L) {
            1 & b && (s.TgZ(0, "cerberus-announce-banner-control", 2), s._UZ(1, "cerberus-controllable-banner"), s.qZA())
        }

        function Ws(b, L) {
            if (1 & b && (s.ynx(0), s.YNc(1, xt, 2, 0, "cerberus-announce-banner-control", 1), s.BQk()), 2 & b) {
                const l = s.oxw();
                s.xp6(1), s.Q6J("featureFlagIf", l.Flags.showControllableBanner)
            }
        }

        let Hs = (() => {
            class b {
                constructor(l, M, U, le, ke, ze, He, je, Je) {
                    this.vcr = l, this.analyticsService = M, this.authService = U, this.activityService = le, this.router = ke, this.navigationService = ze, this.route = He, this.protocolService = je, this.akumaService = Je, this.Flags = J.vU, this.destroyed$ = new r.xQ, this.watchForNavigation(), this.protocolService.watchProtocol()
                }

                ngOnInit() {
                    this.recordActivity(), this.logSessionStarted(), this.logSessionAuthenticated(), this.authService.account$.pipe((0, rt.R)(this.destroyed$)).subscribe(l => {
                        this.isLoggedIn = !!l
                    })
                }

                ngOnDestroy() {
                    this.destroyed$.next(), this.destroyed$.complete()
                }

                logSessionStarted() {
                    "function" == typeof gtag && gtag("event", "started", {event_category: "session"});
                    const l = {is_referred: !1, landing_page: window.location.pathname};
                    this.analyticsService.postEvent(new Ze.Session.Started.Event(l)), this.akumaService.postEvent("Flow", "_session_started", l), "function" == typeof fbq && fbq("track", "ViewLauncher")
                }

                logSessionAuthenticated() {
                    this.authService.isLoggedIn() && ("function" == typeof gtag && gtag("event", "authenticated", {event_category: "session"}), this.analyticsService.postEvent(new Ze.Session.Authenticated.Event({})), this.akumaService.postEvent("Flow", "_sessionAuthenticated_succeeded"))
                }

                recordActivity() {
                    (0, pt.F)(3e4).pipe((0, Fe.VS)(() => {
                        const l = this.authService.getUserId();
                        return l && this.authService.isLoggedIn() ? this.activityService.recordActivity(l) : (0, e.of)()
                    }), (0, Ie.K)((l, M) => (console.error("App->recordActivity() error", l), (0, e.of)(l)))).subscribe()
                }

                watchForNavigation() {
                    this.router.events.pipe((0, We.h)(l => l instanceof ne.m2), (0, Me.U)(() => this.route), (0, Me.U)(l => {
                        for (; l.firstChild;) l = l.firstChild;
                        return l
                    }), (0, Fe.zg)(l => l.data), (0, Me.U)(l => l.hasOwnProperty("state") ? l.state : ""), (0, Oe.b)(l => this.navigationService.updateCurrentRoute(l))).subscribe(() => {
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(s.s_b), s.Y36(J.yD), s.Y36(re.mI), s.Y36(Vt), s.Y36(ne.F0), s.Y36(de.f), s.Y36(ne.gz), s.Y36(q), s.Y36(J.jt))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["cerberus-root"]],
                decls: 4,
                vars: 1,
                consts: [[4, "ngIf"], ["class", "announceBannerControl announceBannerControl--inline", 4, "featureFlagIf"], [1, "announceBannerControl", "announceBannerControl--inline"]],
                template: function (l, M) {
                    1 & l && (s.TgZ(0, "app-auto-letterbox"), s._UZ(1, "cerberus-draggable-titlebar"), s.YNc(2, Ws, 2, 1, "ng-container", 0), s._UZ(3, "router-outlet"), s.qZA()), 2 & l && (s.xp6(2), s.Q6J("ngIf", !M.isLoggedIn))
                },
                directives: [it, Et, I.O5, ne.lC, zs.w, Os.O, ds.i],
                styles: ["[_nghost-%COMP%]{display:block}"]
            }), b
        })(), lt = (() => {
            class b {
                constructor() {
                }

                ngOnInit() {
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-home"]],
                decls: 1,
                vars: 0,
                template: function (l, M) {
                    1 & l && s._UZ(0, "router-outlet")
                },
                directives: [ne.lC],
                styles: ["[_nghost-%COMP%]{display:block;flex:1}.screen-overlay[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;top:0;left:0;z-index:-1}.app-bar[_ngcontent-%COMP%]{right:calc(var(--vw) * 3.33);position:absolute;bottom:0;right:calc(var(--vw) * 10)}"]
            }), b
        })();
        var js = n(75778), us = n(98723);

        function ps(b, L) {
            1 & b && (s.TgZ(0, "div", 6), s._uU(1, " Username is required "), s.qZA())
        }

        function os(b, L) {
            1 & b && (s.TgZ(0, "div", 6), s._uU(1, " Username must be at least 4 characters long "), s.qZA())
        }

        function Ts(b, L) {
            if (1 & b && (s.TgZ(0, "div", 6), s._uU(1), s.qZA()), 2 & b) {
                const l = s.oxw();
                s.xp6(1), s.hij(" ", l.usernameError, " ")
            }
        }

        let Ot = (() => {
            class b {
                constructor(l, M, U, le) {
                    this.router = l, this.modalService = M, this.http = U, this.authService = le, this.unsubscribe = new r.xQ
                }

                ngOnInit() {
                    this.initForm()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                initForm() {
                    this.usernameControl = new B.NI(this.username, [B.kI.required, B.kI.minLength(4)]), this.watchSearch()
                }

                watchSearch() {
                    this.usernameControl.valueChanges.pipe((0, rt.R)(this.unsubscribe), (0, oe.b)(500), (0, js.x)(), (0, Oe.b)(l => {
                        this.username = l, this.usernameError = void 0
                    })).subscribe()
                }

                submit() {
                    this.submitUsernameApi$(this.username).pipe((0, h.q)(1), (0, Oe.b)(l => {
                        this.modalService.destroyTopModal(), this.router.navigate(["/"])
                    }), (0, Ie.K)(l => (403 === l.status && (this.usernameError = "Username not allowed."), 400 === l.status && (this.usernameError = "Username is invalid."), 500 === l.status && (this.usernameError = "Username is taken."), (0, e.of)(l)))).subscribe()
                }

                submitUsernameApi$(l) {
                    const M = this.authService.getUserId(), U = this.authService.getGameSessionTicket();
                    return this.http.post(`https://test-auth.apollo.gg/account/${M}/user?session=${U}`, {username: l})
                }

                isUsernameValid$(l) {
                    const M = ["immutable", "apollo", "mythic"];
                    return (0, us.H)(1e3).pipe((0, Oe.b)(U => {
                        this.usernameError = M.some(le => le === l) ? "Username is taken" : void 0
                    }))
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(ne.F0), s.Y36(j.Z), s.Y36(be.eN), s.Y36(re.mI))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["app-username-onboarding"]],
                decls: 11,
                vars: 5,
                consts: [[1, "title"], [1, "onboarding"], ["type", "search", "name", "usernameControl", "maxlength", "15", 1, "form__textInput", 3, "formControl"], [1, "form__inputHint"], ["class", "form__inputHint__text", 4, "ngIf"], ["size", "large", "text", "Submit", 1, "form__submitButton", 3, "disabled", "click"], [1, "form__inputHint__text"]],
                template: function (l, M) {
                    1 & l && (s.TgZ(0, "header", 0), s._uU(1, " Unique Username Onboarding "), s.qZA(), s.TgZ(2, "section", 1), s._uU(3, " Onboarding section for inputting username. Please enter a unique username "), s._UZ(4, "input", 2), s.TgZ(5, "div", 3), s.YNc(6, ps, 2, 0, "div", 4), s.YNc(7, os, 2, 0, "div", 4), s.qZA(), s.TgZ(8, "gu-primary-hex-button", 5), s.NdJ("click", function () {
                        return M.submit()
                    }), s.qZA(), s.TgZ(9, "div", 3), s.YNc(10, Ts, 2, 1, "div", 4), s.qZA(), s.qZA()), 2 & l && (s.xp6(4), s.Q6J("formControl", M.usernameControl), s.xp6(2), s.Q6J("ngIf", M.usernameControl.hasError("required") && M.usernameControl.touched), s.xp6(1), s.Q6J("ngIf", M.usernameControl.hasError("minlength") && M.usernameControl.touched), s.xp6(1), s.Q6J("disabled", !M.usernameControl.valid || M.usernameError), s.xp6(2), s.Q6J("ngIf", M.usernameError))
                },
                directives: [B.Fj, B.nD, B.JJ, B.oH, I.O5],
                styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.form__inputHint__text[_ngcontent-%COMP%], .form__textInput[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.form__inputHint__text[_ngcontent-%COMP%], .form__textInput[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.form__textInput[_ngcontent-%COMP%]{line-height:1.4}[_nghost-%COMP%]{min-width:calc(var(--vw) * 15.62);border:1px solid white;z-index:21;overflow:auto;background-color:#060b11b3;border-radius:calc(var(--vh) * .4);display:flex;flex-direction:column}.title[_ngcontent-%COMP%]{padding:calc(var(--vh) * 1.85);border-bottom:1px solid white;font-size:x-large;text-align:center}.onboarding[_ngcontent-%COMP%]{padding:calc(var(--vh) * 1.85);text-align:center}.form__textInput[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);text-align:center;margin:0 auto;margin-top:calc(var(--vh) * 5);width:calc(var(--vw) * 25);background:#182531;color:#fff;border:1px solid #0f1b27;border-radius:calc(var(--vh) * .4)}.form__textInput[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.form__inputHint[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1);min-height:15px}.form__inputHint__text[_ngcontent-%COMP%]{text-shadow:0 1px 1px rgba(0,0,0,.3)}.form__submitButton[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 4.44);width:calc(var(--vw) * 25);margin-left:auto;margin-right:auto}"]
            }), b
        })();

        function Ms(b, L) {
            1 & b && (s.TgZ(0, "div", 13), s._uU(1, "Email address is required"), s.qZA())
        }

        function Vs(b, L) {
            1 & b && (s.TgZ(0, "div", 13), s._uU(1, " Enter valid email address "), s.qZA())
        }

        function Ks(b, L) {
            1 & b && (s.TgZ(0, "div", 13), s._uU(1, " Password is required "), s.qZA())
        }

        function vn(b, L) {
            if (1 & b && (s.TgZ(0, "div", 14), s._uU(1), s.qZA()), 2 & b) {
                const l = s.oxw();
                s.xp6(1), s.Oqu(l.loginError)
            }
        }

        function Jt(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " Email address is required "), s.qZA())
        }

        function As(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " Enter valid email address "), s.qZA())
        }

        function Ys(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " This email is already in use. "), s.qZA())
        }

        function Qs(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " User name is required "), s.qZA())
        }

        function gs(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " User name cannot be the same as email "), s.qZA())
        }

        function Xt(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " Password is required "), s.qZA())
        }

        function Js(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " Passwords must be at least 8 characters long "), s.qZA())
        }

        function Is(b, L) {
            1 & b && (s.TgZ(0, "div", 16), s._uU(1, " Passwords don't match "), s.qZA())
        }

        function Ds(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "form", 4), s.NdJ("ngSubmit", function () {
                    return s.CHM(l), s.oxw().register()
                }), s.TgZ(1, "input", 5), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().playClickTinyV1()
                }), s.qZA(), s.YNc(2, Jt, 2, 0, "div", 6), s.YNc(3, As, 2, 0, "div", 6), s.YNc(4, Ys, 2, 0, "div", 6), s.TgZ(5, "input", 7), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().playClickTinyV1()
                }), s.qZA(), s.YNc(6, Qs, 2, 0, "div", 6), s.YNc(7, gs, 2, 0, "div", 6), s.TgZ(8, "input", 8), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().playClickTinyV1()
                }), s.qZA(), s.YNc(9, Xt, 2, 0, "div", 6), s.YNc(10, Js, 2, 0, "div", 6), s.TgZ(11, "input", 9), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().playClickTinyV1()
                }), s.qZA(), s.YNc(12, Is, 2, 0, "div", 6), s.TgZ(13, "gu-vertical-space", 10), s.TgZ(14, "gu-checkbox-input", 11), s.NdJ("onCheck", function (U) {
                    return s.CHM(l), s.oxw().onAcceptTermsCheck(U)
                }), s.qZA(), s.qZA(), s.TgZ(15, "gu-checkbox-input", 12), s.NdJ("onCheck", function (U) {
                    return s.CHM(l), s.oxw().onSubscribeCheck(U)
                }), s.qZA(), s.TgZ(16, "gu-primary-hex-button", 13), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().register()
                }), s.qZA(), s.TgZ(17, "label", 14), s._uU(18, "Already have an account? "), s.TgZ(19, "a", 15), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().playClickTinyV1()
                }), s._uU(20, " Login Now. "), s.qZA(), s.qZA(), s.qZA()
            }
            if (2 & b) {
                const l = s.oxw();
                s.Q6J("formGroup", l.formGroup), s.xp6(2), s.Q6J("ngIf", l.email.hasError("required") && l.email.touched), s.xp6(1), s.Q6J("ngIf", l.email.hasError("email") && l.email.touched && (null == l.email.value ? null : l.email.value.length) > 0), s.xp6(1), s.Q6J("ngIf", l.emailError), s.xp6(2), s.Q6J("ngIf", l.userName.hasError("required") && l.userName.touched), s.xp6(1), s.Q6J("ngIf", l.userName.hasError("mismatch") && l.userName.touched), s.xp6(2), s.Q6J("ngIf", l.password.hasError("required") && l.password.touched), s.xp6(1), s.Q6J("ngIf", l.password.hasError("minlength") && l.password.touched), s.xp6(2), s.Q6J("ngIf", (l.passwordConfirm.hasError("required") || l.passwordConfirm.hasError("mismatch")) && l.passwordConfirm.touched), s.xp6(4), s.Q6J("loading", l.loading)("text", l.loading ? "Signing Up" : "Sign Up"), s.uIk("disabled", !l.formGroup.valid)
            }
        }

        function Xs(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "div", 17), s.TgZ(1, "div", 18), s.TgZ(2, "div"), s._uU(3, " We've sent an email to "), s.TgZ(4, "span"), s._uU(5), s.qZA(), s._uU(6, " - please follow the link in that email to confirm your account in a browser and then come back to login. "), s.qZA(), s._UZ(7, "gu-primary-hex-button", 19), s.TgZ(8, "div"), s._uU(9, " Still waiting? Try sending again or starting from scratch. "), s.qZA(), s.TgZ(10, "gu-primary-hex-button", 20), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().register(!0)
                }), s.qZA(), s.TgZ(11, "gu-primary-hex-button", 21), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().resetRegister()
                }), s.qZA(), s.qZA(), s.qZA()
            }
            if (2 & b) {
                const l = s.oxw();
                s.xp6(5), s.Oqu(l.email.value)
            }
        }

        function qs(b, L) {
            1 & b && (s.TgZ(0, "div", 9), s._uU(1, " Enter valid email address "), s.qZA())
        }

        function Ls(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "form", 4), s.NdJ("submit", function () {
                    return s.CHM(l), s.oxw().reset()
                }), s.TgZ(1, "input", 5), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().playClickTinyV1()
                }), s.qZA(), s.YNc(2, qs, 2, 0, "div", 6), s.TgZ(3, "gu-primary-hex-button", 7), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().reset()
                }), s.qZA(), s.TgZ(4, "a", 8), s._uU(5, " Back to login "), s.qZA(), s.qZA()
            }
            if (2 & b) {
                const l = s.oxw();
                s.Q6J("formGroup", l.formGroup), s.xp6(2), s.Q6J("ngIf", l.email.errors && l.email.touched), s.xp6(1), s.Q6J("text", l.loading ? "Resetting" : "Reset Password")
            }
        }

        function Us(b, L) {
            if (1 & b) {
                const l = s.EpF();
                s.TgZ(0, "div", 10), s.TgZ(1, "div", 11), s._uU(2), s.qZA(), s.TgZ(3, "a", 12), s.NdJ("click", function () {
                    return s.CHM(l), s.oxw().tryAgain()
                }), s._uU(4, " Try Again "), s.qZA(), s.TgZ(5, "a", 8), s._uU(6, " Back to login "), s.qZA(), s.qZA()
            }
            if (2 & b) {
                const l = s.oxw();
                s.xp6(2), s.Oqu(l.info)
            }
        }

        const Fs = [{path: "", redirectTo: "game/gu", pathMatch: "full"}, {
            path: "login", component: (() => {
                class b {
                    constructor(l, M, U, le, ke, ze, He, je, Je, Gt, ye) {
                        this.analyticsService = l, this.authService = M, this.fb = U, this.utils = le, this.router = ke, this.modalService = ze, this.vcr = He, this.storageService = je, this.audioService = Je, this.http = Gt, this.akumaService = ye, this.loading = !1, this.loginVideoSrc = "/assets/videos/login-video.webm"
                    }

                    ngOnInit() {
                        this.buildFormGroup(), this.formGroup.setValue({rememberMe: !0, email: null, password: null})
                    }

                    login() {
                        if (this.formGroup.invalid) return void this.utils.markFormGroupTouched(this.formGroup);
                        if (this.loading) return;
                        const l = {email: this.formGroup.value.email, password: this.formGroup.value.password},
                            M = this.formGroup.value.rememberMe;
                        this.loginError = "", this.loading = !0, this.authService.login(l, M, 1).pipe((0, h.q)(1), (0, Oe.b)(U => {
                            this.logSessionAuthenticated(U), this.storageService.set(["email"], l.email), this.router.navigate(["/"])
                        }), (0, Ie.K)(U => this.handleLoginError(U)), (0, Pe.x)(() => this.loading = !1)).subscribe()
                    }

                    logSessionAuthenticated(l) {
                        "function" == typeof gtag && gtag("event", "authenticated", {event_category: "session"}), this.analyticsService.postEvent(new Ze.Session.Authenticated.Event({})), this.akumaService.postEvent("Flow", "_sessionAuthenticated_succeeded")
                    }

                    handleLoginError(l) {
                        return console.error("Login->login()->authService->login() unsuccessful.", l), this.loginError = l.error.error || "Unable to login.", (0, e.of)([])
                    }

                    get email() {
                        return this.formGroup.get("email")
                    }

                    get password() {
                        return this.formGroup.get("password")
                    }

                    buildFormGroup() {
                        this.formGroup = this.fb.group({
                            email: ["", [B.kI.required, B.kI.email]],
                            password: ["", [B.kI.required]],
                            rememberMe: !0
                        })
                    }

                    hasUniqueUsername$(l) {
                        const M = this.authService.getGameSessionTicket();
                        return this.http.get(`https://test-auth.apollo.gg/account/${l}/user?session=${M}`)
                    }

                    handleNoUniqueUsername() {
                        this.modalService.createModal(Ot, {}, {
                            blurredBackground: !0,
                            canCloseFromInside: !1,
                            canCloseFromOutside: !1,
                            position: W.e1.Center,
                            size: W.Cg.StretchableWorkarea
                        }, this.vcr)
                    }

                    playClickTinyV1() {
                        this.audioService.clickTinyV1.play()
                    }
                }

                return b.\u0275fac = function (l) {
                    return new (l || b)(s.Y36(J.yD), s.Y36(re.mI), s.Y36(B.qu), s.Y36(gt.F), s.Y36(ne.F0), s.Y36(j.Z), s.Y36(s.s_b), s.Y36(re.qy), s.Y36(re.pk), s.Y36(be.eN), s.Y36(J.jt))
                }, b.\u0275cmp = s.Xpm({
                    type: b,
                    selectors: [["cerberus-login"]],
                    decls: 17,
                    vars: 7,
                    consts: [["preload", "", "autoplay", "", "muted", "", "playsinline", "", "loop", "", 1, "loginVideo", 3, "src"], ["videoPlayer", ""], [1, "loginForm", 3, "formGroup", "submit"], [1, "logo_wrapper"], ["src", "/assets/images/gu-logo-large.webp", 1, "large_logo"], ["aria-describedby", "emailErrorLabel", "id", "email", "name", "email", "type", "email", "formControlName", "email", "placeholder", "Email", 1, "loginForm__textInput", 3, "keyup.enter", "click"], ["class", "loginForm__inputHint", 4, "ngIf"], ["aria-describedby", "loginErrorLabel", "name", "username", "id", "password", "type", "password", "formControlName", "password", "placeholder", "Password", 1, "loginForm__textInput", 3, "keyup.enter", "click"], ["class", "loginForm__inputHint", "id", "loginErrorLabel", 4, "ngIf"], ["routerLink", "/reset", 1, "loginForm__forgottenLink"], ["id", "button__SignIn", "size", "large", "text", "SIGN IN", 1, "loginForm__submitButton", 3, "loading", "click"], [1, "creatAccountArea"], ["text", "CREATE ACCOUNT", "kind", "secondary", "routerLink", "/register"], [1, "loginForm__inputHint"], ["id", "loginErrorLabel", 1, "loginForm__inputHint"]],
                    template: function (l, M) {
                        1 & l && (s.TgZ(0, "video", 0, 1), s._uU(2, " Your browser does not support HTML5 video. "), s.qZA(), s.TgZ(3, "form", 2), s.NdJ("submit", function () {
                            return M.login()
                        }), s.TgZ(4, "div", 3), s._UZ(5, "img", 4), s.qZA(), s.TgZ(6, "input", 5), s.NdJ("keyup.enter", function () {
                            return M.login()
                        })("click", function () {
                            return M.playClickTinyV1()
                        }), s.qZA(), s.YNc(7, Ms, 2, 0, "div", 6), s.YNc(8, Vs, 2, 0, "div", 6), s.TgZ(9, "input", 7), s.NdJ("keyup.enter", function () {
                            return M.login()
                        })("click", function () {
                            return M.playClickTinyV1()
                        }), s.qZA(), s.YNc(10, Ks, 2, 0, "div", 6), s.YNc(11, vn, 2, 1, "div", 8), s.TgZ(12, "a", 9), s._uU(13, " Forgotten password? "), s.qZA(), s.TgZ(14, "gu-primary-hex-button", 10), s.NdJ("click", function () {
                            return M.login()
                        }), s.qZA(), s.qZA(), s.TgZ(15, "div", 11), s._UZ(16, "gu-primary-hex-button", 12), s.qZA()), 2 & l && (s.Q6J("src", M.loginVideoSrc, s.LSH), s.xp6(3), s.Q6J("formGroup", M.formGroup), s.xp6(4), s.Q6J("ngIf", M.email.hasError("required") && M.email.touched), s.xp6(1), s.Q6J("ngIf", M.email.hasError("email") && M.email.touched && (null == M.email.value ? null : M.email.value.length) > 0), s.xp6(2), s.Q6J("ngIf", M.password.hasError("required") && M.password.touched), s.xp6(1), s.Q6J("ngIf", M.loginError), s.xp6(3), s.Q6J("loading", M.loading))
                    },
                    directives: [B._Y, B.JL, B.sg, B.Fj, B.JJ, B.u, I.O5, ne.yS, ne.rH],
                    styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.loginForm__forgottenLink[_ngcontent-%COMP%], .loginForm__inputHint[_ngcontent-%COMP%], .creatAccountArea__text[_ngcontent-%COMP%], .loginForm__textInput[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.loginForm__forgottenLink[_ngcontent-%COMP%], .loginForm__inputHint[_ngcontent-%COMP%], .creatAccountArea__text[_ngcontent-%COMP%], .loginForm__textInput[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.creatAccountArea__text[_ngcontent-%COMP%], .loginForm__textInput[_ngcontent-%COMP%]{line-height:1.4}@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;align-items:center;background:#182531;height:100%;position:relative}.logo_wrapper[_ngcontent-%COMP%]{width:100%;text-align:center}.large_logo[_ngcontent-%COMP%]{width:70%}.loginVideo[_ngcontent-%COMP%]{position:absolute;height:100%;width:100%;top:0;left:0;object-fit:cover;object-position:0 0;opacity:1}.loginForm[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 17.7);width:calc(var(--vw) * 17.7);position:relative;display:flex;flex-flow:column nowrap}.loginForm__textInput[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4)}.loginForm__textInput[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.loginForm__inputHint[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .6);text-shadow:0 1px 1px rgba(0,0,0,.3)}.loginForm__forgottenLink[_ngcontent-%COMP%]{text-align:right;color:#f6f6f6;text-shadow:0 1px 1px rgba(0,0,0,.3);margin-top:4px;margin-bottom:8px}.loginForm__submitButton[_ngcontent-%COMP%]{margin-left:auto;margin-right:auto;padding:0 50px;min-width:216px}.creatAccountArea[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 10.9);width:calc(var(--vw) * 17.7);position:relative;display:flex;flex-flow:column nowrap;align-items:center}.creatAccountArea__text[_ngcontent-%COMP%]{text-align:center;font-weight:600;color:#f6f6f6}.notify_users[_ngcontent-%COMP%]{margin-top:20px;color:#f6f6f6;z-index:1;width:600px;text-align:center;background-color:#0f1b27;padding:20px;border-radius:5px;line-height:1.5}"]
                }), b
            })()
        }, {
            path: "register", component: (() => {
                class b {
                    constructor(l, M, U, le, ke, ze) {
                        this.analyticsService = l, this.auth = M, this.fb = U, this.utils = le, this.storageService = ke, this.audioService = ze, this.termsError = !1, this.emailError = !1, this.finished = !1, this.loading = !1, this.videoSrc = "/assets/videos/login-video.webm", this.unsubscribe = new r.xQ
                    }

                    ngOnInit() {
                        this.buildFormGroup(), this.logRegistrationStarted(), this.email.valueChanges.pipe((0, rt.R)(this.unsubscribe)).subscribe(() => this.emailError = !1)
                    }

                    ngOnDestroy() {
                        this.passwordChangeSubscription && this.passwordChangeSubscription.unsubscribe(), this.passwordChangeSubscription = null, this.emailChangeSubscription && this.emailChangeSubscription.unsubscribe(), this.emailChangeSubscription = null, this.unsubscribe.next(), this.unsubscribe.complete()
                    }

                    logRegistrationStarted() {
                        "function" == typeof fbq && fbq("track", "Lead"), "function" == typeof gtag && gtag("event", "generate_lead"), this.analyticsService.postEvent(new Ze.Registration.Started.Event({}))
                    }

                    logAccountCreated(l) {
                        this.storageService.set(["user_id"], l.id), this.analyticsService.postEvent(new Ze.Account.Created.Event({
                            email: l.email,
                            is_referred: !1,
                            subscribed: l.subscribe,
                            username: l.username,
                            user_id: l.id
                        })), this.storageService.delete(["user_id"]), "function" == typeof fbq && fbq("track", "CompleteRegistration"), "function" == typeof gtag && gtag("event", "sign_up")
                    }

                    onSubscribeCheck(l) {
                        this.subscribe.setValue(l.detail.checked)
                    }

                    onAcceptTermsCheck(l) {
                        this.agreeToTerms.setValue(l.detail.checked)
                    }

                    register(l) {
                        const M = {
                            email: this.email.value,
                            username: this.userName.value,
                            password: this.password.value,
                            subscribe: this.subscribe.value
                        }, U = Object.assign({}, M);
                        delete U.password;
                        for (const le in U) U.hasOwnProperty(le) && this.storageService.set([le], `${U[le]}`);
                        if (this.formGroup.invalid) this.utils.markFormGroupTouched(this.formGroup); else if (!this.loading) {
                            if (this.termsError = !1, this.emailError = !1, !this.agreeToTerms.value) return void (this.termsError = !0);
                            this.loading = !0, this.auth.register(M).pipe((0, h.q)(1), (0, Oe.b)(le => {
                                this.finished = !0, l || this.logAccountCreated(Object.assign({id: le}, U))
                            }), (0, Ie.K)(le => (console.error("Register->register()->authService.register() registration unsuccessfull.", le), this.emailError = !0, (0, e.of)([]))), (0, Pe.x)(() => this.loading = !1)).subscribe()
                        }
                    }

                    resetRegister() {
                        this.formGroup.reset(), this.finished = !1
                    }

                    passwordMatchValidator(l) {
                        if (!l.parent) return null;
                        const M = l.parent.get("password");
                        return this.passwordChangeSubscription || (this.passwordChangeSubscription = M.valueChanges.pipe((0, rt.R)(this.unsubscribe)).subscribe(() => {
                            l.updateValueAndValidity()
                        })), M.value !== l.value ? {mismatch: !0} : null
                    }

                    usernameMatchEmailValidator(l) {
                        if (!l.parent) return null;
                        const M = l.parent.get("email");
                        return this.emailChangeSubscription || (this.emailChangeSubscription = M.valueChanges.pipe((0, rt.R)(this.unsubscribe)).subscribe(U => {
                            l.updateValueAndValidity()
                        })), l.value === M.value ? {mismatch: !0} : null
                    }

                    get email() {
                        return this.formGroup.get("email")
                    }

                    get password() {
                        return this.formGroup.get("password")
                    }

                    get passwordConfirm() {
                        return this.formGroup.get("passwordConfirm")
                    }

                    get userName() {
                        return this.formGroup.get("userName")
                    }

                    get agreeToTerms() {
                        return this.formGroup.get("agreeToTerms")
                    }

                    get subscribe() {
                        return this.formGroup.get("subscribe")
                    }

                    buildFormGroup() {
                        this.formGroup = this.fb.group({
                            email: ["", [B.kI.required, B.kI.email]],
                            userName: ["", [B.kI.required, this.usernameMatchEmailValidator.bind(this)]],
                            password: ["", [B.kI.required, B.kI.minLength(8)]],
                            passwordConfirm: ["", [B.kI.required, this.passwordMatchValidator.bind(this)]],
                            subscribe: [!1],
                            agreeToTerms: [!1]
                        })
                    }

                    playClickTinyV1() {
                        this.audioService.clickTinyV1.play()
                    }
                }

                return b.\u0275fac = function (l) {
                    return new (l || b)(s.Y36(J.yD), s.Y36(re.mI), s.Y36(B.qu), s.Y36(gt.F), s.Y36(re.qy), s.Y36(re.pk))
                }, b.\u0275cmp = s.Xpm({
                    type: b,
                    selectors: [["app-register"]],
                    decls: 5,
                    vars: 3,
                    consts: [["preload", "", "autoplay", "", "muted", "", "playsinline", "", "loop", "", 1, "video", 3, "src"], ["videoPlayer", ""], ["class", "form", 3, "formGroup", "ngSubmit", 4, "ngIf"], ["class", "success-info", 4, "ngIf"], [1, "form", 3, "formGroup", "ngSubmit"], ["aria-describedby", "emailErrorLabel", "name", "email", "type", "email", "formControlName", "email", "placeholder", "Email", "autocomplete", "false", 1, "form__textInput", 3, "click"], ["class", "form__inputHint", 4, "ngIf"], ["aria-describedby", "usernameErrorLabel", "name", "username", "type", "text", "formControlName", "userName", "placeholder", "Username", "autocomplete", "false", 1, "form__textInput", 3, "click"], ["name", "password", "type", "password", "formControlName", "password", "placeholder", "Password", 1, "form__textInput", 3, "click"], ["name", "repeat", "type", "password", "formControlName", "passwordConfirm", "placeholder", "Repeat", 1, "form__textInput", 3, "click"], ["both", "medium"], ["labelText", "I agree to the <a href='https://apollo.gg/terms'>Terms and Conditions</a>", 3, "onCheck"], ["labelText", "Sign up for exclusive updates!", 3, "onCheck"], ["size", "large", 1, "form__submitButton", 3, "loading", "text", "click"], [1, "nav_login", "font-weight-bold"], ["routerLink", "/login", 1, "form__backToLogin", 3, "click"], [1, "form__inputHint"], [1, "success-info"], [1, "register-finished", "text-center"], ["size", "normal", "routerLink", "/login", "text", "Login", 1, "form__submitButton"], ["size", "normal", "text", "Resend", 1, "form__submitButton", 3, "click"], ["size", "normal", "text", "Re-Register", 1, "form__submitButton", 3, "click"]],
                    template: function (l, M) {
                        1 & l && (s.TgZ(0, "video", 0, 1), s._uU(2, " Your browser does not support HTML5 video.\n"), s.qZA(), s.YNc(3, Ds, 21, 12, "form", 2), s.YNc(4, Xs, 12, 1, "div", 3)), 2 & l && (s.Q6J("src", M.videoSrc, s.LSH), s.xp6(3), s.Q6J("ngIf", !M.finished), s.xp6(1), s.Q6J("ngIf", M.finished))
                    },
                    directives: [I.O5, B._Y, B.JL, B.sg, B.Fj, B.JJ, B.u, ne.yS, ne.rH],
                    styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.form-check-label[_ngcontent-%COMP%], .nav_login[_ngcontent-%COMP%], .form__backToLogin[_ngcontent-%COMP%], .form__tryAgain[_ngcontent-%COMP%], .form__inputHint[_ngcontent-%COMP%], .form__textInput[_ngcontent-%COMP%], .register-finished[_ngcontent-%COMP%], .success-info[_ngcontent-%COMP%]   .info-label[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.register-finished[_ngcontent-%COMP%], .success-info[_ngcontent-%COMP%]   .info-label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.9)}.form-check-label[_ngcontent-%COMP%], .nav_login[_ngcontent-%COMP%], .form__backToLogin[_ngcontent-%COMP%], .form__tryAgain[_ngcontent-%COMP%], .form__inputHint[_ngcontent-%COMP%], .form__textInput[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.form__textInput[_ngcontent-%COMP%]{line-height:1.4}[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;align-items:center;background:#182531;height:100%}.video[_ngcontent-%COMP%]{position:absolute;height:100%;width:100%;top:0;left:0;object-fit:cover;object-position:0 0;opacity:.65}.form[_ngcontent-%COMP%], .success-info[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 31);width:calc(var(--vw) * 17.7);position:relative;display:flex;flex-flow:column nowrap}.success-info[_ngcontent-%COMP%]{width:calc(var(--vw) * 27.7)}.success-info[_ngcontent-%COMP%]   .info-label[_ngcontent-%COMP%]{text-align:center;margin-top:calc(var(--vh) * 1.48)}.form__textInput[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);background:#182531;color:#fff;border:1px solid #0f1b27;border-radius:calc(var(--vh) * .4)}.form__textInput[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.form__inputHint[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .6);text-shadow:0 1px 1px rgba(0,0,0,.3)}.form__backToLogin[_ngcontent-%COMP%], .form__tryAgain[_ngcontent-%COMP%]{text-align:center;color:#f6f6f6;text-shadow:0 1px 1px rgba(0,0,0,.3);margin-top:calc(var(--vh) * 2);cursor:pointer}.form__submitButton[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 4.44);margin-bottom:calc(var(--vh) * 4.44);margin-left:auto;margin-right:auto;min-width:160px}.form__subscribe-checkbox[_ngcontent-%COMP%], .form__submitButton[_ngcontent-%COMP%], .nav_login[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 3)}"]
                }), b
            })()
        }, {
            path: "reset", component: (() => {
                class b {
                    constructor(l, M, U, le) {
                        this.authService = l, this.fb = M, this.utils = U, this.audioService = le, this.finished = !1, this.loading = !1, this.videoSrc = "/assets/videos/login-video.webm"
                    }

                    ngOnInit() {
                        this.buildFormGroup()
                    }

                    reset() {
                        this.formGroup.invalid ? this.utils.markFormGroupTouched(this.formGroup) : this.loading || (this.loading = !0, this.authService.resetPassword(this.email.value).pipe((0, h.q)(1)).subscribe(l => {
                            this.loading = !1, this.finished = !0, this.info = "Follow the instructions sent to you by email in order to reset your password."
                        }, l => {
                            this.loading = !1, this.finished = !0, console.error(l), this.info = "Error has occurred during sending an email. Try again later."
                        }))
                    }

                    get email() {
                        return this.formGroup.get("email")
                    }

                    buildFormGroup() {
                        this.formGroup = this.fb.group({email: ["", [B.kI.required, B.kI.email]]})
                    }

                    tryAgain() {
                        this.finished = !1, this.formGroup.reset()
                    }

                    playClickTinyV1() {
                        this.audioService.clickTinyV1.play()
                    }
                }

                return b.\u0275fac = function (l) {
                    return new (l || b)(s.Y36(re.mI), s.Y36(B.qu), s.Y36(gt.F), s.Y36(re.pk))
                }, b.\u0275cmp = s.Xpm({
                    type: b,
                    selectors: [["app-reset"]],
                    decls: 5,
                    vars: 3,
                    consts: [["preload", "", "autoplay", "", "muted", "", "playsinline", "", "loop", "", 1, "video", 3, "src"], ["videoPlayer", ""], ["class", "form", 3, "formGroup", "submit", 4, "ngIf"], ["class", "success-info", 4, "ngIf"], [1, "form", 3, "formGroup", "submit"], ["aria-describedby", "emailErrorLabel", "name", "email", "type", "email", "formControlName", "email", "placeholder", "Email", 1, "form__textInput", 3, "click"], ["class", "form__inputHint", 4, "ngIf"], ["size", "large", 1, "form__submitButton", 3, "text", "click"], ["routerLink", "/login", 1, "form__backToLogin"], [1, "form__inputHint"], [1, "success-info"], [1, "info-label"], [1, "form__tryAgain", 3, "click"]],
                    template: function (l, M) {
                        1 & l && (s.TgZ(0, "video", 0, 1), s._uU(2, " Your browser does not support HTML5 video.\n"), s.qZA(), s.YNc(3, Ls, 6, 3, "form", 2), s.YNc(4, Us, 7, 1, "div", 3)), 2 & l && (s.Q6J("src", M.videoSrc, s.LSH), s.xp6(3), s.Q6J("ngIf", !M.finished), s.xp6(1), s.Q6J("ngIf", M.finished))
                    },
                    directives: [I.O5, B._Y, B.JL, B.sg, B.Fj, B.JJ, B.u, ne.yS],
                    styles: ["h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{margin:0}body[_ngcontent-%COMP%], label[_ngcontent-%COMP%], a[_ngcontent-%COMP%], div[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%], p[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif;font-weight:400}h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%]{font-family:Unchained,serif;font-weight:700}.form__backToLogin[_ngcontent-%COMP%], .form__tryAgain[_ngcontent-%COMP%], .form__inputHint[_ngcontent-%COMP%], .form__textInput[_ngcontent-%COMP%], .success-info[_ngcontent-%COMP%]   .info-label[_ngcontent-%COMP%]{font-family:Open Sans,sans-serif}.success-info[_ngcontent-%COMP%]   .info-label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.9)}.form__backToLogin[_ngcontent-%COMP%], .form__tryAgain[_ngcontent-%COMP%], .form__inputHint[_ngcontent-%COMP%], .form__textInput[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}.form__textInput[_ngcontent-%COMP%]{line-height:1.4}[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;align-items:center;background:#182531;height:100%}.video[_ngcontent-%COMP%]{position:absolute;height:100%;width:100%;top:0;left:0;object-fit:cover;object-position:0 0;opacity:.65}.form[_ngcontent-%COMP%], .success-info[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 37.96);width:calc(var(--vw) * 17.7);position:relative;display:flex;flex-flow:column nowrap}.success-info[_ngcontent-%COMP%]{width:calc(var(--vw) * 27.7)}.success-info[_ngcontent-%COMP%]   .info-label[_ngcontent-%COMP%]{text-align:center;margin-top:calc(var(--vh) * 1.48)}.form__textInput[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);background:#182531;color:#fff;border:1px solid #0f1b27;border-radius:calc(var(--vh) * .4)}.form__textInput[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.form__inputHint[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .6);text-shadow:0 1px 1px rgba(0,0,0,.3)}.form__backToLogin[_ngcontent-%COMP%], .form__tryAgain[_ngcontent-%COMP%]{text-align:center;color:#f6f6f6;text-shadow:0 1px 1px rgba(0,0,0,.3);margin-top:calc(var(--vh) * 2);cursor:pointer}.form__submitButton[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 4.44);margin-left:auto;margin-right:auto}"]
                }), b
            })()
        }, {path: "demo-sheet", component: ie.q6}, {
            path: "game",
            component: lt,
            canActivate: [(() => {
                class b {
                    constructor(l) {
                        this.authService = l
                    }

                    canActivate(l, M) {
                        return this.authService.refreshToken().pipe((0, Fe.VS)(U => this.authService.saveAccount(U, !0, 1)), (0, Ie.K)(U => (this.authService.logout(), (0, e.of)(U))))
                    }
                }

                return b.\u0275fac = function (l) {
                    return new (l || b)(s.LFG(re.mI))
                }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac, providedIn: "root"}), b
            })()],
            data: {reuse: !0},
            children: [{path: "gu", loadChildren: () => n.e(26).then(n.bind(n, 94026)).then(b => b.GuModule)}]
        }];
        let Gs = (() => {
            class b {
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275mod = s.oAB({type: b}), b.\u0275inj = s.cJS({
                imports: [[ne.Bz.forRoot(Fs, {
                    useHash: !0,
                    enableTracing: !1
                })], ne.Bz]
            }), b
        })();
        var Zs = n(98009), en = n(47313), Wt = n(41746), tn = n(30567), hs = n(36053), Tt = n(87545), sn = n(43164),
            yn = n(52216), is = n(28510), Cn = n(88632), kt = n(87168), nn = n(33403), xn = n(11130), Sn = n(8561);
        let Pn = (() => {
            class b {
                constructor(l, M, U) {
                    this.cerberusModalService = l, this.activeModal = M, this.akumaService = U
                }

                ngOnInit() {
                    this.akumaService.postScreenEvent("tutorial", "Skip", "", "opened")
                }

                goBack() {
                    this.akumaService.postControlEvent("tutorial", "Skip", "", "return", "Btn", "pressed"), this.activeModal.close("Coinbase CTA closed")
                }

                skipTutorial() {
                    this.akumaService.postControlEvent("tutorial", "Skip", "", "confirm", "Btn", "pressed"), this.cerberusModalService.dismissAll()
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(is.Qz), s.Y36(is.mX), s.Y36(J.jt))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["cerberus-skip-tutorial-modal"]],
                decls: 15,
                vars: 0,
                consts: [[1, "modal__header"], [1, "modal__content"], ["top", "3x-large", "bottom", "medium"], ["align", "center", "size", "x-small", "fillGradient", "gradients.gold.simple"], ["top", "medium", "bottom", "medium"], ["fillColor", "colors.light.800", "kind", "x-small"], [1, "modal__btnsGroup"], [1, "modal__btn", 3, "click"]],
                template: function (l, M) {
                    1 & l && (s._UZ(0, "div", 0), s.TgZ(1, "div", 1), s.TgZ(2, "gu-vertical-space", 2), s.TgZ(3, "gu-heading-text", 3), s._uU(4, " Are you Sure you want to skip the tutorial?"), s.qZA(), s.qZA(), s.TgZ(5, "gu-vertical-space", 4), s.TgZ(6, "gu-paragraph-text", 5), s._uU(7, " You won\u2019t receive your 3 Core Packs. "), s._UZ(8, "br"), s._uU(9, " To unlock this reward at a later time, come back by selecting \u201cTutorial\u201d from the Arena screen. "), s.qZA(), s.qZA(), s.TgZ(10, "div", 6), s.TgZ(11, "gu-primary-hex-button", 7), s.NdJ("click", function () {
                        return M.goBack()
                    }), s._uU(12, " Go Back "), s.qZA(), s.TgZ(13, "gu-primary-hex-button", 7), s.NdJ("click", function () {
                        return M.skipTutorial()
                    }), s._uU(14, " Yes "), s.qZA(), s.qZA(), s.qZA())
                },
                styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;max-width:640px;text-align:center}.modal__header[_ngcontent-%COMP%]{background:linear-gradient(90deg,#c6a052 2.93%,#ebc98b 25.01%,#fff2d8 50.44%,#ebc98b 74.21%,#c6a052 96.95%);box-shadow:0 2px 5px #0000004d;height:3px;width:100%}.modal__content[_ngcontent-%COMP%]{background:linear-gradient(90deg,#0f1b27 1.39%,#0f1b27 12.6%,#1d2f41 50.06%,#0f1b27 87.64%,#0f1b27 98.63%);box-sizing:border-box;border:2px solid #3D5A74;display:flex;flex-direction:column;padding:0 calc(var(--vw) * 1.5);align-items:center}.modal__btnsGroup[_ngcontent-%COMP%]{display:flex;justify-content:space-evenly;padding:20px 0;width:50%}.modal__btn[_ngcontent-%COMP%]{padding:15px;margin:10px}.modal__closeButton[_ngcontent-%COMP%]{position:absolute;top:20px;right:20px;z-index:1;font-size:calc(var(--vh) * 2);color:#8be1e0;cursor:pointer}.modal__closeButton[_ngcontent-%COMP%]:hover{color:#fff}"]
            }), b
        })();
        var wn = n(17268);
        let kn = (() => {
            class b {
                constructor(l, M, U, le, ke, ze, He, je) {
                    this.cerberusModalService = l, this.queueService = M, this.gameService = U, this.guGameService = le, this.playService = ke, this.authService = ze, this.audioService = He, this.akumaService = je
                }

                ngOnInit() {
                    this.akumaService.postScreenEvent("tutorial", "Welcome", "", "opened"), this.akumaService.postFlowEvent("tutorialComplete", "started")
                }

                beginTutorial() {
                    this.audioService.arenaClickStart.play(), this.akumaService.postControlEvent("tutorial", "Welcome", "", "go", "Btn", "pressed");
                    const l = this.authService.getUserId();
                    this.queueService.activeQueues$.pipe((0, h.q)(1)).subscribe(M => {
                        M.forEach(U => this.queueService.cancel(U))
                    }), this.gameService.getBranch$(1).pipe((0, h.q)(1), (0, kt.M)(this.guGameService.getGameMode$(nn.B_.TUTORIAL)), (0, Oe.b)(([M, U]) => {
                        this.playService.play({
                            realm: M.id,
                            mode: nn.B_.TUTORIAL,
                            mission: U.properties.mission,
                            player: {
                                id: l,
                                deck: {id: U.properties.player.deck.id, global: U.properties.player.deck.global},
                                collection: {id: U.properties.player.collection.id}
                            },
                            opponent: {
                                deck: {
                                    id: U.properties.opponent.deck.id,
                                    global: U.properties.opponent.deck.global
                                }, collection: {id: U.properties.opponent.collection.id}
                            }
                        })
                    })).subscribe(M => this.cerberusModalService.dismissAll())
                }

                skipTutorial() {
                    this.akumaService.postControlEvent("tutorial", "Welcome", "", "skip", "Btn", "pressed");
                    this.cerberusModalService.open(Pn, {centered: !0}).result.then(U => {
                    }, U => {
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.Y36(is.Qz), s.Y36(at.g), s.Y36(st.hM), s.Y36(xn.xV), s.Y36(Sn.GT), s.Y36(re.mI), s.Y36(re.pk), s.Y36(J.jt))
            }, b.\u0275cmp = s.Xpm({
                type: b,
                selectors: [["cerberus-tutorial-start-modal"]],
                decls: 48,
                vars: 1,
                consts: [[1, "leftPanel"], ["src", "/gu-assets/images/tutorial/citadel-herald-bg.webp", 1, "leftPanel__image"], [1, "leftPanel__imageShadow"], ["src", "/gu-assets/images/GULogo-white.svg", "alt", "", 1, "leftPanel__logoImage"], [1, "rightPanel"], ["fillGradient", "gradients.gold.simple", "fillGradientTarget", "bottom", "size", "x-small", 1, "rightPanel__title"], ["fillColor", "colors.light.300", 1, "rightPanel__subtitle"], [1, "rightPanel__gameplay"], ["src", "/gu-assets/images/tutorial/gameplay-basics.webp", 1, "rightPanel__gameplay__image"], [1, "rightPanel__gameplay__title"], ["fillColor", "colors.light.300"], [1, "rightPanel__howto"], [1, "rightPanel__howto__mana"], ["src", "/gu-assets/images/tutorial/how-mana-works.webp", 1, "rightPanel__howto__image"], [1, "rightPanel__howto__title"], [1, "rightPanel__howto__win"], ["src", "/gu-assets/images/tutorial/how-to-win.webp", 1, "rightPanel__howto__image"], [1, "rightPanel__freeStuff"], ["src", "/gu-assets/images/tutorial/free-stuff-banner-start.png", 1, "rightPanel__freeStuff__bgImage"], ["src", "/gu-assets/images/tutorial/free-core-pack.png", 1, "rightPanel__freeStuff__cardImage"], ["fillColor", "colors.light.300", 1, "rightPanel__freeStuff__text"], [1, "rightPanel__freeStuff__tooltip", 3, "title"], ["iconLigature", "little_help"], ["size", "medium", "text", "BEGIN", 1, "rightPanel__beginTutorialBtn", 3, "click"], ["fillColor", "colors.apocyan.100", 1, "rightPanel__closeTutorialBtn", 3, "click"]],
                template: function (l, M) {
                    1 & l && (s.TgZ(0, "div", 0), s.TgZ(1, "picture"), s._UZ(2, "img", 1), s.qZA(), s._UZ(3, "div", 2), s.TgZ(4, "picture"), s._UZ(5, "img", 3), s.qZA(), s.qZA(), s.TgZ(6, "div", 4), s.TgZ(7, "gu-heading-text", 5), s._uU(8, " Welcome to the Tutorial "), s.qZA(), s.TgZ(9, "gu-simple-text", 6), s._uU(10, " A swift lesson to help you learn the basics. All great heroes need to start somewhere! "), s.qZA(), s.TgZ(11, "div", 7), s.TgZ(12, "picture"), s._UZ(13, "img", 8), s.qZA(), s.TgZ(14, "div", 9), s.TgZ(15, "gu-simple-text", 10), s.TgZ(16, "strong"), s._uU(17, "GAMEPLAY BASICS"), s.qZA(), s.qZA(), s.qZA(), s.qZA(), s.TgZ(18, "div", 11), s.TgZ(19, "div", 12), s.TgZ(20, "picture"), s._UZ(21, "img", 13), s.qZA(), s.TgZ(22, "div", 14), s.TgZ(23, "gu-simple-text", 10), s.TgZ(24, "strong"), s._uU(25, "HOW MANA WORKS"), s.qZA(), s.qZA(), s.qZA(), s.qZA(), s.TgZ(26, "div", 15), s.TgZ(27, "picture"), s._UZ(28, "img", 16), s.qZA(), s.TgZ(29, "div", 14), s.TgZ(30, "gu-simple-text", 10), s.TgZ(31, "strong"), s._uU(32, "HOW TO WIN"), s.qZA(), s.qZA(), s.qZA(), s.qZA(), s.qZA(), s.TgZ(33, "div", 17), s.TgZ(34, "picture"), s._UZ(35, "img", 18), s.qZA(), s.TgZ(36, "picture"), s._UZ(37, "img", 19), s.qZA(), s.TgZ(38, "gu-simple-text", 20), s._uU(39, " Receive "), s.TgZ(40, "strong"), s._uU(41, "3 Core Packs "), s.qZA(), s.TgZ(42, "app-tooltip", 21), s._UZ(43, "gu-icon", 22), s.qZA(), s._uU(44, " upon completion of the tutorial. "), s.qZA(), s.qZA(), s.TgZ(45, "gu-primary-hex-button", 23), s.NdJ("click", function () {
                        return M.beginTutorial()
                    }), s.qZA(), s.TgZ(46, "gu-simple-text", 24), s.NdJ("click", function () {
                        return M.skipTutorial()
                    }), s._uU(47, " MAYBE LATER "), s.qZA(), s.qZA()), 2 & l && (s.xp6(42), s.Q6J("title", "Core Packs hold <br/> non-blockchain cards that can <br/> be used to expand your decks."))
                },
                directives: [wn.K],
                styles: ["[_nghost-%COMP%]{display:flex;background-color:#0f1b27;border:2px solid #3D5A74;box-sizing:border-box;box-shadow:5px 5px 15px #0006;width:1050px}.rightPanel[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;width:100%}.rightPanel__title[_ngcontent-%COMP%]{margin-top:20px}.rightPanel__subtitle[_ngcontent-%COMP%]{margin:20px;text-align:center}.rightPanel__gameplay[_ngcontent-%COMP%]{margin:0 30px;width:450px}.rightPanel__gameplay__image[_ngcontent-%COMP%]{width:450px;display:block}.rightPanel__gameplay__title[_ngcontent-%COMP%]{background:linear-gradient(to left,#0F1B27 0%,#1D2F41 100%);text-align:center;padding:10px}.rightPanel__howto[_ngcontent-%COMP%]{display:flex;margin-top:10px}.rightPanel__howto__mana[_ngcontent-%COMP%]{margin-right:3px}.rightPanel__howto__win[_ngcontent-%COMP%]{margin-left:3px}.rightPanel__howto__image[_ngcontent-%COMP%]{width:222px;display:block}.rightPanel__howto__title[_ngcontent-%COMP%]{background:linear-gradient(to left,#0F1B27 0%,#1D2F41 100%);text-align:center;padding:10px}.rightPanel__freeStuff[_ngcontent-%COMP%]{position:relative}.rightPanel__freeStuff__bgImage[_ngcontent-%COMP%]{width:510px;display:block;margin-top:35px}.rightPanel__freeStuff__cardImage[_ngcontent-%COMP%]{position:absolute;top:0px;left:15px;height:90px}.rightPanel__freeStuff__text[_ngcontent-%COMP%]{position:absolute;top:45px;left:85px;font-size:15px}.rightPanel__freeStuff__tooltip[_ngcontent-%COMP%]{display:inline;text-align:center}.rightPanel__beginTutorialBtn[_ngcontent-%COMP%]{margin-top:20px;padding:0 40px}.rightPanel__closeTutorialBtn[_ngcontent-%COMP%]{margin-top:20px;font-size:15px;cursor:pointer}.leftPanel[_ngcontent-%COMP%]{position:relative;width:100%}.leftPanel__image[_ngcontent-%COMP%]{max-width:100%;max-height:100%;display:block}.leftPanel__imageShadow[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;top:0px;background:linear-gradient(180deg,rgba(15,27,39,0) 57.61%,rgba(15,27,39,.7) 73.26%,rgba(15,27,39,.9) 100%)}.leftPanel__logoImage[_ngcontent-%COMP%]{width:330px;position:absolute;bottom:60px;left:0;right:0;margin-left:auto;margin-right:auto}"]
            }), b
        })();
        var et = n(14618);
        let On = (() => {
            class b {
                constructor(l, M, U, le, ke, ze, He, je, Je, Gt) {
                    this.actions$ = l, this.ngrxStore = M, this.gameApi = U, this.authService = le, this.guUserService = ke, this.gameService = ze, this.gameDownloadService = He, this.zone = je, this.utils = Je, this.cerberusModalService = Gt, this.GameAssetsDownloadRequest$ = (0, we.GW)(() => this.actions$.pipe((0, we.l4)(et.gK.GAME_ASSETS_DOWNLOAD_REQUEST), (0, Tt.w)(ye => this.gameService.currentGameContext$.pipe((0, We.h)(fe => null != fe), (0, Fe.VS)(fe => (0, Wt.$R)((0, e.of)(fe), this.gameService.getBranch(fe.id))), (0, Fe.VS)(([fe, Ve]) => (0, Wt.$R)((0, e.of)(fe), this.gameDownloadService.getLatestAssetsVersions(fe, Ve), this.gameDownloadService.getLocalAssetsVersions(fe), this.getBasicAuthToken())), (0, h.q)(1))), (0, Tt.w)(([ye, fe, Ve, Ut]) => {
                        const Zt = this.gameService.isObfuscatedBranch(ye.id) ? Ut : void 0,
                            mt = this.gameDownloadService.deltaAssetsVersions(Ve, fe),
                            es = mt.reduce((xs, Ss) => xs + Ss.size, 0), Rt = this.gameService.getAssetsPath(),
                            ls = Array.from({length: mt.length}, () => new m.X(null)),
                            Cs = window.bridge.downloadAssetsWithSempahore(mt, Rt, ls, Zt, 5).map(xs => xs.pipe(this.utils.enterZone(this.zone)));
                        return (0, e.of)({
                            downloadAssets: Cs,
                            assetsProgresses: ls,
                            totalBytes: es,
                            game: ye,
                            remoteAssets: fe
                        })
                    }), (0, Tt.w)(ye => (0, Wt.$R)((0, tn.D)(ye.downloadAssets).pipe((0, Me.U)(fe => ({
                        downloads: fe,
                        game: ye.game,
                        remoteAssets: ye.remoteAssets
                    }))), (0, hs.aj)(ye.assetsProgresses).pipe((0, sn.p)(1e3), (0, Oe.b)(fe => {
                        const Ve = fe.reduce((Zt, mt) => mt ? Zt + mt.bytesCompleted : Zt + 0, 0),
                            Ut = Math.round(100 * Ve / ye.totalBytes);
                        this.ngrxStore.dispatch(new et.X4({percentage: Ut, status: "downloading"}))
                    })))), (0, Tt.w)(([ye, fe]) => (this.gameService.deleteProperty(ye.game.id, "assets"), this.gameService.setProperty(ye.game.id, "assets", JSON.stringify(ye.remoteAssets)), this.gameService.refreshGameContext(), this.gameDownloadService.displayDownloadCompleteNotification(ye.game), [new et.P6])), (0, Ie.K)((ye, fe) => (console.error(ye), this.ngrxStore.dispatch(new et.wT({error: ye})), fe)))), this.GameAssetsDownloadSuccess$ = (0, we.GW)(() => this.actions$.pipe((0, we.l4)(et.gK.GAME_ASSETS_DOWNLOAD_SUCCESS), (0, Tt.w)(ye => {
                        const fe = this.authService.getUserId();
                        return this.gameService.getUserTutorialMissions(fe).pipe((0, h.q)(1))
                    }), (0, Tt.w)(ye => (ye[0].completed || this.showTutorialModal(), [new et.Lg({
                        status: "idle",
                        percentage: 100
                    })])), (0, Ie.K)((ye, fe) => (console.error(ye), fe)))), this.GameBuildDownloadExtractRequest$ = (0, we.GW)(() => this.actions$.pipe((0, we.l4)(et.gK.GAME_BUILD_DOWNLOAD_EXTRACT), (0, Me.U)(ye => ye.payload), (0, Tt.w)(ye => this.gameService.getBranch(ye.game.id).pipe((0, Me.U)(fe => ({
                        branch: fe,
                        action: ye
                    })))), (0, Tt.w)(({
                                          branch: ye,
                                          action: fe
                                      }) => this.gameDownloadService.extractGame(fe.game, fe.fileName, fe.installPath).pipe((0, Me.U)(Ve => ({
                        result: Ve,
                        branch: ye,
                        action: fe
                    })))), (0, Tt.w)(({action: fe}) => (this.gameService.setProperty(fe.game.id, "status", "extracted"), this.gameService.refreshGameContext(), fe.localVersion && this.gameDownloadService.deleteFile(this.gameDownloadService.getFileName(fe.game, fe.localVersion), this.gameService.getInstallPath(fe.game)), this.gameDownloadService.displayDownloadCompleteNotification(fe.game), [new et.Ry])), (0, Ie.K)((ye, fe) => (console.error(ye), this.ngrxStore.dispatch(new et.c7({error: ye})), fe)))), this.GameBuildDownloadRequest$ = (0, we.GW)(() => this.actions$.pipe((0, we.l4)(et.gK.GAME_BUILD_DOWNLOAD_REQUEST), (0, Tt.w)(ye => this.gameService.currentGameContext$.pipe((0, We.h)(fe => null != fe), (0, Fe.VS)(fe => (0, Wt.$R)((0, e.of)(fe), this.gameService.getBranch(fe.id))), (0, Fe.VS)(([fe, Ve]) => (0, Wt.$R)((0, e.of)(fe), this.gameDownloadService.getVersions(fe, Ve), this.getBasicAuthToken())), (0, h.q)(1))), (0, Tt.w)(([ye, [fe, Ve], Ut]) => {
                        const Zt = this.gameService.getInstallPath(ye),
                            mt = this.gameDownloadService.getDownloadInfo(ye, fe, Ut),
                            es = this.gameService.isObfuscatedBranch(ye.id) ? Ut : void 0;
                        return (0, hs.aj)([window.bridge.download(mt.url, Zt, this.getFileName(ye, fe), es).pipe(this.utils.enterZone(this.zone), (0, Me.U)(Rt => ({
                            game: ye,
                            fileName: this.getFileName(ye, fe),
                            installPath: Zt,
                            remoteVersion: fe,
                            localVersion: Ve
                        }))), window.bridge.progress.pipe(this.utils.enterZone(this.zone), (0, sn.p)(1e3), (0, yn.V)(12e4), (0, Me.U)(Rt => (this.ngrxStore.dispatch(new et.dY({
                            percentage: this.getPercentage(Rt),
                            status: "downloading"
                        })), Rt)))])
                    }), (0, Fe.zg)(([ye, fe]) => (this.gameService.setProperty(ye.game.id, "version", ye.remoteVersion), this.gameService.setProperty(ye.game.id, "status", "downloaded"), [new et.yn({
                        game: ye.game,
                        fileName: ye.fileName,
                        installPath: ye.installPath,
                        localVersion: ye.localVersion
                    })])), (0, Ie.K)((ye, fe) => (console.error(ye), this.ngrxStore.dispatch(new et.c7({error: ye})), fe))))
                }

                getBasicAuthToken() {
                    const l = this.authService.getUserId(), M = this.authService.getGameSessionTicket();
                    return this.gameApi.get(`/user/${l}/build?session=${M}`).pipe((0, Me.U)(U => U.basic_auth))
                }

                getPercentage(l) {
                    return l ? Math.round(100 * l.bytesCompleted / l.bytesTotal) : 0
                }

                getFileName(l, M) {
                    return "win32" === window.bridge.platform() ? "gods_" + M + l.extensions.windows : "gods_" + M + l.extensions.osx
                }

                showTutorialModal() {
                    this.cerberusModalService.open(kn).result.then(U => {
                    }, U => {
                    })
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.LFG(we.eX), s.LFG(V.yh), s.LFG(J.Ft), s.LFG(re.mI), s.LFG(Cn.MZ), s.LFG(st.hM), s.LFG(Yt.b5), s.LFG(s.R0b), s.LFG(gt.F), s.LFG(is.Qz))
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac}), b
        })();
        const rn = {
            gameBuild: {isUpdateRequired: !1, percentage: 0, status: "idle"},
            gameAssets: {isUpdateRequired: !1, percentage: 0, status: "idle"}
        };

        function an(b, L) {
            switch (L.type) {
                case et.gK.GAME_BUILD_DOWNLOAD_CHECK:
                    return Object.assign(Object.assign({}, b), {gameBuild: Object.assign(Object.assign({}, b.gameBuild), {isUpdateRequired: L.payload.isUpdateRequired})});
                case et.gK.GAME_BUILD_DOWNLOAD_PROGRESS:
                    return Object.assign(Object.assign({}, b), {
                        gameBuild: Object.assign(Object.assign({}, b.gameBuild), {
                            percentage: L.payload.percentage,
                            status: L.payload.status
                        })
                    });
                case et.gK.GAME_BUILD_DOWNLOAD_SUCCESS:
                    return Object.assign(Object.assign({}, b), {
                        gameBuild: Object.assign(Object.assign({}, b.gameBuild), {
                            isUpdateRequired: !1,
                            status: "completed",
                            percentage: 100
                        })
                    });
                case et.gK.GAME_BUILD_DOWNLOAD_UPDATE_STATUS:
                    return Object.assign(Object.assign({}, b), {
                        gameBuild: Object.assign(Object.assign({}, b.gameBuild), {
                            isUpdateRequired: b.gameBuild.isUpdateRequired,
                            status: L.payload.status,
                            percentage: b.gameBuild.percentage
                        })
                    });
                case et.gK.GAME_BUILD_DOWNLOAD_ERROR:
                    return Object.assign(Object.assign({}, b), {
                        gameBuild: Object.assign(Object.assign({}, b.gameBuild), {
                            isUpdateRequired: b.gameBuild.isUpdateRequired,
                            status: "error",
                            percentage: b.gameBuild.percentage
                        })
                    });
                case et.gK.GAME_ASSETS_DOWNLOAD_CHECK:
                    return Object.assign(Object.assign({}, b), {gameAssets: Object.assign(Object.assign({}, b.gameAssets), {isUpdateRequired: L.payload.isUpdateRequired})});
                case et.gK.GAME_ASSETS_DOWNLOAD_PROGRESS:
                    return Object.assign(Object.assign({}, b), {
                        gameAssets: Object.assign(Object.assign({}, b.gameAssets), {
                            percentage: L.payload.percentage,
                            status: L.payload.status
                        })
                    });
                case et.gK.GAME_ASSETS_DOWNLOAD_SUCCESS:
                    return Object.assign(Object.assign({}, b), {
                        gameAssets: Object.assign(Object.assign({}, b.gameAssets), {
                            isUpdateRequired: !1,
                            status: "completed",
                            percentage: 100
                        })
                    });
                case et.gK.GAME_ASSETS_DOWNLOAD_UPDATE_STATUS:
                    return Object.assign(Object.assign({}, b), {
                        gameAssets: Object.assign(Object.assign({}, b.gameAssets), {
                            isUpdateRequired: b.gameAssets.isUpdateRequired,
                            status: L.payload.status,
                            percentage: L.payload.percentage
                        })
                    });
                case et.gK.GAME_ASSETS_DOWNLOAD_ERROR:
                    return Object.assign(Object.assign({}, b), {
                        gameAssets: Object.assign(Object.assign({}, b.gameAssets), {
                            isUpdateRequired: b.gameAssets.isUpdateRequired,
                            status: "error",
                            percentage: b.gameAssets.percentage
                        })
                    });
                default:
                    return b
            }
        }

        let Ns = (() => {
            class b {
                constructor() {
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac}), b
        })();
        var ms = n(56302);
        const ln = {wallet: null, user: null};
        (0, V.ZF)("account");
        var Lt = (() => {
            return (b = Lt || (Lt = {})).INIT_WALLET = "[App] Initialize Wallet", b.INIT_METAMASK = "[App] Initialize MetaMask", b.UPDATE_STORE = "[App] Update Store", b.UPDATE_MARKETPRICE_ETH = "[App] Update Market Price of Ether", Lt;
            var b
        })();
        const Dn = {
            app: function (b, L) {
                switch (L.type) {
                    case Lt.INIT_WALLET:
                    case Lt.INIT_METAMASK:
                        return Object.assign({}, b);
                    default:
                        return b
                }
            }, router: N.mg, account: function (b = ln, L) {
                switch (L.type) {
                    case ms.X8.FETCH_USER_ACCOUNT_SUCCESS:
                        return Object.assign(Object.assign({}, b), {user: L.payload.accountData});
                    case ms.X8.FETCH_USER_WALLET_SUCCESS:
                        return Object.assign(Object.assign({}, b), {wallet: L.payload.walletData});
                    case ms.X8.UPDATE_USER_ETH_BALANCE:
                        return Object.assign(Object.assign({}, b), {wallet: Object.assign(Object.assign({}, b.wallet), {ethBalance: L.payload.balance})});
                    default:
                        return b
                }
            }
        }, _s = [], bs = "reCaptchaOnloadCallback";
        let pn = (() => {
            class b {
                constructor(l) {
                    this.http = l, this.$loaded = new m.X(!1), this.registerOnloadCallback(), this.load()
                }

                registerOnloadCallback() {
                    window[bs] = () => {
                        const l = "g-recpatcha";
                        this.addWidget(l), this.renderWidget(l), this.$loaded.next(!0)
                    }
                }

                addWidget(l) {
                    const M = document.createElement("div");
                    M.id = l, M.style.visibility = "hidden", document.body.appendChild(M)
                }

                renderWidget(l) {
                    this.grecaptcha().render(l, {sitekey: xe.N.recaptchaPublicSiteKeyV3, size: "invisible"})
                }

                load() {
                    return this.$loaded.getValue() || this.addScriptTag(), this.$loaded.asObservable()
                }

                addScriptTag() {
                    const l = document.body, M = this.createScriptTag();
                    l.appendChild(M)
                }

                createScriptTag() {
                    const l = document.createElement("script");
                    return l.innerHTML = "", l.src = this.getScriptSrc(), l.async = !0, l.defer = !0, l
                }

                getScriptSrc() {
                    let l = "https://www.recaptcha.net/recaptcha/api.js";
                    return l += "?onload=" + bs, l += "&render=" + xe.N.recaptchaPublicSiteKeyV3, l
                }

                execute(l) {
                    return (0, g.D)(this.grecaptcha().execute({action: l}))
                }

                grecaptcha() {
                    return window.grecaptcha
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.LFG(be.eN))
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac, providedIn: "root"}), b
        })(), vt = (() => {
            class b {
                constructor() {
                    this.dataStore = {headerOptions: []}, this._headerOptions$ = new m.X([])
                }

                get headerOptions$() {
                    return this._headerOptions$.asObservable()
                }

                _emit() {
                    this._headerOptions$.next(Object.assign({}, this.dataStore).headerOptions)
                }

                update(l) {
                    this.dataStore.headerOptions = l, this._emit()
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac, providedIn: "root"}), b
        })();
        var vs = n(24058), as = n(61737), ys = n(77604);
        let gn = (() => {
            class b {
                constructor(l) {
                    this.auth = l, this.isRefreshingToken = !1, this.tokenSubject = new m.X(null)
                }

                addToken(l, M) {
                    return l.clone({setHeaders: {Authorization: "Bearer " + M}})
                }

                intercept(l, M) {
                    const U = this.auth.getAuthToken();
                    return M.handle(this.addToken(l, U ? U.access : null)).pipe((0, Ie.K)(ke => {
                        if (ke instanceof be.UA) switch (ke.status) {
                            case 400:
                                return this.badRequest(ke);
                            case 401:
                                if (-1 == l.url.indexOf("login")) {
                                    if (-1 == l.url.indexOf("refresh")) return this.unauthorized(l, M);
                                    this.auth.logout()
                                }
                        }
                        return (0, as._)(ke)
                    }))
                }

                badRequest(l) {
                    return l && 400 === l.status && l.error && "invalid_grant" === l.error.error ? (this.auth.logout(), null) : (0, as._)(l)
                }

                unauthorized(l, M) {
                    return this.isRefreshingToken ? this.tokenSubject.pipe((0, We.h)(U => null != U), (0, h.q)(1), (0, Fe.VS)(U => M.handle(this.addToken(l, U)))) : (this.isRefreshingToken = !0, this.tokenSubject.next(null), this.auth.refreshToken().pipe((0, Fe.VS)(U => U && U.refresh ? this.auth.saveAccount(U, this.auth.isRemembering, 1).pipe((0, ys.h)(U)) : (this.auth.logout(), (0, e.of)())), (0, Fe.VS)(U => (this.tokenSubject.next(U.access), M.handle(this.addToken(l, U.access)))), (0, Ie.K)(U => (0, as._)("unauthorized")), (0, Pe.x)(() => {
                        this.isRefreshingToken = !1
                    })))
                }
            }

            return b.\u0275fac = function (l) {
                return new (l || b)(s.LFG(re.mI))
            }, b.\u0275prov = s.Yz7({token: b, factory: b.\u0275fac}), b
        })();
        var H, S = n(49757);
        let A = [J.LE, {
            provide: s.ip1,
            useFactory: b => () => b.loadConfigurations().toPromise(),
            multi: !0,
            deps: [J.LE]
        }, {provide: be.TP, useClass: gn, multi: !0}, {provide: N.GC, useClass: Le}, {
            provide: re.B3,
            useClass: xe.N.envClasses.featureFlagsService
        }, {provide: re.mI, useClass: xe.N.envClasses.authService}, {
            provide: re.qy,
            useClass: xe.N.envClasses.storageService
        }, {provide: re.ux, useClass: xe.N.envClasses.ethService}, {
            provide: re.LI,
            useClass: xe.N.envClasses.authHostService
        }, {provide: re.eQ, useClass: xe.N.envClasses.assetsService}, {
            provide: re.pk,
            useClass: xe.N.envClasses.audioService
        }, vs.m, ve.x0, gt.F, J.Ho, J.n2, J.dK, Zs.D, vt, Se._, q, pn, J.fY, en.$z];
        (null === (H = xe.N.sentry) || void 0 === H ? void 0 : H.dsn) && (A = [...A, {
            provide: s.qLn,
            useValue: Y.v({showDialog: !1})
        }, {provide: u.aN, deps: [ne.F0]}, {
            provide: s.ip1,
            useFactory: (b, L) => () => L.init(),
            deps: [u.aN, De],
            multi: !0
        }]);
        let K = (() => {
            class b {
            }

            return b.\u0275fac = function (l) {
                return new (l || b)
            }, b.\u0275mod = s.oAB({type: b, bootstrap: [Hs]}), b.\u0275inj = s.cJS({
                providers: A,
                imports: [[B.u5, be.JF, Gs, B.UX, pe.PW, p.b2, S.m.forRoot(), V.Aw.forRoot(Dn, {metaReducers: _s}), N.Qi.forRoot(Ye), xe.N.production ? [] : ae.FT.instrument(), we.sQ.forRoot([Ns]), V.Aw.forFeature("gameResources", an, {initialState: rn}), we.sQ.forFeature([On]), ie.ic, ue.j]]
            }), b
        })();
        var _e;
        if (xe.N.production && (0, s.G48)(), null === (_e = xe.N.sentry) || void 0 === _e ? void 0 : _e.dsn) {
            const {buildNumber: b} = X;
            E.S({
                release: `gu-cerberus@0.13.3+${b}`,
                environment: xe.N.production ? "production" : "staging",
                dsn: xe.N.sentry.dsn,
                integrations: [new x.jK.gE({tracingOrigins: ["localhost"], routingInstrumentation: u.$q})],
                tracesSampleRate: xe.N.sentry.tracesSampleRate || 0
            })
        }
        p.q6().bootstrapModule(K).catch(b => console.error(b))
    }, 12751: (ee, R, n) => {
        "use strict";
        n(10609), window.process = {env: {DEBUG: void 0}}, window.global = window, global.Buffer = n(93172).Buffer, global.process = n(35736)
    }, 73307: (ee, R, n) => {
        "use strict";
        n.d(R, {
            Ho: () => r,
            mI: () => m,
            ux: () => e,
            qy: () => v,
            LI: () => t,
            eQ: () => o,
            pk: () => C,
            Hd: () => f,
            B3: () => P
        });
        var p = n(5e3);
        const r = new p.OlP("environment-settings"), m = new p.OlP("i-auth-service"), e = new p.OlP("i-eth-service"),
            v = (new p.OlP("i-cards-service"), new p.OlP("i-storage-service")),
            t = (new p.OlP("i-modal-service"), new p.OlP("i-auth-host-service")), o = new p.OlP("i-assets-service"),
            C = new p.OlP("i-audio-service"), f = new p.OlP("i-launchdarkly-client"),
            P = new p.OlP("i-feature-flag-service");
        new p.OlP("i-deck-code-service"), new p.OlP("apollo-token")
    }, 51649: (ee, R, n) => {
        "use strict";
        n.d(R, {R: () => t, E: () => o});
        var p = n(39017), r = n(61737), m = n(36053), e = n(72986), g = n(24850), v = n(5e3), i = n(69439);
        const t = new v.OlP("deck-code-service");
        let o = (() => {
            class C {
                constructor(P) {
                    this.cardsService = P
                }

                decodeDeckCode(P) {
                    let w, k, F;
                    try {
                        ({domain: w, formatCode: k, libraryIds: F} = (0, p.Jx)(P))
                    } catch (_) {
                        return (0, r._)(_)
                    }
                    return (0, m.aj)([this.cardsService.protoCards$, this.cardsService.inventory$]).pipe((0, e.q)(1), (0, g.U)(([_, T]) => {
                        const {ownedCards: y, unownedProtos: O} = this.buildFromInventory(_, T, w, F, k);
                        return {ownedCards: y, unownedProtos: O, domain: w, formatCode: k}
                    }))
                }

                validateProtos(P, w, k) {
                    if (w.length > 30) throw new Error("Too many cards in the deck.");
                    if (k.length !== w.length) throw new Error("One or more cards in your deck are not valid.");
                    w.forEach(F => {
                        const _ = P.get(F), T = w.filter(y => y === F).length;
                        if (T > 2 || ("legendary" === _.rarity || "mythic" === _.rarity) && T > 1) throw new Error("There are too many copies of one or more cards in your deck.")
                    })
                }

                buildFromInventory(P, w, k, F, _) {
                    const T = this.getProtos(F, P, k);
                    this.validateProtos(P, T, F);
                    const {ownedCards: y, unownedProtos: O} = this.convertToOwnedUnowned(T, w, P);
                    return {ownedCards: y, unownedProtos: O, domain: k, formatCode: _}
                }

                convertToOwnedUnowned(P, w, k) {
                    const F = [], _ = [];
                    return P.forEach(T => {
                        const y = w[T];
                        if (!y || !y.length) return void _.push(T);
                        const E = [...y].sort((u, x) => u.q - x.q).filter(u => !F.map(x => x.id).includes(u.id));
                        if (E && E.length) {
                            const u = {proto: T, quality: E[0].q, id: E[0].id, protoCard: k.get(T)};
                            F.push(u)
                        } else _.push(T)
                    }), {ownedCards: F, unownedProtos: this.sortProtos(_, k)}
                }

                sortProtos(P, w) {
                    return [...P.map(y => w.get(y))].sort((y, O) => y.name < O.name ? -1 : 1).sort((y, O) => y.mana - O.mana).map(y => y.proto)
                }

                getProtos(P, w, k) {
                    const F = [];
                    return w.forEach((_, T) => {
                        if ("neutral" !== _.god && _.god !== k) return;
                        const y = P.filter(O => O === _.lib_id).length;
                        for (let O = 0; O < y; O++) F.push(T)
                    }), F
                }

                encodeDeck(P, w) {
                    return (0, p.cv)(P, w)
                }
            }

            return C.\u0275fac = function (P) {
                return new (P || C)(v.LFG(i.d))
            }, C.\u0275prov = v.Yz7({token: C, factory: C.\u0275fac, providedIn: "root"}), C
        })()
    }, 57503: (ee, R, n) => {
        "use strict";
        n.d(R, {Rl: () => p.Rl});
        var p = n(39029), r = n(70655), e = (n(61517), n(32830)), g = n(56418), v = n(65171), i = n(80102),
            t = n(26532), o = n(65281);

        class C extends e.oi {
            constructor() {
                super(...arguments), this.closable = !0
            }

            static get styles() {
                return e.iv`
      :host {
        width: 100%;
        display: flex;
        position: fixed;
        background-color: rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.dark[900]))}, 0.8);
      }

      .closeIcon {
        position: absolute;
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
        top: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
        right: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
        cursor: pointer;
        z-index: 1;
      }
    `
            }

            close() {
                this.dispatchEvent(new CustomEvent("onCloseAnnounceBanner", {bubbles: !1}))
            }

            render() {
                return e.dy`
      ${this.closable ? e.dy`<gu-icon
            fillColor="colors.apocyan.300"
            iconLigature="close_x"
            class="closeIcon"
            @click="${this.close}"
            data-test-id="announce-banner-close-icon"
          ></gu-icon>` : ""}

      <slot></slot>
    `
            }
        }

        (0, r.gn)([(0, g.C)({type: Boolean}), (0, r.w6)("design:type", Object)], C.prototype, "closable", void 0), customElements.define("gu-announce-banner-template", C);
        var f = n(47925);
        customElements.define("gu-vertical-space", class extends e.oi {
            constructor() {
                super(...arguments), this.responsiveSize = []
            }

            static get properties() {
                return {
                    top: {type: String},
                    bottom: {type: String},
                    both: {type: String},
                    responsiveSize: {type: Array}
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: block;
        margin-top: var(--marginTop);
        margin-bottom: var(--marginBottom);
      }
    `
            }

            pickMarginValue(c, $) {
                return c ? o.measurements.spacingAmountMapping[c] : $ ? o.measurements.spacingAmountMapping[$] : 0
            }

            generateVariablesAndMediaQueries() {
                const c = this.pickMarginValue(this.both, this.top), $ = this.pickMarginValue(this.both, this.bottom);
                return e.dy`
      <style>

        /* DEFINE BASE SIZING */
        ${(0, t.asCssProp)(`\n          :host {\n            --marginTop: ${c};\n            --marginBottom: ${$};\n          }\n        `)}

        /* DEFINE RESPONSIVE SIZING */
        ${this.responsiveSize.map(({breakpoint: z, topSize: se, bottomSize: Ee, bothSize: Ge}) => {
                    const Xe = this.pickMarginValue(Ge, se), yt = this.pickMarginValue(Ge, Ee);
                    return e.iv`
            @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping[z])}) {
              :host {
                ${(0, t.asCssProp)(Xe ? `--marginTop: ${Xe};` : "")}
                ${(0, t.asCssProp)(yt ? `--marginBottom: ${yt};` : "")}
              }
            }
          `
                })}
      </style>
    `
            }

            render() {
                return e.dy`
      ${this.generateVariablesAndMediaQueries()}
      <slot></slot>
    `
            }
        }), n(11015), customElements.define("gu-outage-banner", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: flex;
        width: 100%;
      }

      .layout {
        display: flex;
        align-items: flex-start;
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(16))};
        width: 100%;
        height: 100vh;
        justify-content: center;
      }

      .layout__text {
        max-width: 600px;
      }
    `
            }

            render() {
                return e.dy`
      <gu-vertical-space class="layout" both="2x-large">
        <gu-paragraph-text class="layout__text" kind="large" align="center" fillColor="colors.light.300">
          Gods Unchained is currently offline while we resolve issues affecting the launcher. Weâ€™ll be back online
          shortly.
        </gu-paragraph-text>
      </gu-vertical-space>
    `
            }
        }), customElements.define("gu-ranked-weekend-cancelled-banner", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: flex;
        width: 100%;
      }

      .layout {
        display: flex;
        align-items: flex-start;
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(16))};
        width: 100%;
        justify-content: center;
      }

      .layout__text {
        max-width: 600px;
      }
    `
            }

            render() {
                return e.dy`
      <gu-vertical-space class="layout" both="2x-large">
        <gu-paragraph-text class="layout__text" kind="large" align="center" fillColor="colors.light.300">
          Due to ongoing issues, Weekend Ranked will not run this weekend. It will resume the following weekend for a
          special double rewards event.
        </gu-paragraph-text>
      </gu-vertical-space>
    `
            }
        }), customElements.define("gu-maintenance-banner", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: flex;
        width: 100%;
      }

      .layout {
        display: flex;
        align-items: flex-start;
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(16))};
        width: 100%;
        justify-content: center;
      }

      .layout__text {
        max-width: 600px;
      }
    `
            }

            render() {
                return e.dy`
      <gu-vertical-space class="layout" both="2x-large">
        <gu-paragraph-text class="layout__text" kind="large" align="center" fillColor="colors.light.300">
          <strong>WEEKEND RANKED IS POSTPONED<strong>
          <br />
          Due to a critical issue, the Weekend Ranked event has been cancelled. Next event will yield double rewards as a result.
        </gu-paragraph-text>
      </gu-vertical-space>
    `
            }
        });
        var T = n(38872), y = n(98539);

        class O extends e.oi {
            constructor() {
                super(...arguments), this.overlay = !1, this.reveal = !1, this.imageLoader = new Image, this.isLoading = !1
            }

            static get styles() {
                return e.iv`
      :host {
        width: 100vw;
        height: 100vh;
        position: fixed;
        z-index: -10;
        background-position: center center;
        background-size: cover;
      }

      .backdrop__image,
      .backdrop__overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        border: none;
      }

      .backdrop__image {
        background-position: center center;
        background-size: cover;
        transition: opacity ease-in-out 0.5s;
      }

      :host(.loading) .backdrop__image {
        opacity: 0;
        transition: none;
      }

      .backdrop__overlay {
        z-index: 1;
        background: linear-gradient(
          0deg,
          rgba(10, 10, 10, 0.9) 0%,
          rgba(10, 10, 10, 0.5) 51.49%,
          rgba(10, 10, 10, 0.25) 77.04%,
          rgba(10, 10, 10, 0.75) 100%
        );
        mix-blend-mode: normal;
        opacity: 0.75;
      }

      .backdrop__overlay--reveal {
        animation: backdropFade 3s forwards;
      }

      @keyframes backdropFade {
        from {
          background-color: rgba(0, 0, 0, 1);
          opacity: 1;
        }
        to {
          background-color: rgba(0, 0, 0, 0);
          opacity: 0.75;
        }
      }
    `
            }

            updated(c) {
                super.updated(c), c.has("image") && this.image && (this.imageLoader.src = `/assets/images/backdrops/${this.image}`, !this.isLoading && (this.isLoading = !0, (0, i.waitForImageToLoad)(this.imageLoader).then(() => {
                    requestAnimationFrame(() => {
                        this.classList.add("loading"), this.style.backgroundImage = this.imageElement.style.backgroundImage, this.imageElement.style.backgroundImage = `url(/assets/images/backdrops/${this.image})`, this.isLoading = !1, requestAnimationFrame(() => this.classList.remove("loading"))
                    })
                })))
            }

            renderBackdrop() {
                return this.image ? e.dy` <div class="backdrop__image" /> ` : e.dy``
            }

            renderOverlay() {
                return this.overlay ? e.dy`
      <div class="${(0, y.$)({backdrop__overlay: !0, "backdrop__overlay--reveal": this.reveal})}"></div>
    ` : e.dy``
            }

            render() {
                return e.dy` ${this.renderBackdrop()} ${this.renderOverlay()} `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], O.prototype, "image", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], O.prototype, "overlay", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], O.prototype, "reveal", void 0), (0, r.gn)([(0, T.I)(".backdrop__image"), (0, r.w6)("design:type", HTMLImageElement)], O.prototype, "imageElement", void 0), customElements.define("gu-backdrop", O);
        var E = n(92436);
        const u = new E.do(G => {
            G.forEach(c => {
                c.target.handleResize()
            })
        });
        customElements.define("gu-background-vimeo-embed", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        width: 100%;
        height: 100%;
        overflow: hidden;
        pointer-events: none;
      }

      /* Make the iframe keep an aspect ratio, and
      position it in the middle of its parent wrapper*/
      iframe {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);

        width: calc(var(--cw) * 100);
        height: calc(var(--cw) * 56.25);
        /* Given a 16:9 aspect ratio, 9/16*100 = 56.25 */
        min-height: calc(var(--ch) * 100);
        min-width: calc(var(--ch) * 177.77);
        /* Given a 16:9 aspect ratio, 16/9*100 = 177.77 */
      }

      :host([cropFromTop='true']) iframe {
        top: 0;
        transform: translate(-50%, 0%);
      }
    `
            }

            static get properties() {
                return {videoId: {type: String}, cropFromTop: {type: String}, quality: {type: String}}
            }

            firstUpdated() {
                u.observe(this), this.handleResize()
            }

            disconnectedCallback() {
                u.unobserve(this)
            }

            handleResize(c) {
                const Ee = .01 * this.offsetHeight;
                this.style.setProperty("--cw", .01 * this.offsetWidth + "px"), this.style.setProperty("--ch", `${Ee}px`)
            }

            qualityParam() {
                return this.quality ? `&quality=${this.quality}` : ""
            }

            render() {
                return e.dy`
      <iframe
        src=${`https://player.vimeo.com/video/${this.videoId}?autoplay=1&loop=1&title=0&byline=0&portrait=0&background=1&muted=1${this.qualityParam()}`}
        frameborder="0"
        allow="autoplay; fullscreen"
      ></iframe>
    `
            }
        });
        var s = n(14879), me = (n(89534), n(51256), n(72650)), ue = n(93270), we = n(40010);
        const be = e.iv`
  ${we.W2}

  /* host element establishes 1px outline */
  :host {
    background: ${(0, t.asCssProp)(o.colors.dark[500])};
    min-width: 180px;
    height: ${(0, t.asCssProp)("48px")};
    line-height: ${(0, t.asCssProp)("48px")};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(17, 17))};
  }

  /* golden border */
  :host::before {
    ${(0, t.inset)(1)}
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(17, 17))};
    z-index: 1;
  }

  /* inner outline */
  :host::after {
    position: absolute;
    content: ' ';
    ${(0, t.inset)(5, 6)}
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(14, 14))};
    z-index: 2;
  }

  /* button content and inner brackground */
  :host .button__content {
    position: absolute;
    ${(0, t.inset)(7, 8)}
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(13, 13))};
    z-index: 3;
  }

  .button__icon,
  .button__text {
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .button__icon {
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(5.5))};
  }

  .button__text {
    line-height: ${(0, t.asCssProp)("48px")};
  }

  /* Default style */

  :host([type='default'])::before {
    background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host([type='default'])::after {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  :host([type='default']) .button__icon,
  :host([type='default']) .button__text {
    background-image: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host([type='default']:hover) .button__content,
  :host([type='default']:active) .button__content {
    background-image: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host([type='default']:hover) .button__text,
  :host([type='default']:hover) .button__icon,
  :host([type='default']:active) .button__text,
  :host([type='default']:active) .button__icon {
    background-image: none;
    background-color: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  /* Inverted style */

  :host([type='inverted'])::before {
    background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host([type='inverted'])::after {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  :host([type='inverted']) .button__content {
    background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host([type='inverted']) .button__text,
  :host([type='inverted']) .button__icon {
    background-image: none;
    background-color: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host([type='inverted']:hover) .button__content,
  :host([type='inverted']:active) .button__content {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host([type='inverted']:hover) .button__text,
  :host([type='inverted']:hover) .button__icon,
  :host([type='inverted']:active) .button__text,
  :host([type='inverted']:active) .button__icon {
    background-image: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  /* Flat silver style */

  :host([type='silver'])::before {
    background: ${(0, t.asCssProp)(o.colors.light[500])};
  }

  :host([type='silver'])::after {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host([type='silver']) .button__text {
    background-color: ${(0, t.asCssProp)(o.colors.light[500])};
  }

  :host([type='silver']:hover) .button__content,
  :host([type='silver']:active) .button__content {
    background-color: ${(0, t.asCssProp)(o.colors.light[500])};
  }

  :host([type='silver']:hover) .button__text,
  :host([type='silver']:active) .button__text {
    background-color: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host([type='silver']:active)::after {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    opacity: 0.2;
  }

  /* Flat gold style */

  :host([type='gold'])::before {
    background: ${(0, t.asCssProp)(o.colors.gold[500])};
  }

  :host([type='gold'])::after {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host([type='gold']) .button__text {
    background-color: ${(0, t.asCssProp)(o.colors.gold[500])};
  }

  :host([type='gold']:hover) .button__content,
  :host([type='gold']:active) .button__content {
    background-color: ${(0, t.asCssProp)(o.colors.gold[500])};
  }

  :host([type='gold']:hover) .button__text,
  :host([type='gold']:active) .button__text {
    background-color: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host([type='gold']:active)::after {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    opacity: 0.2;
  }
`;

        class B extends s.o {
            constructor() {
                super(...arguments), this.type = "default"
            }

            static get styles() {
                return be
            }

            renderText() {
                return e.dy`
      <gu-heading-text class="button__text" size="2x-small">
        <slot></slot>
      </gu-heading-text>
    `
            }
        }

        (0, r.gn)([(0, g.C)({reflect: !0}), (0, r.w6)("design:type", String)], B.prototype, "type", void 0), customElements.define("gu-gilded-hex-button", (0, me.b)((0, ue.Z)(B))), n(43977);

        class re extends e.oi {
            constructor() {
                super(...arguments), this.gap = 16, this.layout = "centered", this.visible = !0, this.layouts = {
                    centered: "center",
                    justified: "space-between"
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        justify-content: var(--layout, center);
        align-items: center;
        gap: var(--gap, 16px);
      }

      ${(0, t.asCssProp)((0, t.fadeReveal)(":host", ":host(.visible)"))}
    `
            }

            render() {
                return this.classList.toggle("visible", this.visible), this.style.setProperty("--gap", `${this.gap}px`), this.style.setProperty("--layout", this.layouts[this.layout]), e.dy`<slot></slot>`
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], re.prototype, "gap", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], re.prototype, "layout", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], re.prototype, "visible", void 0), customElements.define("gu-button-group", re), n(1949);
        var De = n(26711);
        const Y = e.iv`
  :host {
    display: inline-flex;
    position: relative;
    min-width: var(--gu-button-min-width);
    height: var(--gu-button-height);
    line-height: var(--gu-button-height);

    --gu-button-color: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
    --gu-button-border-width: ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
    --gu-button-min-width: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
    --gu-button-height: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
    --gu-button-padding-x: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
    --gu-button-margin: 0px;
    --gu-button-disabled-color: ${(0, t.asCssProp)(o.colors.dark[500])};
    --gu-button-disabled-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.dark[700])};
    --gu-button-disabled-background-color: ${(0, t.asCssProp)(o.colors.dark[700])};
    --gu-button-font-size: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
    --gu-button-font-family: 'Open Sans', sans-serif;
    --gu-button-text-transform: inherit;
    --gu-button-text-shadow: 0px 1px 1px rgba(0, 0, 0, 0.3);
  }

  :host([theme='dark']) {
    --gu-button-primary-background-color: ${(0, t.asCssProp)(o.colors.apocyan[500])};
    --gu-button-primary-background-color-hover: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    --gu-button-primary-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.apocyan[500])};
    --gu-button-primary-border-color-hover: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    --gu-button-primary-color: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-primary-color-hover: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-primary-text-shadow: var(--gu-button-text-shadow);

    --gu-button-secondary-background-color: ${(0, t.asCssProp)(o.colors.dark[900])};
    --gu-button-secondary-background-color-hover: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-border-color-hover: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-color: ${(0, t.asCssProp)(o.colors.light[500])};
    --gu-button-secondary-color-hover: ${(0, t.asCssProp)(o.colors.dark[900])};
    --gu-button-secondary-text-shadow: none;

    --gu-button-subtle-background-color: ${(0, t.asCssProp)(o.colors.dark[700])};
    --gu-button-subtle-background-color-hover: ${(0, t.asCssProp)(o.colors.dark[500])};
    --gu-button-subtle-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.dark[700])};
    --gu-button-subtle-border-color-hover: ${(0, t.asCssProp)(o.colors.dark[500])};
    --gu-button-subtle-color: ${(0, t.asCssProp)(o.colors.light[700])};
    --gu-button-subtle-color-hover: ${(0, t.asCssProp)(o.colors.light[500])};
    --gu-button-subtle-text-shadow: var(--gu-button-text-shadow);

    --gu-button-danger-background-color: ${(0, t.asCssProp)(o.colors.god.war.tertiary)};
    --gu-button-danger-background-color-hover: ${(0, t.asCssProp)(o.colors.god.war.secondary)};
    --gu-button-danger-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.god.war.tertiary)};
    --gu-button-danger-border-color-hover: ${(0, t.asCssProp)(o.colors.god.war.secondary)};
    --gu-button-danger-color: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-danger-color-hover: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-danger-text-shadow: var(--gu-button-text-shadow);
  }

  :host([theme='light']) {
    --gu-button-primary-background-color: ${(0, t.asCssProp)(o.colors.apocyan[500])};
    --gu-button-primary-background-color-hover: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    --gu-button-primary-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.apocyan[500])};
    --gu-button-primary-border-color-hover: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    --gu-button-primary-color: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-primary-color-hover: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-primary-text-shadow: var(--gu-button-text-shadow);

    --gu-button-secondary-background-color: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-secondary-background-color-hover: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-border-color-hover: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-color: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-secondary-color-hover: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-secondary-text-shadow: none;

    --gu-button-subtle-background-color: ${(0, t.asCssProp)(o.colors.light[300])};
    --gu-button-subtle-background-color-hover: ${(0, t.asCssProp)(o.colors.light[500])};
    --gu-button-subtle-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.light[300])};
    --gu-button-subtle-border-color-hover: ${(0, t.asCssProp)(o.colors.light[500])};
    --gu-button-subtle-color: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-subtle-color-hover: ${(0, t.asCssProp)(o.colors.dark[300])};
    --gu-button-subtle-text-shadow: none;

    --gu-button-danger-background-color: ${(0, t.asCssProp)(o.colors.god.war.tertiary)};
    --gu-button-danger-background-color-hover: ${(0, t.asCssProp)(o.colors.god.war.secondary)};
    --gu-button-danger-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.god.war.tertiary)};
    --gu-button-danger-border-color-hover: ${(0, t.asCssProp)(o.colors.god.war.secondary)};
    --gu-button-danger-color: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-danger-color-hover: ${(0, t.asCssProp)(o.colors.light[100])};
    --gu-button-danger-text-shadow: var(--gu-button-text-shadow);

    --gu-button-disabled-color: ${(0, t.asCssProp)(o.colors.light[500])};
    --gu-button-disabled-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.light[300])};
    --gu-button-disabled-border: hover var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.light[300])};
    --gu-button-disabled-background-color: ${(0, t.asCssProp)(o.colors.light[300])};
  }

  :host([theme='gunmetal']) {
    --gu-button-primary-background-color: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    --gu-button-primary-background-color-hover: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    --gu-button-primary-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.apocyan[500])};
    --gu-button-primary-border-color-hover: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    --gu-button-primary-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    --gu-button-primary-color-hover: ${(0, t.asCssProp)(o.colors.apocyan[100])};
    --gu-button-primary-text-shadow: var(--gu-button-text-shadow);

    --gu-button-secondary-background-color: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    --gu-button-secondary-background-color-hover: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    --gu-button-secondary-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    --gu-button-secondary-border-color-hover: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
    --gu-button-secondary-color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
    --gu-button-secondary-color-hover: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
    --gu-button-secondary-text-shadow: var(--gu-button-text-shadow);

    --gu-button-disabled-color: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    --gu-button-disabled-border: var(--gu-button-border-width) solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    --gu-button-disabled-background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
  }

  .standard-button {
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    line-height: var(--gu-button-height);
    font-size: var(--gu-button-font-size);
    font-family: var(--gu-button-font-family);
    font-weight: 700;
    color: var(--gu-button-color);
    border-radius: var(--gu-button-border-radius);
    padding: 0px var(--gu-button-padding-x);
    margin: var(--gu-button-margin);
    min-width: calc(var(--gu-button-min-width) - var(--gu-button-padding-x));
    z-index: 3;
    text-decoration-line: none;
    flex-grow: 1;
  }

  .standard-button__loader {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    z-index: 1;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    border-radius: var(--gu-button-border-radius);
  }

  .standard-button__icon {
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(1.5))};
  }

  .standard-button--icon-right .standard-button__icon {
    order: 1;
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(1.5))};
    margin-right: 0px;
  }

  .standard-button--icon-only .standard-button__icon {
    position: absolute;
    left: 50%;
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(-2))};
    margin-right: 0px;
  }

  .standard-button--primary {
    background-color: var(--gu-button-primary-background-color);
    border: var(--gu-button-primary-border);
    color: var(--gu-button-primary-color);
    text-shadow: var(--gu-button-primary-text-shadow);
  }
  .standard-button--primary .standard-button__loader {
    background-color: var(--gu-button-primary-background-color);
  }

  .standard-button--secondary {
    background-color: var(--gu-button-secondary-background-color);
    border: var(--gu-button-secondary-border);
    color: var(--gu-button-secondary-color);
    text-shadow: var(--gu-button-secondary-text-shadow);
  }
  .standard-button--secondary .standard-button__loader {
    background-color: var(--gu-button-secondary-background-color);
  }

  .standard-button--subtle {
    background-color: var(--gu-button-subtle-background-color);
    border: var(--gu-button-subtle-border);
    color: var(--gu-button-subtle-color);
    text-shadow: var(--gu-button-subtle-text-shadow);
  }
  .standard-button--subtle .standard-button__loader {
    background-color: var(--gu-button-subtle-background-color);
  }

  .standard-button--danger {
    background-color: var(--gu-button-danger-background-color);
    border: var(--gu-button-danger-border);
    color: var(--gu-button-danger-color);
    text-shadow: var(--gu-button-danger-text-shadow);
  }
  .standard-button--danger .standard-button__loader {
    background-color: var(--gu-button-danger-background-color);
  }

  /* Hover states
    ----------------------------------------------------------------------------------- */
  .standard-button--primary:hover {
    background-color: var(--gu-button-primary-background-color-hover);
    border-color: var(--gu-button-primary-border-color-hover);
    color: var(--gu-button-primary-color-hover);
  }
  .standard-button--secondary:hover {
    background-color: var(--gu-button-secondary-background-color-hover);
    border-color: var(--gu-button-secondary-border-color-hover);
    color: var(--gu-button-secondary-color-hover);
  }

  :host([theme='light']) .standard-button--secondary:hover {
    text-shadow: var(--gu-button-text-shadow);
  }

  .standard-button--subtle:hover {
    background-color: var(--gu-button-subtle-background-color-hover);
    border-color: var(--gu-button-subtle-border-color-hover);
    color: var(--gu-button-subtle-color-hover);
  }
  .standard-button--danger:hover {
    background-color: var(--gu-button-danger-background-color-hover);
    border-color: var(--gu-button-danger-border-color-hover);
    color: var(--gu-button-danger-color-hover);
  }

  /* Active states
    ----------------------------------------------------------------------------------- */
  :host([theme='light']) .standard-button:active > * {
    opacity: 0.7;
  }

  :host([theme='dark']) .standard-button:active > * {
    opacity: 0.7;
  }

  :host([theme='gunmetal']) .standard-button:active {
    box-shadow: inset 0px 2px 6px rgba(0, 0, 0, 0.75);
  }

  /* Horizontal stretch functionality:
    ----------------------------------------------------------------------------------- */

  :host([expand='true']) {
    justify-self: stretch;
    flex-grow: 1;
  }
  :host([expand='true']) .standard-button {
    justify-self: stretch;
    flex-grow: 1;
  }

  /* Disabled and Loading states
    ----------------------------------------------------------------------------------- */
  :host([disabled='true']) .standard-button {
    color: var(--gu-button-disabled-color);
    border: var(--gu-button-disabled-border);
    background-color: var(--gu-button-disabled-background-color);
    text-shadow: none;
  }

  :host([disabled='true']),
  :host([loading='true']) {
    ${(0, t.asCssProp)(o.uifx.userSelect("none"))};
  }

  /* Icon coloring rules
    ----------------------------------------------------------------------------------- */
  :host(.standard-button-icon-success) gu-icon {
    --textFillColor: var(--gu-blue);
  }
`;

        class ne extends e.oi {
            constructor() {
                super(...arguments), this.loading = !1, this.disabled = !1, this.expand = !1, this.iconPosition = "left", this.iconOnly = !1, this.type = "primary", this.theme = "light"
            }

            static get styles() {
                return Y
            }

            renderIcon() {
                return this.icon ? e.dy`<gu-icon iconLigature=${this.icon} class="standard-button__icon"></gu-icon>` : e.dy``
            }

            renderLoader() {
                return !this.loading || this.disabled ? e.dy`` : e.dy` <div class="standard-button__loader">
      <gu-rectangular-spinner color="grey"></gu-rectangular-spinner>
    </div>`
            }

            getClassMap() {
                return {
                    "standard-button": !0,
                    "standard-button--icon-only": this.iconOnly,
                    [`standard-button--icon-${this.iconPosition}`]: !0,
                    [`standard-button--${this.type}`]: !0
                }
            }

            render() {
                return this.href ? e.dy` <a
        ?disabled="${this.disabled}"
        href=${this.href}
        target=${this.target}
        class=${(0, y.$)(this.getClassMap())}
      >
        ${this.renderLoader()} ${this.renderIcon()}
        <div class="standard-button__content">
          <slot data-test-id="standard-button-text-slot"></slot>
        </div>
      </a>` : e.dy` <button ?disabled="${this.disabled}" class=${(0, y.$)(this.getClassMap())}>
        ${this.renderLoader()} ${this.renderIcon()}
        <div class="standard-button__content">
          <slot data-test-id="standard-button-text-slot"></slot>
        </div>
      </button>`
            }
        }

        (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], ne.prototype, "loading", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], ne.prototype, "disabled", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], ne.prototype, "expand", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], ne.prototype, "iconPosition", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], ne.prototype, "iconOnly", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], ne.prototype, "icon", void 0), (0, r.gn)([(0, g.C)({reflect: !0}), (0, r.w6)("design:type", String)], ne.prototype, "type", void 0), (0, r.gn)([(0, g.C)({reflect: !0}), (0, r.w6)("design:type", String)], ne.prototype, "theme", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], ne.prototype, "href", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], ne.prototype, "target", void 0), customElements.define("gu-standard-button", ne);
        var Q = n(84876), te = n(25297), ce = n(72985), ge = n(58672);
        const Le = {text: {type: String}, href: {type: String}, target: {type: String}},
            Ce = Object.assign(Object.assign({}, Le), {
                loading: {type: String},
                loadingColor: {type: String},
                disabled: {type: String},
                icon: {type: String},
                leftIconPosition: {type: Boolean},
                size: {type: String},
                enableSounds: {type: Boolean},
                horizontalStretch: {type: String}
            }), qe = Object.assign(Object.assign({}, Le), {
                color: {type: String},
                loading: {type: String},
                loadingColor: {type: String},
                disabled: {type: String},
                size: {type: String},
                enableSounds: {type: Boolean},
                horizontalStretch: {type: String}
            });
        var Ye = n(91418);
        const ct = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.75))};
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
    flex-grow: 0;
    height: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
  }

  /* Button content styles
    ----------------------------------------------------------------------------------- */
  .buttonContent {
    position: relative;
    display: flex;
    justify-content: center;
    padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(3.5))};
  }

  .buttonContent--square {
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
  }

  .buttonContent__icon {
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(1.5))};
    position: relative;
    z-index: 2;
    order: 1;
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
  }

  :host([iconColor]) .buttonContent__icon {
    color: var(--iconColor);
  }

  .buttonContent__text {
    position: relative;
    z-index: 2;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-self: center;
    order: 1;
  }

  /* Horizontal stretch functionality:
    ----------------------------------------------------------------------------------- */
  :host([horizontalStretch='true']) {
    justify-self: stretch;
    flex-grow: 1;
  }

  /* Button content icon on left side state:
    ----------------------------------------------------------------------------------- */
  .buttonContent--leftIcon .buttonContent__icon {
    order: 0;
    margin: 0 ${(0, t.asCssProp)((0, i.gridUnits)(1))} 0 0;
  }

  /* Button content when layout is vertical
    ----------------------------------------------------------------------------------- */
  .buttonContent--vertical {
    flex-direction: column;
    align-items: center;
    min-width: 70px;
    max-width: 80px;
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(3))} ${(0, t.asCssProp)((0, i.gridUnits)(3))};
  }

  .buttonContent--vertical .buttonContent__icon {
    order: 0;
    margin: 0;
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
  }

  .buttonContent--vertical .buttonContent__text {
    text-align: center;
  }

  :host([backgroundFillColor='colors.apocyan.500']) {
    text-shadow: 0px 1px 1px rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.black))}, 0.3);
  }

  /* "DISABLED" and "LOADING" BUTTON STYLES
    ----------------------------------------------------------------------------------- */
  :host([disabled='true']),
  :host([loading='true']) {
    ${(0, t.asCssProp)(o.uifx.userSelect("none"))};
  }

  :host([disabled='true']) {
    filter: grayscale(100%);
  }

  /*  HOVER & MOUSEDOWN FX
  ----------------------------------------------------------------------------------- */
  :host(:hover) {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid ${(0, t.asCssProp)(o.colors.gunmetal[300])};
    color: ${(0, t.asCssProp)(o.colors.light[300])};
  }

  :host(:active) {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid ${(0, t.asCssProp)(o.colors.light[300])};
    color: ${(0, t.asCssProp)(o.colors.light[100])};
  }

  :host([borderColorHover]:hover),
  :host([borderColorHover]:hover) ::slotted(*) {
    box-shadow: 0px 0px ${(0, t.asCssProp)((0, i.gridUnits)(1))} var(--borderColorHover);
  }

  ${(0, t.asCssProp)(Ye.fillColoringRules)}
`, J = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    display: flex;
    flex-grow: 0;
    justify-self: center;
    justify-content: center;
    position: relative;
    white-space: nowrap;
    overflow: hidden;
    cursor: pointer;
    color: ${(0, t.asCssProp)(o.colors.light[100])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(12, 12))};
    ${(0, t.asCssProp)(o.animation.standardTransition("all"))};

    /* NORMAL SIZING BY DEFAULT */
    min-width: 140px;
    height: ${(0, t.asCssProp)("32px")};
    line-height: ${(0, t.asCssProp)("32px")};
  }

  /* The background "fill" color of the button */
  :host::before {
    content: '';
    position: absolute;
    left: 3px;
    right: 3px;
    top: 2px;
    bottom: 2px;
    z-index: 0;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(11, 11))};
    ${(0, t.asCssProp)(o.animation.standardTransition("all"))};
  }

  /* "LARGE" SIZE BUTTON STYLES
    ----------------------------------------------------------------------------------- */
  :host([size='large']) {
    height: ${(0, t.asCssProp)("48px")};
    line-height: ${(0, t.asCssProp)("48px")};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(18, 18))};
  }

  :host([size='large']) .buttonContent {
    padding: 0 calc(${(0, t.asCssProp)("18px")} + ${(0, t.asCssProp)((0, i.gridUnits)(2))});
  }

  :host([size='large'])::before {
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(17, 17))};
  }

  :host([size='large']) .buttonContent__icon {
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(5.5))};
  }

  /* Horizontal stretch functionality:
    ----------------------------------------------------------------------------------- */
  :host([horizontalStretch='true']) {
    justify-self: stretch;
    flex-grow: 1;
  }

  /* Button content styles
    ----------------------------------------------------------------------------------- */
  .buttonContent {
    position: relative;
    display: flex;
    justify-content: center;
    padding: 0 calc(${(0, t.asCssProp)("12px")} + ${(0, t.asCssProp)((0, i.gridUnits)(2))});
  }

  .buttonContent__icon {
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
    position: relative;
    z-index: 2;
    order: 2;
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
  }

  .buttonContent__text {
    position: relative;
    z-index: 2;
    color: inherit;
    text-shadow: 0 calc(var(--vh) * 0.2) calc(var(--vh) * 0.2) rgba(${(0, t.asCssProp)(o.colors.dark[900])}, 0.5);
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-self: center;
    align-content: center;
    order: 1;
    gap: 8px;
  }

  /* Button content icon on left side state:
    ----------------------------------------------------------------------------------- */
  .buttonContent--leftIcon .buttonContent__icon {
    order: 0;
    margin: 0 ${(0, t.asCssProp)((0, i.gridUnits)(1))} 0 0;
  }

  /* "DISABLED" and "LOADING" BUTTON STYLES
    ----------------------------------------------------------------------------------- */
  :host([disabled='true']),
  :host([loading='true']) {
    filter: grayscale(100%);
    ${(0, t.asCssProp)(o.uifx.userSelect("none"))};
  }

  /*  MOUSE-DOWN FX
    ----------------------------------------------------------------------------------- */
  :host(:active)::after {
    content: '';
    position: absolute;
    left: 3px;
    right: 3px;
    top: 2px;
    bottom: 2px;
    z-index: 0;
    background: ${(0, t.asCssProp)(o.gradients.apocyan.simple())};
    opacity: 0.2;
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(11, 11))};
  }
`, ie = e.iv`
  ${J}
/*
HEX BUTTON
*/
  :host {
    background: none;
    color: var(--gu-blue);
  }
  
  :host::before {
    background: var(--gu-blue-dark);
  }

  .waveArtwork {
    display: none;
  }

  /*  HOVER FX
    ----------------------------------------------------------------------------------- */
  :host(:hover) {
    color: var(--gu-blue-hover);
  }

  :host(:hover)::before,
  :host(:active)::before,
  :host(:active)::after {
    background: var(--gu-blue-dark);
   }
`, xe = e.iv`
  ${J}

  :host {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
  }

  :host::before {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
  }

  /*  HOVER FX
    ----------------------------------------------------------------------------------- */
  :host(:hover) {
  }

  :host(:hover)::before {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }
`, Ze = (e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    display: inline-flex;
    justify-content: flex-start;
    cursor: pointer;
  }

  .buttonText {
    color: ${(0, t.asCssProp)(o.colors.apocyan[100])};
    border-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid ${(0, t.asCssProp)(o.colors.apocyan[100])};
    padding-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
  }

  /*  HOVER FX
    ----------------------------------------------------------------------------------- */
  :host(:hover) .buttonText {
    border-color: ${(0, t.asCssProp)(o.colors.gold[300])};
    color: ${(0, t.asCssProp)(o.colors.gold[300])};
  }
`, e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}
  ${J}

  :host {
    display: flex;
    justify-content: center;
    position: relative;
    white-space: nowrap;
    cursor: pointer;
    overflow: hidden;
    cursor: pointer;
    min-width: 180px;
    height: ${(0, t.asCssProp)("48px")};
    line-height: ${(0, t.asCssProp)("48px")};
  }

  :host::before {
    background: none;
  }

  .hexLayer {
    position: absolute;
  }

  .outerKeyline {
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: ${(0, t.asCssProp)(o.colors.dark[500])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(18, 18))};
  }

  .outerGolden {
    top: 1px;
    bottom: 1px;
    left: 1px;
    right: 1px;
    background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(17, 17))};
  }

  .innerGunmetal {
    top: 5px;
    bottom: 5px;
    left: 6px;
    right: 6px;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(14, 14))};
  }

  .innerButtonFill {
    top: 7px;
    bottom: 7px;
    left: 8px;
    right: 8px;
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(13, 13))};
  }

  /* Button content styles
    ----------------------------------------------------------------------------------- */
  .buttonContent {
    position: relative;
    display: flex;
    justify-content: center;
    padding: 0 calc(${(0, t.asCssProp)("18px")} + ${(0, t.asCssProp)((0, i.gridUnits)(2))});
  }

  .buttonContent__icon {
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    position: relative;
    z-index: 2;
    order: 1;
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(5.5))};
    ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
  }

  .buttonContent__text {
    display: inline;
    position: relative;
    z-index: 2;
    text-decoration: none;
    line-height: ${(0, t.asCssProp)("48px")};
    order: 1;
    ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
  }

  /* Button content icon on left side state:
    ----------------------------------------------------------------------------------- */
  .buttonContent--leftIcon .buttonContent__icon {
    order: 0;
    margin: 0 ${(0, t.asCssProp)((0, i.gridUnits)(2))} 0 0;
  }

  /*  HOVER & MOUSEDOWN FX
  ----------------------------------------------------------------------------------- */
  :host(:hover) .innerButtonFill,
  :host(:active) .innerButtonFill {
    background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host(:hover) .buttonContent__text,
  :host(:hover) .buttonContent__icon,
  :host(:active) .buttonContent__text,
  :host(:active) .buttonContent__icon {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    background-clip: text;
    -webkit-background-clip: text;
  }

  /*  INVERTED COLORING
  ----------------------------------------------------------------------------------- */
  :host(.invertColoring) .innerButtonFill {
    background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
  }

  :host(.invertColoring) .buttonContent__text,
  :host(.invertColoring) .buttonContent__icon {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    background-clip: text;
    -webkit-background-clip: text;
  }

  /*  INVERTED HOVER & MOUSEDOWN FX
  ----------------------------------------------------------------------------------- */
  :host(.invertColoring:hover) .innerButtonFill,
  :host(.invertColoring:active) .innerButtonFill {
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
  }

  :host(.invertColoring:hover) .buttonContent__text,
  :host(.invertColoring:hover) .buttonContent__icon,
  :host(.invertColoring:active) .buttonContent__text,
  :host(.invertColoring:active) .buttonContent__icon {
    ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
  }
`), pt = o.colors.light[500], rt = o.colors.gold[500], Fe = o.colors.dark[500], Ie = o.colors.dark[900], We = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}
  ${J}

  :host {
    display: flex;
    justify-content: center;
    position: relative;
    white-space: nowrap;
    cursor: pointer;
    overflow: hidden;
    cursor: pointer;
    min-width: 180px;
    height: ${(0, t.asCssProp)("48px")};
    line-height: ${(0, t.asCssProp)("48px")};
  }

  :host::before {
    background: none; // fixing the dark bleed in common-hex-button
  }

  .hexLayer {
    position: absolute;
  }

  .outerKeyline {
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background: ${(0, t.asCssProp)(Fe)};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(18, 18))};
  }

  .outer {
    top: 1px;
    bottom: 1px;
    left: 1px;
    right: 1px;
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(17, 17))};
  }
  .outerSilver {
    background-color: ${(0, t.asCssProp)(pt)};
  }
  .outerGold {
    background-color: ${(0, t.asCssProp)(rt)};
  }

  .innerDark {
    top: 5px;
    bottom: 5px;
    left: 6px;
    right: 6px;
    background: ${(0, t.asCssProp)(o.colors.dark[900])};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(14, 14))};
  }

  .innerButtonFill {
    top: 7px;
    bottom: 7px;
    left: 8px;
    right: 8px;
    background: ${(0, t.asCssProp)(Ie)};
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(13, 13))};
  }

  /* Button content styles
    ----------------------------------------------------------------------------------- */
  .buttonContent {
    position: relative;
    display: flex;
    justify-content: center;
    padding: 0 calc(${(0, t.asCssProp)("18px")} + ${(0, t.asCssProp)((0, i.gridUnits)(2))});
  }

  .buttonContent__text {
    display: inline;
    position: relative;
    z-index: 2;
    text-decoration: none;
    line-height: ${(0, t.asCssProp)("48px")};
    order: 1;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  .buttonContent__textSilver {
    background-color: ${(0, t.asCssProp)(pt)};
  }
  .buttonContent__textGold {
    background-color: ${(0, t.asCssProp)(rt)};
  }

  /*  HOVER & MOUSEDOWN FX
  ----------------------------------------------------------------------------------- */
  :host(:hover) .innerButtonFillSilver,
  :host(:active) .innerButtonFillSilver {
    background-color: ${(0, t.asCssProp)(pt)};
  }
  :host(:hover) .innerButtonFillGold,
  :host(:active) .innerButtonFillGold {
    background-color: ${(0, t.asCssProp)(rt)};
  }

  :host(:hover) .buttonContent__text,
  :host(:active) .buttonContent__text {
    background-color: ${(0, t.asCssProp)(Ie)};
    background-clip: text;
    -webkit-background-clip: text;
  }

  :host(:active)::after {
    background: ${(0, t.asCssProp)(Ie)};
    opacity: 0.2;
  }
`, Me = e.iv`
  ${J}

  :host {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    color: ${(0, t.asCssProp)(o.colors.apocyan[100])};
    text-transform: uppercase;
  }

  :host::before {
    display: none;
  }

  /*  HOVER FX
    ----------------------------------------------------------------------------------- */
  :host(:hover) {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }
`;

        function Oe(G, c) {
            return c && "true" !== G ? e.dy` <gu-icon iconLigature=${c} class="buttonContent__icon"></gu-icon> ` : null
        }

        function Qe(G, c, $ = "grey") {
            return "true" === c ? e.dy`<gu-rectangular-spinner color=${$}></gu-rectangular-spinner>` : G || e.dy` <slot></slot> `
        }

        const Vt = e.dy`
  <div class="waveArtwork">
    <picture class="waveArtwork__side waveArtwork__side--top">
      <source srcset="/assets/images/hex-button/hex-button--top-wave-art.webp" type="image/webp" />
      <source srcset="/assets/images/hex-button/hex-button--top-wave-art.png" type="image/png" />
      <img src="/assets/images/hex-button/hex-button--top-wave-art.png" />
    </picture>

    <picture class="waveArtwork__side waveArtwork__side--bottom">
      <source srcset="/assets/images/hex-button/hex-button--bottom-wave-art.webp" type="image/webp" />
      <source srcset="/assets/images/hex-button/hex-button--bottom-wave-art.png" type="image/png" />
      <img src="/assets/images/hex-button/hex-button--bottom-wave-art.png" />
    </picture>
  </div>
`, Ne = Object.assign(Object.assign({}, Ce), {invertColoring: {type: Boolean}});
        customElements.define("gu-special-hex-button", (0, ge.x)({
            renderer: function ({
                                    text: G,
                                    loading: c,
                                    loadingColor: $,
                                    icon: z,
                                    leftIconPosition: se,
                                    invertColoring: Ee
                                }) {
                return (0, Q.d4)(() => {
                    Ee ? this.classList.add("invertColoring") : this.classList.remove("invertColoring")
                }, [Ee]), e.dy` ${(({icon: G, leftIconPosition: c, text: $, loading: z, loadingColor: se}) => e.dy`
  <i class="hexLayer outerKeyline"></i>
  <i class="hexLayer outerGolden"></i>
  <i class="hexLayer innerGunmetal"></i>
  <i class="hexLayer innerButtonFill"></i>

  <div class=${(0, y.$)({buttonContent: !0, "buttonContent--leftIcon": c})}>
    <gu-heading-text class="buttonContent__text" size="2x-small">
      ${Qe($, z, se)}
    </gu-heading-text>
    ${Oe(z, G)}
  </div>
`)({text: G, icon: z, loading: c, loadingColor: $, leftIconPosition: se})} `
            }, baseClass: (0, ce.lH)((0, ce.Am)((0, ce.s)((0, ce.Xg)(te.J)))), props: {properties: Ne, styles: Ze}
        })), customElements.define("gu-special-hex-flat-button", (0, ge.x)({
            renderer: function ({color: G, text: c, loading: $, loadingColor: z}) {
                return e.dy` ${(({color: G, text: c, loading: $, loadingColor: z}) => {
                    const se = G ? G[0].toUpperCase() + G.slice(1) : "Silver";
                    return e.dy`
    <i class="hexLayer outerKeyline"></i>
    <i class="hexLayer outer outer${se}"></i>
    <i class="hexLayer innerDark"></i>
    <i class="hexLayer innerButtonFill innerButtonFill${se}"></i>

    <div class=${(0, y.$)({buttonContent: !0})}>
      <gu-heading-text class="buttonContent__text buttonContent__text${se}" size="2x-small">
        ${Qe(c, $, z)}
      </gu-heading-text>
    </div>
  `
                })({color: G, text: c, loading: $, loadingColor: z})} `
            }, props: {properties: qe, styles: We}, baseClass: (0, ce.Am)((0, ce.s)((0, ce.Xg)(te.J)))
        })), customElements.define("gu-primary-hex-button", (0, ge.x)({
            renderer: function ({text: G, loading: c, loadingColor: $, size: z, icon: se, leftIconPosition: Ee}) {
                return e.dy`
    ${Vt} ${(({icon: G, leftIconPosition: c, size: $, text: z, loading: se, loadingColor: Ee}) => e.dy`
  <div class=${(0, y.$)({buttonContent: !0, "buttonContent--leftIcon": c})}>
    <gu-heading-text class="buttonContent__text" size=${"large" === $ ? "2x-small" : "3x-small"}>
      ${Qe(z, se, Ee)}
    </gu-heading-text>
    ${Oe(se, G)}
  </div>
`)({text: G, icon: se, size: z, loading: c, loadingColor: $, leftIconPosition: Ee})}
  `
            }, props: {properties: Ce, styles: ie}, baseClass: (0, ce.lH)((0, ce.Am)((0, ce.s)((0, ce.Xg)(te.J))))
        })), customElements.define("gu-secondary-hex-button", (0, ge.x)({
            renderer: function ({text: G, loading: c, loadingColor: $, icon: z, leftIconPosition: se}) {
                return e.dy` ${(({icon: G, leftIconPosition: c, text: $, loading: z, loadingColor: se}) => e.dy`
  <div class=${(0, y.$)({buttonContent: !0, "buttonContent--leftIcon": c})}>
    <gu-simple-text class="buttonContent__text" kind="small">
      ${Qe($, z, se)}
    </gu-simple-text>
    ${Oe(z, G)}
  </div>
`)({text: G, icon: z, loading: c, loadingColor: $, leftIconPosition: se})} `
            }, props: {properties: Ce, styles: xe}, baseClass: (0, ce.Am)((0, ce.s)((0, ce.Xg)(te.J)))
        })), customElements.define("gu-subtle-hex-button", (0, ge.x)({
            renderer: function ({text: G, loading: c, loadingColor: $, size: z, icon: se, leftIconPosition: Ee}) {
                return e.dy` ${(({
                                     icon: G,
                                     leftIconPosition: c,
                                     text: $,
                                     loading: z,
                                     loadingColor: se,
                                     size: Ee
                                 }) => e.dy`
  <div class=${(0, y.$)({buttonContent: !0, "buttonContent--leftIcon": c})}>
    <gu-heading-text class="buttonContent__text" size=${"large" === Ee ? "2x-small" : "3x-small"}>
      ${Qe($, z, se)}
    </gu-heading-text>
    ${Oe(z, G)}
  </div>
`)({text: G, icon: se, size: z, loading: c, loadingColor: $, leftIconPosition: Ee})} `
            }, props: {properties: Ce, styles: Me}, baseClass: (0, ce.Am)((0, ce.s)((0, ce.Xg)(te.J)))
        }));
        var a = n(5284), h = n(52102);
        const {asCssProp: I} = a.ZB, {gridUnits: oe} = a.dz, Pe = e.iv`
  :host {
    display: inline-flex;
    justify-content: flex-start;
    cursor: pointer;
  }

  :host,
  :host([kind='small']),
  :host([kind='help']) {
    border-bottom: ${I(oe(.25))} solid;
    padding-bottom: ${I(oe(.25))};
  }

  :host([kind='large']) {
    border-bottom: ${I(oe(.5))} solid;
    padding-bottom: ${I(oe(.25))};
  }

  :host([kind='tag']) {
    border-bottom: ${I(oe(.5))} solid;
    padding-bottom: ${I(oe(.25))};
  }

  /*  HOVER FX
    ----------------------------------------------------------------------------------- */
  :host(:hover) {
    border-color: ${I(o.colors.gold[300])};
    color: ${I(o.colors.gold[300])};
  }
`;

        class at extends ((0, ce.Xg)(h._)) {
            static get styles() {
                const c = [];
                return super.styles && c.push(super.styles), c.push(Pe), c
            }

            static get properties() {
                return Object.assign(Object.assign({}, super.properties), Le)
            }
        }

        customElements.define("gu-simple-text-button", at);
        const nt = Object.assign(Object.assign({}, Ce), {
            iconColor: {type: String},
            fillColor: {type: String},
            fillColorHover: {type: String},
            fillGradient: {type: String},
            fillGradientTarget: {type: String},
            backgroundFillColor: {type: String},
            backgroundFillColorHover: {type: String},
            backgroundFillGradient: {type: String},
            backgroundFillGradientTarget: {type: String},
            borderColor: {type: String},
            borderColorHover: {type: String},
            verticalLayout: {type: Boolean},
            square: {type: Boolean}
        });
        customElements.define("gu-plain-square-button", (0, ge.x)({
            renderer: function ({
                                    text: G,
                                    loading: c,
                                    loadingColor: $,
                                    icon: z,
                                    iconColor: se,
                                    leftIconPosition: Ee,
                                    fillColor: Ge,
                                    fillColorHover: Xe,
                                    fillGradient: yt,
                                    fillGradientTarget: Nt,
                                    backgroundFillColor: St,
                                    backgroundFillColorHover: It,
                                    backgroundFillGradient: ft,
                                    backgroundFillGradientTarget: Ae,
                                    borderColor: Re,
                                    borderColorHover: $t,
                                    verticalLayout: ot,
                                    square: tt
                                }) {
                return (0, Q.d4)(() => {
                    (0, v.updateColoringVariables)({
                        component: this,
                        iconColor: se,
                        fillColor: Ge,
                        fillColorHover: Xe,
                        fillGradient: yt,
                        fillGradientTarget: Nt,
                        backgroundFillColor: St,
                        backgroundFillColorHover: It,
                        backgroundFillGradient: ft,
                        backgroundFillGradientTarget: Ae,
                        borderColor: Re,
                        borderColorHover: $t
                    })
                }, [se, Ge, Xe, yt, Nt, St, It, ft, Ae, Re, $t]), e.dy`${(({
                                                                               icon: G,
                                                                               leftIconPosition: c,
                                                                               text: $,
                                                                               loading: z,
                                                                               loadingColor: se,
                                                                               verticalLayout: Ee,
                                                                               square: Ge
                                                                           }) => e.dy`
  <div
    class=${(0, y.$)({
                    buttonContent: !0,
                    "buttonContent--leftIcon": c,
                    "buttonContent--vertical": Ee,
                    "buttonContent--square": Ge
                })}
  >
    <gu-paragraph-text class="buttonContent__text" kind=${Ee ? "tag" : "small"} fontWeight="bold">
      ${Qe($, z, se)}
    </gu-paragraph-text>
    ${Oe(z, G)}
  </div>
`)({icon: z, leftIconPosition: Ee, loading: c, loadingColor: $, text: G, verticalLayout: ot, square: tt})}`
            }, props: {properties: nt, styles: ct}, baseClass: (0, ce.Am)((0, ce.s)((0, ce.Xg)(te.J)))
        }));
        var Bt = (() => {
            return (G = Bt || (Bt = {})).img2text = "img2text", G.text2img = "text2img", Bt;
            var G
        })();
        customElements.define("gu-card-character", class extends e.oi {
            constructor() {
                super(...arguments), this.direction = Bt.img2text, this.headerSize = "small", this.headerColor = o.colors.light[100], this.textKind = "small", this.textColor = o.colors.light[500], this.backgroundPosition = "top", this.backgroundSize = "contain", this.headerResponsiveSize = [], this.textResponsiveKind = [], this.backgroundImageResponsive = [], this.breakpoint = "medium"
            }

            static get properties() {
                return {
                    background: {type: String},
                    direction: {type: String},
                    header: {type: String},
                    headerSize: {type: String},
                    headerColor: {type: String},
                    text: {type: String},
                    textKind: {type: String},
                    textColor: {type: String},
                    backgroundPosition: {type: String},
                    backgroundSize: {type: String},
                    headerResponsiveSize: {type: Array},
                    textResponsiveKind: {type: Array},
                    backgroundImageResponsive: {type: Array},
                    breakpoint: {type: String}
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
      }
      .flex-box-col {
        display: flex;
        flex-direction: column;
      }
      .character {
        display: flex;
        background-repeat: no-repeat;
        border-bottom: 1px solid ${(0, t.asCssProp)(o.colors.dark[500])};
        align-items: flex-end;
        justify-content: center;
        min-height: 450px;
      }
      .character-text {
        box-sizing: border-box;
        margin: 280px 20px 20px;
        width: 100%;
        padding-left: 20px;
        border-left: 4px solid ${(0, t.asCssProp)(o.colors.gold[500])};
        text-align: left;
      }
      @media only screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping["x-small"])}) ) {
        .character {
          height: 440px;
        }
        .character-text {
          margin: 40px;
        }
      }
    `
            }

            generateBackgroundImageMediaQueries() {
                return this.backgroundImageResponsive.map(({
                                                               breakpoint: c,
                                                               pos: $,
                                                               size: z
                                                           }) => `\n        @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping[c])}) {\n          .character {\n            background-image: ${["x-small", "small"].includes(c) ? "linear-gradient(to bottom, rgba(0, 0, 0, 0) 25%, rgba(0, 0, 0, 1) 80%), " : ""}\n            url('${this.background}') !important;\n            background-position: ${(0, t.asCssProp)($)} !important;\n            background-size: ${(0, t.asCssProp)(z)} !important;\n          }\n        }\n    `).join("\n")
            }

            generateMediaQueries() {
                return `\n      /* DEFINE RESPONSIVE SIZING */\n      ${this.generateBackgroundImageMediaQueries()}\n        @media\n        screen\n        and\n        (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping[this.breakpoint])}) {\n        .character {\n          flex-direction: column !important;\n          align-items: flex-end !important;\n          justify-content: center !important;\n        }\n        .character-img2text {\n          align-items: flex-end !important;\n        }\n        .character-text2img {\n          align-items: flex-start !important;\n        }\n        .character-text {\n          width: 50% !important;\n          margin: 20px !important;\n        }\n        .character-text-img2text {\n          padding-left: 0 !important;\n          border-left: none !important;\n          padding-right: 20px !important;\n          border-right: 4px solid ${(0, t.asCssProp)(o.colors.gold[500])} !important;\n          text-align: right !important;\n        }\n        .character-text-text2img {\n          padding-right: 0 !important;\n          border-right: none !important;\n          padding-left: 20px !important;\n          border-left: 4px solid ${(0, t.asCssProp)(o.colors.gold[500])} !important;\n          text-align: left !important;\n        }\n      }`
            }

            generateAllStyles() {
                return e.dy`<style>
      .character {
        background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 25%, rgba(0, 0, 0, 1) 45%),
          url('${this.background}');
        background-color: #000;
        background-position: ${this.backgroundPosition};
        background-size: ${this.backgroundSize};
      }
      ${this.generateMediaQueries()}
    </style>`
            }

            render() {
                return e.dy`
      ${this.generateAllStyles()}
      <div class="character character-${this.direction} ">
        <div class="character-text character-text-${this.direction}">
          <gu-heading-text
            class="character-textAllignment"
            fillcolor="${this.headerColor}"
            size="${this.headerSize}"
            .responsiveSize=${this.headerResponsiveSize}
          >
            ${this.header}
          </gu-heading-text>
          <gu-vertical-space both="medium"></gu-vertical-space>
          <gu-paragraph-text
            class="character-textAllignment"
            fillcolor="${this.textColor}"
            kind="${this.textKind}"
            .responsiveKind=${this.textResponsiveKind}
          >
            ${this.text}
          </gu-paragraph-text>
        </div>
      </div>
    `
            }
        });
        var ht = n(7302), bt = n(49219);
        const ts = G => `https://images.godsunchained.com/cardpack-images--${G}`, Yt = G => "undefined" === G || !G;

        class Ft extends e.oi {
            constructor() {
                super(...arguments), this.type = "marketing", this.responsiveSrcsetSizes = `${bt.imageQualities.normal}px`
            }

            static get styles() {
                return e.iv`
      :host {
        display: block;
        width: 100%;
      }

      .picture {
        display: block;
        width: 100%;
        padding-bottom: 100%;
        position: relative;
      }

      .picture--marketing {
        padding-bottom: 128%;
      }

      .image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;

        transition: opacity 0.2s ease-in-out;

        -webkit-touch-callout: none;
        -webkit-user-drag: none;
      }

      :host(.loading) .image {
        opacity: 0;
      }
    `
            }

            update(c) {
                c.has("god") && (this.sanitizedGod = "all" === this.god || "core" === this.god ? "neutral" : this.god), super.update(c)
            }

            updated(c) {
                super.updated(c), this.image && (this.image.complete ? (this.classList.remove("loading", "error"), this.notifyState("loaded")) : (this.classList.remove("error"), this.classList.add("loading"), this.notifyState("loading"), (0, i.waitForImageToLoad)(this.image).then(() => {
                    this.classList.remove("loading", "error"), this.notifyState("loaded")
                }).catch(() => {
                    this.classList.remove("loading"), this.classList.add("error"), this.notifyState("error")
                })))
            }

            notifyState(c) {
                this.dispatchEvent(new CustomEvent(c, {detail: this, bubbles: !1, composed: !1}))
            }

            render() {
                const {type: c, set: $, rarity: z, sanitizedGod: se, responsiveSrcsetSizes: Ee} = this;
                return Yt(c) || Yt($) || Yt(se) || Yt(z) ? e.dy`` : e.dy`
      <picture class="picture picture--${c}">
        <source
          srcset=${Object.keys(bt.imageQualities).map(Ge => {
                    const Xe = bt.imageQualities[Ge];
                    return `${ts(c)}/${Xe}/${$}--${se}--${z}.webp ${Xe}w`
                }).join(", ")}
          type="image/webp"
          sizes="${Ee}"
        />
        <source
          srcset=${Object.keys(bt.imageQualities).map(Ge => {
                    const Xe = bt.imageQualities[Ge];
                    return `${ts(c)}/${Xe}/${$}--${se}--${z}.png ${Xe}w`
                }).join(",")}
          type="image/png"
          sizes="${Ee}"
        />
        <img
          class="image"
          src="${ts(c)}/${bt.imageQualities.small}/${$}--${se}--${z}.png"
          alt="Card Pack Image"
        />
      </picture>
    `
            }
        }

        (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Ft.prototype, "set", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Ft.prototype, "rarity", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Ft.prototype, "god", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Ft.prototype, "type", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", Object)], Ft.prototype, "responsiveSrcsetSizes", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", String)], Ft.prototype, "sanitizedGod", void 0), (0, r.gn)([(0, T.I)(".image"), (0, r.w6)("design:type", HTMLImageElement)], Ft.prototype, "image", void 0), customElements.define("gu-card-pack-picture", Ft);
        var zt = n(86041);
        const ss = (G, c) => `https://card.godsunchained.com/?id=${G}&q=${c}`;
        let At = class extends e.oi {
            constructor() {
                super(...arguments), this.quality = 1, this.protoId = 1, this.responsiveSrcsetSizes = `${bt.imageQualities.normal}px`, this.showLoadingState = !1
            }

            updated(c) {
                super.updated(c), (c.has("protoId") || c.has("quality")) && (this.classList.add("loading"), (0, i.waitForImageToLoad)(this.image).then(() => this.classList.remove("loading")))
            }

            render() {
                return e.dy`
      <picture class="picture">
        <source
          srcset=${Object.keys(bt.imageQualities).map(c => {
                    const $ = bt.imageQualities[c];
                    return `${ss(this.protoId, this.quality)}&w=${$} ${$}w`
                }).join(", ")}
          type="image/webp"
          sizes="${this.responsiveSrcsetSizes}"
        />
        <source
          srcset=${Object.keys(bt.imageQualities).map(c => {
                    const $ = bt.imageQualities[c];
                    return `${ss(this.protoId, this.quality)}&w=${$}&png=true ${$}w`
                }).join(", ")}
          type="image/png"
          sizes="${this.responsiveSrcsetSizes}"
        />
        <img
          class="image"
          src="${ss(this.protoId, this.quality)}&w=${bt.imageQualities.small}&png=true"
          alt="Card Pack Image"
        />
      </picture>
      <gu-icon iconLigature="action_hidePassword" class="loadingIcon"></gu-icon>
    `
            }
        };
        At.styles = e.iv`
    :host {
      position: relative;
      display: block;
      width: 100%;
    }

    :host(.loading) .image {
      opacity: 0.9;
    }

    :host(.loading) .loadingIcon {
      opacity: 0.9;
    }

    .picture {
      display: block;
      width: 100%;
      padding-bottom: 134.75%; /* ratio of card images is: 1.347583643122677 */
      position: relative;
    }

    .image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .loadingIcon {
      position: absolute;
      top: 40%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
      color: ${(0, t.asCssProp)(o.colors.light[100])};
      opacity: 0;
    }
  `, (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], At.prototype, "quality", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], At.prototype, "protoId", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], At.prototype, "responsiveSrcsetSizes", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], At.prototype, "showLoadingState", void 0), (0, r.gn)([(0, T.I)("img.image"), (0, r.w6)("design:type", HTMLImageElement)], At.prototype, "image", void 0), At = (0, r.gn)([(0, zt.M)("gu-card-picture")], At);
        var ws = n(71459), ks = n.n(ws), jt = n(49749), ns = n(63082), Es = n.n(ns);
        const Qt_ALL = "slidesListing__slide", Qt_CURRENT = "slidesListing__slide--currentSlide", he = new E.do(G => {
            G.forEach(c => {
                c.target.handleResize()
            })
        });
        customElements.define("gu-carousel", class extends e.oi {
            constructor() {
                super(...arguments), this.slidesPerView = 1, this.spaceBetween = 0, this.centeredSlides = !1, this.responsiveBreakpoints = [], this.state = {
                    leftLocked: !1,
                    rightLocked: !1,
                    translateRatio: 1,
                    slidesPerView: 1,
                    spaceBetween: 0,
                    specialRemainderSlideActive: !1,
                    lockTranslateX: null,
                    hasRemainderSlide: !1,
                    translateX: 0,
                    startTranslateX: 0,
                    currentSlideIndexes: [],
                    totalSlidesCount: 0,
                    centeredSlides: !1
                }, this.dimensions = {
                    width: 0,
                    height: 0,
                    slideWidth: 0,
                    totalWidth: 0,
                    slideCenteringSideMargin: 0,
                    left: 0,
                    top: 0
                }, this.debouncedResize = Es()(() => {
                    this.layoutSlides(), this.updatePaneClasses(), this.reset()
                }, 500)
            }

            static get styles() {
                return e.iv`
      ${(0, t.asCssProp)((0, t.setBoxSizing)())}

      :host {
        display: block;
        position: relative;
        overflow: hidden;
      }

      .slidesListing {
        display: flex;
        align-items: flex-start;
        height: 100%;
        overflow: hidden;
        position: relative;
        transition: height ${250}ms ease-in-out;
      }

      ::slotted(.slidesListing__slide) {
        display: flex;
        flex-shrink: 0;
        flex-grow: 0;
      }

      ::slotted(.slideListing__slide--currentSlide) {
        z-index: 1;
      }
    `
            }

            static get properties() {
                return {
                    slidesPerView: {type: Number},
                    spaceBetween: {type: Number},
                    centeredSlides: {type: Boolean},
                    responsiveBreakpoints: {type: Array}
                }
            }

            firstUpdated() {
                he.observe(this), this.slidesListingDom = this.shadowRoot.querySelector(".slidesListing"), this.gestureControl = new (ks())(this, {
                    sensitivity: 0,
                    swipeVelocity: 60,
                    passive: !1,
                    capture: !0,
                    startDirectionLoopCount: 1
                }), this.gestureControl.on("pan.prestart", c => {
                    c.sourceEvent instanceof MouseEvent && c.sourceEvent.preventDefault()
                }), this.gestureControl.on("pan.start", c => this.onPanStart(c)), this.gestureControl.on("pan.all", c => this.onPan(c)), this.gestureControl.on("pan.end", c => this.onPanEnd(c)), this.storeSlideDoms(), this.handleResize(), this.updatePaneClasses()
            }

            disconnectedCallback() {
                this.gestureControl.destroy(), he.unobserve(this), super.disconnectedCallback()
            }

            get onLastSlide() {
                const {state: {currentSlideIndexes: c}} = this;
                return this.state.centeredSlides ? c[c.length - 1] >= this.state.totalSlidesCount : c[c.length - 1] >= this.state.totalSlidesCount - 1
            }

            get onFirstSlide() {
                return 0 === this.state.currentSlideIndexes[0]
            }

            get isMultiSlide() {
                return this.state.slidesPerView > 1
            }

            get hasRemainderSlide() {
                return this.state.slidesPerView - Math.floor(this.state.slidesPerView) != 0
            }

            layoutSlides() {
                this.slidesListingDom.style.width = `${this.dimensions.totalWidth + 2 * this.dimensions.slideCenteringSideMargin}px`, jt.p8.set(this.slideDoms, {
                    width: this.dimensions.slideWidth,
                    marginLeft: c => this.state.centeredSlides && 0 === c ? this.dimensions.slideCenteringSideMargin : 0,
                    marginRight: c => c === this.state.totalSlidesCount - 1 ? this.dimensions.slideCenteringSideMargin : this.state.spaceBetween
                })
            }

            onPanStart(c) {
                this.slidesListingDom.style.cursor = "grabbing", this.direction = null, this.state.startTranslateX = 0 === this.state.currentSlideIndexes[0] ? 0 : this.state.translateX, this.state.translateX = 0, this.state.rightLocked = !1, this.state.leftLocked = !1, this.setXTrans("left", 0)
            }

            onPan(c) {
                this.setXTrans(c.deltaX < 0 ? "left" : "right", c.deltaX)
            }

            setXTrans(c, $) {
                this.direction = c;
                let z = 1;
                const se = $ * z, Ee = this.state.startTranslateX + se;
                "right" === c && Ee >= 0 ? this.state.rightLocked || (this.state.lockTranslateX = se, this.state.rightLocked = !0) : this.state.rightLocked = !1, "left" === c && this.dimensions.totalWidth - this.dimensions.width + Ee + 2 * this.dimensions.slideCenteringSideMargin <= 0 ? this.state.leftLocked || (this.state.lockTranslateX = se, this.state.leftLocked = !0) : this.state.leftLocked = !1, z = this.state.leftLocked || this.state.rightLocked ? .1 : 1;
                let Xe = this.state.startTranslateX + se;
                (this.state.rightLocked || this.state.leftLocked) && (Xe = this.state.startTranslateX + this.state.lockTranslateX + ($ - this.state.lockTranslateX) * z), this.state.translateX = Xe, this.drawFrame()
            }

            onPanEnd(c) {
                console.log("!!!!!!!! PAN END"), this.slidesListingDom.style.cursor = null;
                const $ = Math.abs(this.state.translateX - this.state.startTranslateX),
                    z = this.state.slidesPerView > 1 ? .8 : .5;
                let se = Math.abs($) / (this.dimensions.slideWidth * z);
                return !this.state.centeredSlides && !this.onLastSlide && Math.abs(this.state.translateX - this.dimensions.width) >= this.dimensions.totalWidth ? this.nextSlides(null, [this.state.totalSlidesCount - 2, this.state.totalSlidesCount - 1, this.state.totalSlidesCount]) : (!this.state.centeredSlides && this.onLastSlide && this.state.hasRemainderSlide && (se = se >= .5 ? 1 : se), Math.floor(se) >= 1 ? this.state.translateX < this.state.startTranslateX ? this.nextSlides(Math.floor(se)) : this.prevSlides(Math.floor(se)) : c.isSwipe ? "right" === c.swipeDirection ? this.prevSlides(1) : "left" === c.swipeDirection ? this.nextSlides(1) : null : this.reset())
            }

            drawFrame() {
                this.resetAnimation && this.resetAnimation.kill(), jt.p8.set(this.slidesListingDom, {x: this.state.translateX})
            }

            onSlotChange(c) {
                this.storeSlideDoms(), this.updatePaneClasses(), this.setCarouselHeight()
            }

            storeSlideDoms() {
                const c = this.shadowRoot.getElementById("slidesSlot");
                this.slideDoms = c.assignedElements(), this.state.totalSlidesCount = this.slideDoms.length
            }

            updatePaneClasses() {
                this.slideDoms.forEach((c, $) => {
                    c.classList.remove(Qt_ALL, Qt_CURRENT), c.classList.add(Qt_ALL), -1 !== this.state.currentSlideIndexes.indexOf($) && c.classList.add(Qt_CURRENT)
                })
            }

            getTransToLastSlide() {
                return -1 * (this.dimensions.totalWidth - this.dimensions.width + 2 * this.dimensions.slideCenteringSideMargin)
            }

            getTransToFirstSlide() {
                const c = this.state.currentSlideIndexes[0];
                return -1 * (c * this.dimensions.slideWidth + this.state.spaceBetween * c)
            }

            reset({duration: c = .25, specialResetForEndOfSlides: $ = !1} = {}) {
                $ && (this.state.specialRemainderSlideActive = $);
                let z = this.state.specialRemainderSlideActive ? this.getTransToLastSlide() : this.getTransToFirstSlide();
                this.state.centeredSlides && this.onLastSlide && (z = this.getTransToLastSlide()), z !== this.state.translateX && (this.state.translateX = z, this.resetAnimation = jt.p8.to(this.slidesListingDom, {
                    duration: c,
                    x: this.state.translateX,
                    ease: "power2.inOut"
                })), this.setCarouselHeight()
            }

            setCarouselHeight() {
                if (this.state.centeredSlides) return !1;
                const c = this.getMaxCurrentSlideHeight();
                this.slidesListingDom.style.height = `${c}px`
            }

            getMaxCurrentSlideHeight() {
                return this.state.currentSlideIndexes.reduce(($, z) => {
                    const se = this.slideDoms[z];
                    return $ < se.offsetHeight ? se.offsetHeight : $
                }, 0)
            }

            emitSlideChange(c) {
                let $ = this.state.currentSlideIndexes;
                this.state.centeredSlides && ($ = $.map(this.onFirstSlide ? (z, se) => 0 === se ? null : z - 1 : this.onLastSlide ? (z, se) => se === $.length - 1 ? null : z : (z, se) => z - 1)), this.dispatchEvent(new CustomEvent("onSlideChange", {
                    detail: {
                        direction: c,
                        currentActiveSlides: $,
                        atEnd: this.onLastSlide,
                        atStart: this.onFirstSlide
                    }
                }))
            }

            incrementCurrentIndexes(c, $) {
                this.state.currentSlideIndexes = c || this.state.currentSlideIndexes.map(z => null === z ? 0 : z + $)
            }

            assignResponsiveVariables(c) {
                const $ = this.responsiveBreakpoints.filter(z => {
                    const se = parseInt(f.breakpointSizeMapping[z.minWidth], 10);
                    return c >= se
                }).sort((z, se) => {
                    const Ee = parseInt(f.breakpointSizeMapping[z.minWidth], 10);
                    return parseInt(f.breakpointSizeMapping[se.minWidth], 10) - Ee
                })[0];
                if ($) {
                    const {slidesPerView: z, spaceBetween: se, minWidth: Ee} = $,
                        Ge = parseInt(f.breakpointSizeMapping[Ee], 10);
                    c >= Ge && ("number" == typeof z && (this.state.slidesPerView = z), "number" == typeof se && (this.state.spaceBetween = se))
                } else this.state.slidesPerView = this.slidesPerView, this.state.spaceBetween = this.spaceBetween;
                1 === this.state.slidesPerView ? (this.state.spaceBetween = 0, this.state.centeredSlides = !1) : this.state.centeredSlides = this.centeredSlides, this.state.currentSlideIndexes.length !== Math.ceil(this.state.slidesPerView) && (this.state.currentSlideIndexes = Array(Math.ceil(this.state.slidesPerView)).fill(0).map((z, se) => se))
            }

            nextSlides(c = 1, $) {
                if (this.onLastSlide) return $ && this.incrementCurrentIndexes($), this.reset({specialResetForEndOfSlides: !0});
                this.incrementCurrentIndexes($, c), this.state.translateX = this.state.startTranslateX + (this.dimensions.slideWidth + this.state.spaceBetween) * c * -1, jt.p8.to(this.slidesListingDom, {
                    duration: .25,
                    x: this.state.translateX,
                    ease: "power2.inOut",
                    onComplete: () => {
                        this.reset(), this.updatePaneClasses(), this.emitSlideChange(this.direction)
                    }
                })
            }

            prevSlides(c = 1, $) {
                if (this.onFirstSlide || this.state.specialRemainderSlideActive) return this.state.specialRemainderSlideActive = !1, this.reset();
                this.incrementCurrentIndexes($, -1 * c), this.state.translateX = this.state.startTranslateX + (this.dimensions.slideWidth + this.state.spaceBetween) * c, jt.p8.to(this.slidesListingDom, {
                    duration: .25,
                    x: this.state.translateX,
                    ease: "power2.inOut",
                    onComplete: () => {
                        this.reset(), this.updatePaneClasses(), this.emitSlideChange(this.direction)
                    }
                })
            }

            gotoSlide(c) {
                if (c < 0 || c > this.state.totalSlidesCount - 1 || this.state.centeredSlides) return console.error("Error! Application requested a bad slide index:", c), !1;
                this.state.currentSlideIndexes = this.state.currentSlideIndexes.map(() => c).map(($, z) => $ + z), this.reset(), this.emitSlideChange()
            }

            handleResize() {
                const {width: c, height: $, left: z, top: se} = this.getBoundingClientRect();
                this.assignResponsiveVariables(c);
                const Ee = Math.floor(c - this.state.spaceBetween * (this.state.slidesPerView - 1)),
                    Ge = Math.floor(Ee / this.state.slidesPerView),
                    Xe = Math.floor(this.state.totalSlidesCount * Ge + this.state.spaceBetween * (this.state.totalSlidesCount - 1)),
                    yt = this.state.centeredSlides ? Math.floor(.5 * (c - Ge)) : 0;
                this.dimensions = {
                    width: c,
                    height: $,
                    slideWidth: Ge,
                    totalWidth: Xe,
                    slideCenteringSideMargin: yt,
                    left: z,
                    top: se
                }, this.debouncedResize(this.dimensions)
            }

            render() {
                return e.dy`
      <div class="slidesListing">
        <slot id="slidesSlot" @slotchange=${this.onSlotChange}></slot>
      </div>
    `
            }
        });
        var zs = n(89728), Os = n(19444);
        const ds = "20px";
        customElements.define("gu-checkbox-input", class extends e.oi {
            constructor() {
                super(...arguments), this.labelText = "", this.size = "normal", this.checked = !1, this.labelPlacement = "left", this.id = "", this.kind = "tag"
            }

            static get properties() {
                return {
                    kind: {type: String},
                    iconLigature: {type: String},
                    labelText: {type: String},
                    size: {type: String},
                    checked: {type: Boolean},
                    labelPlacement: {type: String},
                    id: {type: String}
                }
            }

            static get styles() {
                return e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  /* DEFAULTS ARE SMALL AND LEFT LABEL PLACEMENT */
  :host {
    display: flex;
    align-items: center;
    position: relative;
    min-height: ${(0, t.asCssProp)(ds)};
  }

  :host([size='large']) .checkmark {
    font-size: 20px;
    width: ${(0, t.asCssProp)("30px")};
    height: ${(0, t.asCssProp)("30px")};
  }

  :host([size='large']) .label {
    font-size: ${(0, t.asCssProp)(o.typography.simpleTextSizeMapping.small)};
  }

  :host([labelPlacement='right']) .checkboxLabel {
    padding-right: 15px;
    order: 1;
  }

  :host([labelPlacement='right']) .checkmark {
    order: 2;
    margin-left: auto;
    margin-right: 0;
  }

  :host(:hover) .checkmark {
    border-color: ${(0, t.asCssProp)(o.colors.gunmetal[300])};
  }

  .input {
    cursor: pointer;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    display: block;
    margin: 0;
  }

  .checkmark {
    width: ${(0, t.asCssProp)(ds)};
    height: ${(0, t.asCssProp)(ds)};
    border: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
    display: flex;
    flex-shrink: 0;
    font-size: 16px;
    margin-right: 15px;
    ${(0, t.asCssProp)(o.uifx.userSelect("none"))}
  }

  .label {
    position: relative;
  }

  .input:checked ~ .checkmark {
    border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
  }

  /*
  .input:checked ~ .label {
    color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
  }

  .input:checked ~ .checkmark {
    color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
  }
  */
`
            }

            onCheck() {
                this.checked = !this.checked, this.dispatchEvent(new CustomEvent("onCheck", {detail: {checked: this.checked}}))
            }

            render() {
                const {onCheck: c, checked: $, labelText: z, kind: se} = this, Ee = (0, Os.v4)();
                return e.dy`
      <input id=${Ee} type="checkbox" class="input" @change=${c} .checked=${$} />
      <gu-icon class="checkmark" iconLigature=${this.checked ? "checkbox_tick" : ""}></gu-icon>
      ${void 0 !== z ? e.dy`
            <label for=${Ee} class="label">
              <gu-simple-text .kind=${se}> ${(0, zs.A)(z)} </gu-simple-text>
            </label>
          ` : ""}
    `
            }
        }), n(62701);
        const js = ["days", "hours", "minutes", "seconds"];
        let Ot = class extends e.oi {
            constructor() {
                super(...arguments), this.darkBackground = !1, this.targetTime = 1755790779, this.showFields = js, this.size = "large", this.simpleTextDisplay = !1, this.simpleTextKind = "small", this.padZeroes = !1, this.getDelta = () => new Date(1e3 * this.targetTime).getTime() - (new Date).getTime(), this.getTimeRemaining = () => {
                    const c = this.getDelta();
                    let $ = Math.floor(c / 864e5), z = Math.floor(c % 864e5 / 36e5), se = Math.floor(c % 36e5 / 6e4),
                        Ee = Math.floor(c % 6e4 / 1e3);
                    return $ = $ < 0 ? 0 : $, z = z < 0 ? 0 : z, se = se < 0 ? 0 : se, Ee = Ee < 0 ? 0 : Ee, {
                        seconds: this.addPadding(`${Ee}`),
                        minutes: this.addPadding(`${se}`),
                        hours: this.addPadding(`${z}`),
                        days: this.addPadding(`${$}`)
                    }
                }, this.addPadding = c => c.length < 2 && this.padZeroes ? `0${c}` : c, this.getHeadingTextSize = c => "small" === c ? "small" : "large", this.getDividerHeadingTextSize = c => "small" === c ? "large" : "x-large", this.getSimpleTextKind = c => "small" === c ? "micro" : "small"
            }

            update(c) {
                c.has("targetTime") && this.initializeCounter(), c.has("simpleTextDisplay") && (this.simpleTextDisplay ? this.classList.add("simpleTextMode") : this.classList.remove("simpleTextMode")), super.update(c)
            }

            disconnectedCallback() {
                clearInterval(this.timer)
            }

            initializeCounter() {
                this.timeLeft = this.getTimeRemaining(), clearInterval(this.timer), this.timer = window.setInterval(() => {
                    this.timeLeft = this.getTimeRemaining(), this.getDelta() < 0 && (clearInterval(this.timer), this.dispatchEvent(new CustomEvent("onCountdownComplete")))
                }, 1e3)
            }

            maybePluralise(c, $) {
                return 1 === c ? $.replace(/s$/, "") : $
            }

            render() {
                return void 0 === this.timeLeft ? e.dy`` : this.simpleTextDisplay ? e.dy`
          ${this.showFields.map((c, $) => e.dy` <gu-simple-text .kind=${this.simpleTextKind} align="center">
              ${this.timeLeft[c]}
              ${$ < this.showFields.length - 1 ? e.dy`<span class="simpleTextDivider"> : </span>` : null}
            </gu-simple-text>`)}
        ` : e.dy`
          ${this.showFields.map((c, $) => e.dy`
              <div
                class=${(0, y.$)({digit: !0, [`digit--${this.size}`]: !0, darkBackground: this.darkBackground})}
              >
                <gu-heading-text size=${this.getHeadingTextSize(this.size)}> ${this.timeLeft[c]} </gu-heading-text>
                <gu-simple-text
                  kind=${this.getSimpleTextKind(this.size)}
                  align="center"
                  class="label"
                  .text=${this.maybePluralise(parseInt(this.timeLeft[c], 10), c)}
                ></gu-simple-text>
              </div>
              ${$ < this.showFields.length - 1 ? e.dy`<gu-heading-text
                    class="divider divider--${this.size}"
                    size=${this.getDividerHeadingTextSize(this.size)}
                    >:</gu-heading-text
                  >` : null}
            `)}
        `
            }
        };
        Ot.styles = e.iv`
    ${(0, t.asCssProp)((0, t.setBoxSizing)())}

    :host {
      display: flex;
      align-items: center;
    }

    :host(.simpleTextMode) {
      display: inline-flex;
    }

    .divider {
      color: ${(0, t.asCssProp)(o.colors.gold[500])};
      margin: ${(0, t.asCssProp)((0, i.gridUnits)(-11))} ${(0, t.asCssProp)((0, i.gridUnits)(.5))} 0;
      line-height: 1;
    }

    .divider--small {
      margin: ${(0, t.asCssProp)((0, i.gridUnits)(-9))} ${(0, t.asCssProp)((0, i.gridUnits)(.5))} 0;
    }

    .divider:last-child {
      display: none;
    }
    .label {
      text-transform: uppercase;
    }

    .digit {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .digit > gu-heading-text {
      width: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
      height: ${(0, t.asCssProp)((0, i.gridUnits)(22))};
      line-height: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
      background: url('/assets/images/countdown-timer/ui-embellishments--digit-background.svg') no-repeat;
      background-size: contain;
      background-position: center top;
      text-align: center;
    }

    .digit.darkBackground > gu-heading-text {
      background: url('/assets/images/countdown-timer/ui-embellishments--digit-dark-background.svg') no-repeat;
      background-size: contain;
      background-position: center top;
    }

    .digit--large > gu-heading-text {
      width: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
      height: ${(0, t.asCssProp)((0, i.gridUnits)(22))};
      line-height: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
      margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
    }

    .digit--small > gu-heading-text {
      width: ${(0, t.asCssProp)((0, i.gridUnits)(15))};
      height: ${(0, t.asCssProp)((0, i.gridUnits)(17))};
      line-height: ${(0, t.asCssProp)((0, i.gridUnits)(15))};
      margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(2.5))};
    }
  `, (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Boolean)], Ot.prototype, "darkBackground", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ot.prototype, "targetTime", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Array)], Ot.prototype, "showFields", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], Ot.prototype, "size", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Boolean)], Ot.prototype, "simpleTextDisplay", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], Ot.prototype, "simpleTextKind", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Boolean)], Ot.prototype, "padZeroes", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], Ot.prototype, "timeLeft", void 0), Ot = (0, r.gn)([(0, zt.M)("gu-countdown-timer")], Ot);
        const Ms = (0, t.asCssProp)(`${o.measurements.standardBorderSize} solid ${o.colors.gold[500]}`);
        customElements.define("gu-dropdown", class extends e.oi {
            constructor() {
                super(...arguments), this.expanded = !1, this.selectedId = "", this.items = [], this.placeholderText = ""
            }

            static get styles() {
                return e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    display: block;
    position: relative;
  }

  .dropdownToggle {
    display: block;
    cursor: pointer;
    border-bottom: ${Ms};
    ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
  }

  .dropdownToggle--expanded {
  }

  .dropdownMenu {
    position: absolute;
    height: 0px;
    right: 0;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    ${(0, t.asCssProp)(o.animation.standardTransition("height"))}
  }

  .dropdownMenu--expanded {
    height: auto;
    background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    border-right: ${Ms};
    padding: ${(0, t.asCssProp)(`${a.dz.gridUnits(2)}`)} 0;
    z-index: 1;
  }

  .dropdownMenu__item {
    padding: ${(0, t.asCssProp)(`${a.dz.gridUnits(2)} ${a.dz.gridUnits(4)};`)};
    cursor: pointer;
    margin: 0;
    white-space: nowrap;
    text-align: right;
  }

  .dropdownMenu__item--selected {
    ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
  }

  .dropdownMenu__item:hover {
    color: ${(0, t.asCssProp)(o.colors.light[100])};
  }
`
            }

            static get properties() {
                return {
                    expanded: {type: Boolean},
                    selectedId: {type: String},
                    items: {type: Array},
                    placeholderText: {type: String}
                }
            }

            toggleMenu(c) {
                c.stopPropagation(), this.expanded = !this.expanded
            }

            get selectedItem() {
                return this.items ? this.items.find(c => c.id === this.selectedId) : null
            }

            selectDropDownItem(c) {
                this.selectedId = c, this.expanded = !1, this.dispatchEvent(new CustomEvent("onSelect", {detail: {item: this.selectedItem}}))
            }

            render() {
                return e.dy`
      <gu-simple-text
        class=${(0, y.$)({dropdownToggle: !0, "dropdownToggle--expanded": this.expanded})}
        @click=${this.toggleMenu}
        kind="tag"
      >
        <gu-vertical-space bottom="x-small">
          ${this.selectedItem ? this.selectedItem.name : this.placeholderText}
        </gu-vertical-space>
      </gu-simple-text>

      <div
        class=${(0, y.$)({dropdownMenu: !0, "dropdownMenu--expanded": this.expanded})}
      >
        ${this.items.map(c => e.dy`
            <gu-simple-text
              class=${(0, y.$)({dropdownMenu__item: !0, "dropdownMenu__item--selected": c.id === this.selectedId})}
              @click=${() => this.selectDropDownItem(c.id)}
              kind="tag"
            >
              ${c.name}
            </gu-simple-text>
          `)}
      </div>
    `
            }
        }), n(99454);

        class $s extends e.oi {
            constructor() {
                super(...arguments), this.time = ""
            }

            static get styles() {
                return e.iv`
      :host {
        width: 84px;
      }
    `
            }

            start() {
                this.timer || (this.updateTime(), this.timer = setInterval(() => this.updateTime(), 1e3))
            }

            updateTime() {
                const c = new Date, $ = Math.floor((this.target.getTime() - c.getTime()) / 1e3), z = [];
                $ > 604800 && z.push(this.withUnit(Math.floor($ / 604800), "w")), $ > 86400 && z.push(this.withUnit(Math.floor($ % 604800 / 86400), "d")), $ > 3600 && z.push(this.withUnit(Math.floor($ % 86400 / 3600), "h")), $ > 60 && z.push(this.withUnit(Math.floor($ % 3600 / 60), "min")), z.push(this.withUnit($ % 60, "s")), this.time = z.join(" "), this.requestUpdate("time")
            }

            withUnit(c, $) {
                return `${Math.max(c, 0)}${$}`
            }

            stop() {
                this.timer && clearInterval(this.timer), this.time = "", this.timer = void 0, this.requestUpdate("time")
            }

            render() {
                return this.target ? this.start() : this.stop(), e.dy`${this.time}`
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Date)], $s.prototype, "target", void 0), customElements.define("gu-game-mode-timer", $s);

        class Jt extends e.oi {
            constructor() {
                super(...arguments), this.isRunning = !1, this.complete = !1, this.type = "", this.images = {
                    "": "",
                    tutorial: "/assets/images/game-modes/options/tutorial.png",
                    solo: "/assets/images/game-modes/options/solo.png",
                    "server-solo": "/assets/images/game-modes/options/solo.png",
                    ranked: "/assets/images/game-modes/options/ranked.png",
                    sealed: "/assets/images/game-modes/options/ranked.png",
                    "direct-challenge": "/assets/images/game-modes/options/direct-challenge.png"
                }
            }

            static get styles() {
                return e.iv`
      :host {
        height: 100%;
        display: flex;
        place-content: stretch stretch;
        overflow: hidden;
        margin: 0 0 0 -8px;
        padding: 0 8px;
      }

      .game-mode-options {
        display: flex;
        flex: 1 1 auto;
        flex-direction: column;
        background: linear-gradient(
            180deg,
            rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.gunmetal[900]))}, 0.7) 0%,
            #0c1620 100%
          ),
          var(--image, ''), ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        background-size: cover;
        background-position: center;
        box-shadow: -2px 0 8px rgba(0, 0, 0, 0.75);
        place-content: stretch stretch;
        opacity: 1;
        transition: opacity 0.25s ease, transform 0.25s cubic-bezier(0.42, 0.01, 0.54, 1.31);
        overflow: hidden;
        padding: 12px;
      }

      .game-mode-options--hidden {
        opacity: 0;
        transform: translateX(100%);
      }

      .game-mode-options__actions {
        margin: 16px 0 0 0;
      }

      .game-mode-options__scroll-area {
        flex: 1 1 auto;
        overflow: hidden;
        overflow-y: scroll;
        display: flex;
        flex-direction: column;
        place-content: stretch flex-start;
        margin: -12px -8px -12px -12px;
        padding: 12px 4px 12px 12px;
        -webkit-mask-image: linear-gradient(0deg, transparent, black 16px, black calc(100% - 16px), transparent);
      }

      ${(0, t.asCssProp)((0, t.styleScrollbars)(".game-mode-options__scroll-area"))}

      .game-mode-options__timer,
      .game-mode-options__description {
        margin: 4px 0;
      }

      .game-mode-options__extra {
        vertical-align: baseline;
        transform: translateY(3px) scale(90%);
      }
    `
            }

            startGame() {
                this.dispatchEvent(new CustomEvent("startGame", {detail: Object.assign({}, this.gameMode)}))
            }

            renderStartButton() {
                return e.dy`
      <gu-button-group class="game-mode-options__actions">
        <gu-gilded-hex-button
          data-test-id="launch-game-cta"
          size="large"
          .disabled=${this.isRunning || !this.complete}
          .loading=${this.isRunning}
          @click=${this.startGame}
        >
          Start
        </gu-gilded-hex-button>
      </gu-button-group>
    `
            }

            renderActions() {
                return this.renderStartButton()
            }

            renderHeader() {
                var c, $, z, se;
                return e.dy`
      <gu-vertical-space bottom="small" data-test-id="game-mode-options-header">
        <gu-heading-text
          class="game-mode-options__title"
          size="x-small"
          data-test-id="game-mode-title"
          fillGradient="gradients.gold.simple"
        >
          ${null !== ($ = null === (c = this.gameMode) || void 0 === c ? void 0 : c.name) && void 0 !== $ ? $ : ""} ${this.renderTitleExtras()}
        </gu-heading-text>
        ${this.renderCountdownTimer()}
        <gu-paragraph-text
          class="game-mode-options__description"
          kind="micro"
          fillColor="white"
          data-test-id="game-mode-description"
        >
          ${null !== (se = null === (z = this.gameMode) || void 0 === z ? void 0 : z.description) && void 0 !== se ? se : ""}
        </gu-paragraph-text>
      </gu-vertical-space>
    `
            }

            renderCountdownTimer() {
                var c, $;
                return null !== ($ = null === (c = this.gameMode) || void 0 === c ? void 0 : c.expiry) && void 0 !== $ && $ ? Math.floor((this.gameMode.expiry.getTime() - (new Date).getTime()) / 1e3) > 7776e3 ? e.dy`` : e.dy`
      <gu-paragraph-text
        class="game-mode-options__timer"
        kind="micro"
        fontWeight="bold"
        fillColor="${(0, t.asCssProp)(o.colors.gunmetal[100])}"
      >
        <gu-game-mode-timer .target=${this.gameMode.expiry} data-test-id="game-mode-timer"></gu-game-mode-timer>
      </gu-paragraph-text>
    ` : e.dy``
            }

            renderTitleExtras() {
                var c, $;
                return null !== ($ = null === (c = this.gameMode) || void 0 === c ? void 0 : c.ranked) && void 0 !== $ && $ ? e.dy`<gu-icon class="game-mode-options__extra" iconLigature="flux_symbol"></gu-icon>` : e.dy``
            }

            render() {
                var c;
                return this.gameMode && (this.type = this.gameMode.key), this.style.setProperty("--image", `url(${null !== (c = this.images[this.type]) && void 0 !== c ? c : ""})`), e.dy`
      <div
        class=${(0, y.$)({
                    "game-mode-options": !0,
                    [`game-mode-options--${this.type}`]: "" !== this.type,
                    "game-mode-options--hidden": "" === this.type
                })}
      >
        <div class="game-mode-options__scroll-area">
          ${this.renderHeader()}
          <slot class="game-mode-options__body" data-test-id="game-mode-options-body"></slot>
        </div>
        ${this.renderActions()}
      </div>
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Jt.prototype, "gameMode", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Jt.prototype, "isRunning", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], Jt.prototype, "error", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Jt.prototype, "complete", void 0), customElements.define("gu-game-mode-panel", Jt), customElements.define("gu-game-modes", class extends e.oi {
            constructor() {
                super(...arguments), this.gameModes = [], this.images = {
                    tutorial: "/assets/images/game-modes/selector/tutorial.png",
                    solo: "/assets/images/game-modes/selector/solo.png",
                    "server-solo": "/assets/images/game-modes/selector/solo.png",
                    ranked: "/assets/images/game-modes/selector/ranked.png",
                    sealed: "/assets/images/game-modes/selector/ranked.png",
                    "direct-challenge": "/assets/images/game-modes/selector/direct-challenge.png"
                }
            }

            static get properties() {
                return {gameModes: {type: Array}, active: {type: Object}}
            }

            static get styles() {
                return e.iv`
      :host {
        font-size: 0 !important;
        line-height: 0 !important;
        width: 100%;
        height: 100%;
        display: block;
        overflow-y: scroll;
      }

      :host::-webkit-scrollbar {
        display: none;
      }

      .game-modes {
        display: flex;
        flex-direction: column;
        padding: 4px 12px 4px 8px;
        margin: 0;
        position: relative; // apply stacking context on iOS, thereby avoiding scrolling issues
        z-index: 1; // apply stacking context on iOS, thereby avoiding scrolling issues
      }

      .game-mode-tile {
        display: block;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        border-radius: 4px;
        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.4);
        background-position: center center;
        background-size: cover;
        margin: 4px 0;
        transition: transform 0.5s ease;
        user-select: none;
      }

      .game-mode-tile--active {
        transform: translateX(4px);
      }

      .game-mode-tile--active .game-mode-tile__link {
        border: 1px solid #54bbcd;
        box-shadow: 0 0 8px #8be1e0;
      }

      .game-mode-tile__link {
        display: block;
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        background: linear-gradient(270deg, rgba(15, 27, 39, 0.2) 0%, rgba(15, 27, 39, 0.7) 43.4%, #0f1b27 100%);
        padding: 8px 12px 8px 12px;
        border-radius: 4px;
        text-decoration: none;
        height: 54px;
        position: relative;

        -webkit-touch-callout: none;
        -webkit-user-drag: none;
      }

      .game-mode-tile__title {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        margin: 0 0 8px 0;
      }

      .game-mode-tile__title,
      .game-mode-tile__description {
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.75);
      }

      .game-mode-tile__description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .game-mode-tile__extra {
        position: absolute;
        font-size: 24px;
        right: 4px;
        top: 4px;
        text-color: black;
        background: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
        border-radius: 4px;
        box-shadow: 0 2px 2px rgba(0, 0, 0, 0.5);
        padding: 2px;
      }

      ${(0, t.asCssProp)((0, t.listReveal)(".game-mode-tile"))}
    `
            }

            onClick(c) {
                this.active = c, this.dispatchEvent(new CustomEvent("gameModeSelection", {
                    detail: c,
                    bubbles: !0,
                    composed: !0
                }))
            }

            renderTile(c) {
                var $;
                return e.dy`
      <li
        class=${(0, y.$)({"game-mode-tile": !0, "game-mode-tile--active": this.active && this.active.key === c.key})}
        style="background-image: url(${null !== ($ = this.images[c.key]) && void 0 !== $ ? $ : this.images.solo});"
      >
        <a
          class="game-mode-tile__link"
          data-test-id="game-mode-tile-link"
          href="javascript:void(0)"
          @click=${() => this.onClick(c)}
        >
          <gu-heading-text class="game-mode-tile__title" size="2x-small" fillColor="${o.colors.light[100]}">
            ${c.name}
          </gu-heading-text>
          <gu-paragraph-text class="game-mode-tile__description" kind="micro" fillColor="${o.colors.light[100]}">
            ${c.description}
          </gu-paragraph-text>
          ${this.renderExtras(c)}
        </a>
      </li>
    `
            }

            renderExtras(c) {
                return c.ranked ? e.dy`
        <div class="game-mode-tile__extra">
          <gu-icon iconLigature="flux_symbol" fillColor="black"></gu-icon>
        </div>
      ` : e.dy``
            }

            render() {
                return e.dy`
      <ul class="game-modes">
        ${this.gameModes.map(c => this.renderTile(c))}
      </ul>
    `
            }
        }), customElements.define("gu-queue-timer", class extends e.oi {
            constructor() {
                super(...arguments), this.time = "00:00"
            }

            static get properties() {
                return {started: {type: Object}}
            }

            static get styles() {
                return e.iv`
      :host {
        width: 84px;
      }
    `
            }

            start() {
                this.timer || (this.timer = setInterval(() => {
                    const c = new Date, $ = Math.floor((c.getTime() - this.started.getTime()) / 1e3),
                        z = ("00" + Math.floor($ / 60)).substr(-2, 2), se = ("00" + $ % 60).substr(-2, 2);
                    this.time = `${z}:${se}`, this.requestUpdate("time")
                }, 1e3))
            }

            stop() {
                this.timer && clearInterval(this.timer), this.time = "00:00", this.timer = void 0, this.requestUpdate("time")
            }

            render() {
                return this.started ? this.start() : this.stop(), e.dy` <gu-heading-text size="medium" data-test-id="queue-time">${this.time}</gu-heading-text> `
            }
        }), customElements.define("gu-game-queue-panel", class extends e.oi {
            constructor() {
                super(...arguments), this.type = "queue"
            }

            static get properties() {
                return {gameMode: {type: Object}, type: {type: String}, queueStarted: {type: Date}}
            }

            static get styles() {
                return e.iv`
      :host {
        position: absolute;
        width: 100%;
        bottom: 0;
        height: 0;
        transition: transform 1s ease;
        transform: translateY(70px);
      }

      :host(.visible) {
        transform: translateY(0);
      }

      .game-queue-panel__finish {
        content: '';
        position: absolute;
        bottom: 0;
        display: block;
        height: 4px;
        width: 100%;
        left: 0;
        background: ${(0, t.asCssProp)(o.gradients.gold.mirror("left"))};
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        box-shadow: -2px 0 8px rgba(0, 0, 0, 0.75);
      }

      .game-queue-panel__content {
        position: absolute;
        bottom: 0;
        left: 50%;
        height: 60px;
        width: 50%;
        display: flex;
        place-content: stretch stretch;
        overflow: hidden;
      }

      .game-queue-panel__content::before {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        transform: skew(-15deg) translateX(15px);
        display: block;
        height: 60px;
        width: 50vw;
        background: ${(0, t.asCssProp)(o.gradients.gunmetal.simple("left"))};
        box-shadow: -2px 0 8px rgba(0, 0, 0, 0.75);
        z-index: -1;
      }

      .game-queue-panel__left,
      .game-queue-panel__right {
        display: flex;
        place-content: center;
        flex: 1 1 auto;
        width: 40%;
      }

      .game-queue-panel__devider {
        width: 2px;
        flex: 0 0 auto;
        background: linear-gradient(180deg, rgba(198, 160, 82, 0) 0%, #fff2d8 50.99%, rgba(198, 160, 82, 0) 100%);
        margin: 8px 12px 12px 12px;
      }

      .game-queue-panel__left {
        text-align: right;
        padding-left: 28px;
        flex-direction: column;
      }

      .game-queue-panel__right {
        flex-direction: row;
        place-items: center;
        gap: 8px;
        flex-wrap: nowrap;
        flex: 0 1 0;
        padding-right: 8px;
      }

      .ellipsis {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    `
            }

            handleCancelButton() {
                this.dispatchEvent(new CustomEvent("cancel", {detail: this.gameMode}))
            }

            render() {
                return this.classList.toggle("visible", !!this.gameMode), e.dy`
      <div
        data-test-id="game-queue-panel-panel"
        class=${(0, y.$)({
                    "game-queue-panel__content": !0,
                    [`game-queue-panel__content--type-${this.gameMode ? this.gameMode.key : ""}`]: !!this.gameMode
                })}
        data-test-id="game-queue-panel"
      >
        <div class="game-queue-panel__left">
          <gu-simple-text kind="tag" fillColor="${o.colors.gunmetal[100]}" align="right">
            ${this.gameMode ? "In Queue" : " "}
          </gu-simple-text>
          <gu-heading-text class="ellipsis" size="x-small" fillColor="white" align="right">
            ${this.gameMode ? this.gameMode.name : " "}
          </gu-heading-text>
        </div>
        <div class="game-queue-panel__devider"></div>
        <div class="game-queue-panel__right">
          <gu-queue-timer data-test-id="queue-timer" .started=${this.queueStarted}></gu-queue-timer>
          <gu-circular-close-button
            data-test-id="queue-cancel-button"
            @click=${this.handleCancelButton}
          ></gu-circular-close-button>
        </div>
      </div>
      <div class="game-queue-panel__finish"></div>
    `
            }
        });
        let gs = class extends e.oi {
            render() {
                return e.dy`<slot></slot>`
            }
        };
        gs.styles = e.iv`
    ${(0, t.asCssProp)((0, t.setBoxSizing)())}
    :host {
      height: ${(0, t.asCssProp)(`${o.measurements.standardHeaderAlertBarHeight}px`)};
      position: relative;
      display: flex;
      background: ${(0, t.asCssProp)(o.colors.light[100])};
    }
  `, gs = (0, r.gn)([(0, zt.M)("gu-header-alert-bar")], gs);
        const Xt = (0, i.gridUnits)(5), Js = (0, i.gridUnits)(5), Is = (0, i.gridUnits)(8), Ds = (0, i.gridUnits)(10),
            Xs = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    width: 100%;
    height: ${o.measurements.standardHeaderHeight}px;
    display: flex;
    justify-content: center;
    position: relative;
  }

  .userArea {
    position: absolute;
    top: 0;
    right: 0;
  }

  .menuToggleButton {
    cursor: pointer;
    padding: 0 ${(0, t.asCssProp)(Xt)};
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(7))};
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    ${(0, t.asCssProp)(o.animation.slowTransition("transform"))};
  }

  .menuToggleButton--open {
    transform: rotate(180deg);
  }

  .notificationBubble {
    position: absolute;
    top: ${(0, t.asCssProp)((0, i.gridUnits)(6.7))};
    left: ${(0, t.asCssProp)((0, i.gridUnits)(10.5))};
    opacity: 1;
    ${(0, t.asCssProp)(o.animation.slowTransition("opacity"))};
    background: var(--gu-yellow);
  }

  .notificationBubble--hide {
    opacity: 0;
  }

  .logoArea {
    display: flex;
    align-items: center;
    cursor: pointer;
    visibility: hidden;
    width: 16px;
  }

  .logoArea__guIcon {
    width: ${(0, t.asCssProp)(Is)};
    height: ${(0, t.asCssProp)(Is)};
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    display: none;
  }

  .logoArea__guIcon__img {
    display: block;
    width: 100%;
  }

  .logoArea__guWordMark {
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["2x-small"])}) {
    .logoArea__guIcon {
      display: block;
    }
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
    :host {
      justify-content: flex-start;
    }

    .notificationBubble {
      display: none;
    }

    .menuToggleButton,
    .logoArea__guWordMark {
      display: none;
    }

    .logoArea {
      padding: 0 ${(0, t.asCssProp)(Js)};
    }

    .logoArea__guIcon {
      width: ${(0, t.asCssProp)(Ds)};
      height: ${(0, t.asCssProp)(Ds)};
      margin: 0;
    }
  }
`;
        var wt = n(4390), qs = n(97223);
        const Ls = "TOGGLE_NAV", Us = "CLOSE_NAV", Rs = "TOGGLE_SUB_MENU", Bs = "UPDATE_CURRENT_ROUTE",
            Fs = "CLOSE_ALL_SUB_MENUS", Gs = "TOGGLE_USER_MENU", Zs = "CLOSE_USER_MENU", Wt = () => ({type: Us}),
            hs = G => ({type: Bs, payload: G}),
            is = {currentRoute: "", navMenuOpen: !1, navSubMenusOpen: {}, userMenuOpen: !1},
            kt = (0, qs.MT)((G = is, {type: c, payload: $}) => {
                switch (c) {
                    case Ls:
                        return Object.assign(Object.assign({}, G), {navMenuOpen: !G.navMenuOpen, userMenuOpen: !1});
                    case Us:
                        return Object.assign(Object.assign({}, G), {navSubMenusOpen: {}, navMenuOpen: !1});
                    case Rs:
                        return Object.assign(Object.assign({}, G), {navSubMenusOpen: {[$]: !G.navSubMenusOpen[$]}});
                    case Fs:
                        return Object.assign(Object.assign({}, G), {navSubMenusOpen: {}});
                    case Bs:
                        return Object.assign(Object.assign({}, G), {currentRoute: $});
                    case Gs:
                        return Object.assign(Object.assign({}, G), {userMenuOpen: !G.userMenuOpen, navMenuOpen: !1});
                    case Zs:
                        return Object.assign(Object.assign({}, G), {userMenuOpen: !1});
                    default:
                        return G
                }
            }, is), xn = {
                navigationItems: {type: Array},
                loggedIn: {type: Boolean},
                router: {type: Object},
                ngZone: {type: Object}
            };
        customElements.define("gu-header-bar", (0, ge.x)({
            renderer: function ({navigationItems: G, router: c, ngZone: $}) {
                if (!G) return null;
                const z = (0, p.v9)({store: kt, selector: St => St.navMenuOpen}),
                    se = (0, p.I0)(kt), [Ee, Ge] = (0, Q.eJ)(!1), Xe = () => {
                        se(Wt()), (0, wt.pR)(c, $, G.home.path), this.dispatchEvent(new CustomEvent("onLogoClick"))
                    };
                return (0, Q.d4)(() => {
                    Ge((() => {
                        if (!G) return !1;
                        let St = !1;
                        e:for (const It of Object.keys(G)) {
                            const ft = G[It];
                            if (ft.children) {
                                for (const Ae of Object.keys(ft.children)) if (ft.children[Ae].showNotificationBubble) {
                                    St = !0;
                                    break e
                                }
                            } else if (ft.showNotificationBubble) {
                                St = !0;
                                break e
                            }
                        }
                        return St
                    })())
                }, [G]), e.dy`
    <gu-icon
      class="menuToggleButton ${z ? "menuToggleButton--open" : ""}"
      iconLigature=${z ? "close_x" : "hamburger_menu"}
      @click=${St => {
                    St.cancelBubble = !0, se({type: Ls})
                }}
      fillColor=${o.colors.gunmetal[100]}
    >
    </gu-icon>
    ${Ee ? e.dy`
          <gu-notification-bubble class="notificationBubble ${z ? "notificationBubble--hide" : ""}">
          </gu-notification-bubble>
        ` : null}
    <div class="logoArea" @click=${() => Xe()}>
      <picture class="logoArea__guIcon">
        <source type="image/webp" srcset="/assets/images/internal-logos/logo--gods-unchained-icon.webp" />
        <source type="image/png" srcset="/assets/images/internal-logos/logo--gods-unchained-icon.png" />
        <img
          class="logoArea__guIcon__img"
          alt="A digital trading card game where you can trade cards you purchase or earn for real-world currency."
          src="/assets/images/internal-logos/logo--gods-unchained-icon.png"
        />
      </picture>

      <gu-heading-text
        class="logoArea__guWordMark"
        size="3x-small"
        .responsiveSize=${[{breakpoint: "2x-small", size: "2x-small"}]}
      >
        Gods Unchained
      </gu-heading-text>
    </div>

    <gu-menu .router=${c} .ngZone=${$} .navigationItems=${G}></gu-menu>

    <div class="userArea">
      <slot name="userArea"></slot>
    </div>
  `
            }, props: {properties: xn, styles: Xs}
        }));
        var Sn = n(92198), Pn = n(11735);
        const wn = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    position: absolute;
    top: ${o.measurements.standardHeaderHeight}px;
    height: calc(100vh - ${o.measurements.standardHeaderHeight}px);
    width: 100%;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    list-style: none;
    margin: 0;
    padding: 0 ${(0, t.asCssProp)(Xt)};
    transform: translateX(-101%);
    ${(0, t.asCssProp)(o.animation.slowTransition("transform"))};
    display: flex;
    flex-direction: column;
    overflow: hidden;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: ${(0, t.asCssProp)(o.colors.gunmetal[500])} ${(0, t.asCssProp)(o.colors.gunmetal[900])};
  }

  :host::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  :host::-webkit-scrollbar-track {
    background: var(--gu-blue-dark);
  }

  :host::-webkit-scrollbar-thumb {
    background: var(--gu-blue);
    box-shadow: none;
  }

  :host::-webkit-scrollbar-corner {
    background-color: var(--gu-blue-dark);
  }

  :host(.open) {
    transform: translateX(0);
  }

  .menuItem {
    flex-shrink: 0;
    flex-grow: 0;
    cursor: pointer;
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(5))} 0;
    
    text-transform: uppercase;
    white-space: nowrap;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    position: relative;
  }

  .menuItem__icon {
    display: block;
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(-1))};
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    line-height: 0;
  }

  .menuItem__longName + .menuItem__shortName {
    display: none;
  }

  .menuItem__caret {
    display: block;
    line-height: 0;
    transform-origin: center;
    ${(0, t.asCssProp)(o.animation.slowTransition("transform"))};
  }

  .menuItem__externalIcon {
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(-1))};
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    line-height: 0;
  }

  .menuItem__caret--rotated {
    transform: rotate(180deg);
  }

  .menuItem > * {
    color: var(--gu-blue);
  }

  .menuItem--selected > *:not(gu-sub-menu):not(gu-notification-bubble) {
    background: var(--gu-yellow);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .menuItem--opened > * {
    color: var(--gu-gray);
  }

  gu-notification-bubble {
    position: absolute;
    right: 0;
    top: ${(0, t.asCssProp)((0, i.gridUnits)(7))};
    ${(0, t.asCssProp)(o.animation.slowTransition("opacity"))};
  }

  .menuItem--opened gu-notification-bubble {
    opacity: 0;
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
    :host {
      position: relative;
      transform: translateX(0);
      background: transparent;
      flex-direction: row;
      top: auto;
      width: auto;
      height: auto;
      padding: 0;
      overflow: unset;
    }

    .menuItem {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(6.5))};
      padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(1))};
      border: none;
    }

    .menuItem--hasSubMenu {
      padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(4.5))};
    }

    .menuItem--isExternal {
      padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    }

    .menuItem:last-of-type {
      margin: 0;
    }

    .menuItem:hover > * {
      color: var(--gu-blue-hover);
    }

    .menuItem__icon {
      margin: 0 0 ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    }

    .menuItem__longName {
      display: none;
    }

    .menuItem__longName + .menuItem__shortName {
      display: block;
    }

    .menuItem__caret {
      position: absolute;
      right: 0;
      bottom: ${(0, t.asCssProp)((0, i.gridUnits)(4.5))};
    }

    .menuItem__externalIcon {
      margin: 0;
      position: absolute;
      right: 0;
      bottom: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
      font-size: ${(0, t.asCssProp)((0, i.gridUnits)(2.75))};
    }

    gu-notification-bubble {
      top: ${(0, t.asCssProp)((0, i.gridUnits)(4.5))};
      right: 50%;
      transform: translateX(150%);
    }
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-large"])}) {
    .menuItem {
      flex-direction: row;
      padding: 0;
      margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    }

    .menuItem--hasSubMenu {
      padding-right: 0;
    }

    .menuItem__icon {
      position: static;
      margin: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))} ${(0, t.asCssProp)((0, i.gridUnits)(2))} 0 0;
      top: unset;
      left: unset;
      transform: unset;
    }

    .menuItem--hasSubMenu .menuItem__caret {
      position: relative;
      right: auto;
      bottom: auto;
    }

    .menuItem__longName {
      display: block;
    }

    .menuItem__longName + .menuItem__shortName {
      display: none;
    }

    gu-notification-bubble {
      top: 50%;
      right: auto;
      left: ${(0, t.asCssProp)((0, i.gridUnits)(3.4))};
      transform: translate(0%, -170%);
    }

    .menuItem--hasSubMenu gu-notification-bubble {
      margin-right: 0;
    }
  }
`;
        customElements.define("gu-menu", (0, ge.x)({
            renderer: function ({navigationItems: G, router: c, ngZone: $}) {
                const z = (0, p.v9)({store: kt, selector: Ae => Ae.navMenuOpen}),
                    se = (0, p.v9)({store: kt, selector: Ae => Ae.currentRoute}),
                    Ee = (0, p.v9)({store: kt, selector: Ae => Ae.navSubMenusOpen}), Ge = (0, p.I0)(kt);
                (0, Q.d4)(() => {
                    Ge(hs(c.url));
                    const Ae = c.events.pipe((0, Sn.h)(Re => Re instanceof Pn.m2)).subscribe(Re => {
                        Ge(hs(Re.url))
                    });
                    return () => {
                        Ae.unsubscribe()
                    }
                }, []), (0, Q.d4)(() => {
                    z ? this.classList.add("open") : this.classList.remove("open")
                }, [z]);
                const Xe = Ae => {
                    this.dispatchEvent(new CustomEvent("onMenuDropDownOpen", {
                        detail: {navItem: Ae},
                        bubbles: !0,
                        composed: !0
                    })), Ge((G => ({type: Rs, payload: G}))(Ae.path))
                }, Nt = Ae => Ae.children ? Xe(Ae) : (Ae => {
                    Ae(), Ge(Wt())
                })(Ae.url ? () => {
                    this.dispatchEvent((0, wt.Cs)(Ae)), (0, wt.rb)(Ae)
                } : () => (0, wt.pR)(c, $, Ae.path)), St = Ae => {
                    let Re = !1;
                    const {children: $t} = Ae;
                    return ("/" === se && "home" === Ae.shortName || -1 !== se.indexOf(Ae.path) && "home" !== Ae.shortName || !!$t && (0, wt.M0)($t, se)) && (Re = !0), Re
                }, It = Ae => !!Ee[Ae.path];
                return e.dy`
    ${Object.keys(G).map(Ae => {
                    const Re = G[Ae], $t = !Re.children && !!Re.url;
                    return e.dy`
        <div
          class=${(0, y.$)({
                        menuItem: !0,
                        "menuItem--selected": St(Re),
                        "menuItem--opened": It(Re),
                        "menuItem--hasSubMenu": !!Re.children,
                        "menuItem--isExternal": $t
                    })}
          @click=${() => Nt(Re)}
        >
          <gu-icon class="menuItem__icon" iconLigature=${Re.icon}> </gu-icon>
          ${Re.longName ? e.dy`
                <gu-simple-text
                  class="menuItem__longName"
                  kind="large"
                  fontWeight="bold"
                  .responsiveKind=${[{breakpoint: "small", kind: "tag"}]}
                >
                  ${Re.longName}
                </gu-simple-text>
              ` : null}

          <gu-simple-text
            class="menuItem__shortName"
            kind="large"
            fontWeight="bold"
            .responsiveKind=${[{breakpoint: "small", kind: "tag"}]}
          >
            ${Re.shortName}
          </gu-simple-text>

          ${$t ? e.dy` <gu-icon class="menuItem__externalIcon" iconLigature="leave_website"></gu-icon> ` : null}
          ${Re.children ? e.dy`
                <gu-icon
                  class=${(0, y.$)({menuItem__caret: !0, "menuItem__caret--rotated": It(Re)})}
                  iconLigature="caret_down"
                ></gu-icon>
                <gu-sub-menu
                  .router=${c}
                  .ngZone=${$}
                  .subMenuItems=${Re.children}
                  .topLevelPath=${Re.path}
                ></gu-sub-menu>
              ` : null}
          ${Re.showNotificationBubble || (Ae => !!Ae.children && Object.keys(Ae.children).reduce((Re, $t) => {
                        const ot = Ae.children[$t];
                        return !(!ot || !ot.showNotificationBubble) || Re
                    }, !1))(Re) ? e.dy` <gu-notification-bubble></gu-notification-bubble> ` : null}
        </div>
      `
                })}
  `
            },
            props: {
                properties: {navigationItems: {type: Array}, router: {type: Object}, ngZone: {type: Object}},
                styles: wn
            }
        }));
        const En = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    display: flex;
    flex-flow: column;
    color: ${(0, t.asCssProp)(o.colors.light[500])};
    overflow: hidden;
    max-height: 0px;
    padding-top: 0px;
    opacity: 0;
    width: 100%;
    ${(0, t.asCssProp)(o.animation.slowTransition("opacity"))};
    transition-property: max-height, padding, opacity;
  }

  .subMenu {
    margin: 0;
    padding: 0 0 0 ${(0, t.asCssProp)((0, i.gridUnits)(7))};
    list-style: none;
  }

  .subMenu__item {
    padding-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    color: ${(0, t.asCssProp)(o.colors.light[100])};
    line-height: 1;
    position: relative;
    white-space: normal;
  }

  .subMenu__item:last-of-type {
    padding-bottom: 0;
  }

  .subMenu__item--selected {
    ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
  }

  :host(.open) {
    max-height: calc(var(--maxHeight) + ${(0, t.asCssProp)((0, i.gridUnits)(5))});
    opacity: 1;
    padding-top: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
  }

  gu-notification-bubble {
    position: absolute;
    right: 0;
    top: ${(0, t.asCssProp)((0, i.gridUnits)(1.75))};
  }

  .item__externalIcon {
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(4.75))};
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
    :host {
      position: absolute;
      top: 100%;
      left: ${(0, t.asCssProp)((0, i.gridUnits)(-4))};
      width: ${(0, t.asCssProp)((0, i.gridUnits)(36))};
      padding: 0;
      z-index: 1;
    }

    :host::after {
      content: '';
      display: block;
      height: var(--maxHeight);
      width: 100%;
    }

    :host(.open) {
      max-height: var(--maxHeight);
      padding: 0;
      box-shadow: 0px ${(0, t.asCssProp)((0, i.gridUnits)(.5))} ${(0, t.asCssProp)((0, i.gridUnits)(3))} 0px
        rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.black))}, 0.5);
    }

    .subMenu {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      padding: 0;
      border-left: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      border-right: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      border-top: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    }

    .subMenu__item,
    .subMenu__item:last-of-type {
      padding: ${(0, t.asCssProp)((0, i.gridUnits)(3))} ${(0, t.asCssProp)((0, i.gridUnits)(4))};
      border-bottom: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    }

    .subMenu__item:hover {
      background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    }

    .subMenu__item--selected:hover {
      ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
    }

    .item__externalIcon {
      font-size: ${(0, t.asCssProp)((0, i.gridUnits)(3.5))};
      margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(.75))};
    }

    gu-notification-bubble {
      right: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
      top: 50%;
      transform: translateY(-50%);
    }
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.large)}) {
    :host {
      left: 0;
    }
  }
`;
        customElements.define("gu-sub-menu", (0, ge.x)({
            renderer: function ({topLevelPath: G, subMenuItems: c, router: $, ngZone: z}) {
                const se = (0, p.v9)({store: kt, selector: ot => ot.navSubMenusOpen}),
                    Ee = (0, p.v9)({store: kt, selector: ot => ot.currentRoute}), Ge = (0, p.I0)(kt), Xe = ot => {
                        ot.url ? (this.dispatchEvent((0, wt.Cs)(ot)), (0, wt.rb)(ot)) : (Ge(Wt()), (0, wt.pR)($, z, ot.path))
                    }, Nt = ot => Ee.includes(ot.path), St = Es()(() => {
                        this.style.setProperty("--maxHeight", `${ft.offsetHeight}px`)
                    }, 500), It = new E.do(ot => {
                        ot.forEach(() => St())
                    });
                let ft;
                (0, Q.d4)(() => (ft = this.shadowRoot.querySelector(".subMenu"), It.observe(ft), () => It.unobserve(ft)), []);
                const Re = () => {
                    document.removeEventListener("click", $t)
                }, $t = ot => {
                    Ge({type: Fs})
                };
                return (0, Q.d4)(() => (se[G] ? (this.classList.add("open"), setTimeout(() => {
                    document.addEventListener("click", $t)
                })) : (this.classList.remove("open"), Re()), () => Re()), [se]), e.dy`
    <ul class="subMenu">
      ${Object.keys(c).map(ot => {
                    const tt = c[ot], Dt = {subMenu__item: !0, "subMenu__item--selected": Nt(tt)};
                    return e.dy`
          <li
            class=${(0, y.$)(Dt)}
            @click=${jn => {
                        jn.cancelBubble = !0, Xe(tt)
                    }}
          >
            ${tt.longName ? e.dy`
                  <gu-simple-text
                    class="item__longName"
                    kind="large"
                    .responsiveKind=${[{breakpoint: "small", kind: "tag"}]}
                  >
                    ${tt.longName}
                  </gu-simple-text>
                ` : null}

            <gu-simple-text
              class="item__shortName"
              kind="large"
              .responsiveKind=${[{breakpoint: "small", kind: "tag"}]}
            >
              ${tt.shortName}
            </gu-simple-text>

            ${tt.url ? e.dy` <gu-icon class="item__externalIcon" iconLigature="leave_website"></gu-icon> ` : null}
            ${tt.showNotificationBubble ? e.dy` <gu-notification-bubble></gu-notification-bubble> ` : null}
          </li>
        `
                })}
    </ul>
  `
            },
            props: {
                properties: {
                    subMenuItems: {type: Array},
                    router: {type: Object},
                    ngZone: {type: Object},
                    topLevelPath: {type: String}
                }, styles: En
            }
        }));
        const rn = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    display: block;
    height: ${bt.standardHeaderHeight}px;
  }

  gu-user-details {
    padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
  }

  .signedOutArea {
    height: 100%;
    display: flex;
    align-items: center;
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(4))} 0;
    padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
  }

  .signedOutArea__signInButton {
    cursor: pointer;
    height: 100%;
    position: relative;
    display: flex;
    align-items: center;
    padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(2))};
  }

  .signedOutArea__signInButton::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: ${(0, t.asCssProp)((0, i.gridUnits)(-2))};
    height: 100%;
    width: 1px;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  .signedOutArea__downloadButton {
    display: none;
  }

  .userDetailsArea {
    height: 100%;
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .userDetailsArea__imgContainer {
    margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
    width: ${(0, t.asCssProp)((0, i.gridUnits)(13))};
    height: ${(0, t.asCssProp)((0, i.gridUnits)(13))};
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
    position: relative;
  }

  .userDetailsArea__imgContainer::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: ${(0, t.asCssProp)(o.gradients.gold.complex("bottom"))};
    box-shadow: 0 ${(0, t.asCssProp)((0, i.gridUnits)(1))} ${(0, t.asCssProp)((0, i.gridUnits)(2))}
      rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.dark[900]))}, 0.6);
    border-radius: 50%;
    ${(0, t.asCssProp)(o.animation.slowTransition("transform"))};
    z-index: 2;
  }

  .userDetailsArea__imgContainer__img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    border-radius: 50%;
    position: relative;
    z-index: 2;
  }

  .userDetailsArea__imgContainer__bannerSide {
    width: ${(0, t.asCssProp)((0, i.gridUnits)(1.75))};
    height: ${(0, t.asCssProp)((0, i.gridUnits)(4.5))};
    position: absolute;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    z-index: 1;
    bottom: 1px;
  }

  .userDetailsArea__imgContainer__bannerSide--left {
    left: 0;
    transform: translateX(-90%);
  }

  .userDetailsArea__imgContainer__bannerSide--right {
    right: 0;
    transform: translateX(90%);
  }

  .userDetailsArea__imgContainer__levelLabel {
    position: absolute;
    width: 58px;
    bottom: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
    left: 50%;
    transform: translateX(-50%);
    z-index: 3;
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} 0;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
  }

  .userDetailsArea__imgContainer__tinyCorner {
    position: absolute;
    top: 50%;
    left: -3px;
    border: ${(0, t.asCssProp)((0, i.gridUnits)(1.5))} solid transparent;
    border-bottom-color: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    z-index: 1;
  }

  .userDetailsArea__imgContainer__tinyCorner--right {
    left: auto;
    right: -3px;
  }

  gu-user-details {
    display: none;
  }

  gu-notification-bubble {
    position: absolute;
    top: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
    right: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
    ${(0, t.asCssProp)(o.animation.slowTransition("opacity"))};
  }

  .userDetailsArea--open gu-notification-bubble {
    opacity: 0;
  }
  .userDetailsArea--open .userDetailsArea__imgContainer::before {
    transform: rotate(-180deg);
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-small"])}) {
    .signedOutArea {
      padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
    }
    .signedOutArea__signInButton {
      padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(3))};
    }
    .signedOutArea__signInButton::after {
      left: ${(0, t.asCssProp)((0, i.gridUnits)(-3))};
    }
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.large)}) {
    gu-user-details {
      display: flex;
      height: 100%;
      align-items: center;
    }

    .signedOutArea__downloadButton {
      display: flex;
      min-width: ${(0, t.asCssProp)((0, i.gridUnits)(45))};
    }

    .signedOutArea__signInButton {
      margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
      padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    }

    .signedOutArea__signInButton::after {
      right: 0;
      left: auto;
    }
  }
`;
        customElements.define("gu-header-user-area", (0, ge.x)({
            renderer: function ({
                                    menuItems: G,
                                    router: c,
                                    ngZone: $,
                                    userProperties: z,
                                    downloadLauncherUrl: se,
                                    userStarsTotal: Ee,
                                    userFluxTotal: Ge
                                }) {
                if (!G) return null;
                const Xe = (0, p.v9)({store: kt, selector: Re => Re.userMenuOpen}),
                    yt = (0, p.I0)(kt), [Nt, St] = (0, Q.eJ)(!1), Ae = () => {
                        this.dispatchEvent(new CustomEvent("onUserDetailsClick"))
                    };
                return e.dy`
    ${z ? e.dy`
          <div
            class=${(0, y.$)({userDetailsArea: !0, "userDetailsArea--open": Xe})}
          >
            <gu-user-details
              .userProperties=${z}
              .userStarsTotal=${Ee}
              .userFluxTotal=${Ge}
              @click=${Ae}
            ></gu-user-details>
            <div class="userDetailsArea__imgContainer" @click=${() => yt({type: Gs})}>
              ${Nt ? e.dy`<gu-notification-bubble highPriority="true"></gu-notification-bubble>` : null}
              <img class="userDetailsArea__imgContainer__img" src=${z.image_url} alt="user avatar image" />
              <i class="userDetailsArea__imgContainer__bannerSide userDetailsArea__imgContainer__bannerSide--left"></i>
              <i class="userDetailsArea__imgContainer__bannerSide userDetailsArea__imgContainer__bannerSide--right"></i>
              <i class="userDetailsArea__imgContainer__tinyCorner"></i>
              <i class="userDetailsArea__imgContainer__tinyCorner userDetailsArea__imgContainer__tinyCorner--right"></i>
              <gu-simple-text kind="tag" class="userDetailsArea__imgContainer__levelLabel" align="center">
                LVL${z.level}
              </gu-simple-text>
            </div>
          </div>

          <gu-user-menu
            .userProperties=${z}
            .userStarsTotal=${Ee}
            .userFluxTotal=${Ge}
            .router=${c}
            .ngZone=${$}
            .menuItems=${G}
            @onUserDetailsClick=${Ae}
          ></gu-user-menu>
        ` : e.dy`
          <div class="signedOutArea">
            <gu-simple-text kind="tag" @click=${() => {
                    this.dispatchEvent(new CustomEvent("onLoginModal"))
                }} class="signedOutArea__signInButton" data-test-id="signinButton">
              sign in
            </gu-simple-text>
            ${se ? e.dy`
                  <gu-primary-hex-button
                    class="signedOutArea__downloadButton"
                    size="large"
                    href=${se}
                    @click=${() => {
                    this.dispatchEvent(new CustomEvent("onRegisterModal"))
                }}
                  >
                    play now
                  </gu-primary-hex-button>
                ` : null}
          </div>
        `}
  `
            },
            props: {
                properties: {
                    menuItems: {type: Array},
                    router: {type: Object},
                    ngZone: {type: Object},
                    userProperties: {type: Object},
                    downloadLauncherUrl: {type: String},
                    userStarsTotal: {type: String},
                    userFluxTotal: {type: String}
                }, styles: rn
            }
        }));
        const ms = e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    position: absolute;
    top: ${o.measurements.standardHeaderHeight}px;
    right: 0;
    width: ${(0, t.asCssProp)((0, i.gridUnits)(65))};
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    list-style: none;
    margin: 0;
    transform: translateX(101%);
    opacity: 0;
    display: flex;
    flex-direction: column;
    border-right: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    border-left: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    ${(0, t.asCssProp)(o.animation.slowTransition("all"))};
  }

  :host(.open) {
    transform: translateX(0);
    opacity: 1;
  }

  .menuItem {
    cursor: pointer;
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(5))} ${(0, t.asCssProp)(Xt)};
    border-bottom: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    white-space: nowrap;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    position: relative;
  }

  .menuItem:hover {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  .menuItem__subMenu {
    display: flex;
    align-items: center;
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    border-left: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[100])};
  }

  .menuItem__subMenu__item {
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
  }

  gu-notification-bubble {
    position: absolute;
    right: ${(0, t.asCssProp)(Xt)};
    top: 50%;
    transform: translateY(-50%);
    ${(0, t.asCssProp)(o.animation.slowTransition("opacity"))};
  }

  gu-user-details {
    border-bottom: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(3.5))} ${(0, t.asCssProp)(Xt)};
    cursor: pointer;
  }

  gu-user-details:hover {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.large)}) {
    gu-user-details {
      display: none;
    }
  }
`, Tn = new CustomEvent("onLogout", {bubbles: !0, composed: !0}),
            ln = new CustomEvent("onConnectWallet", {bubbles: !0, composed: !0}),
            cn = new CustomEvent("onShowTransactions", {bubbles: !0, composed: !0});
        customElements.define("gu-user-menu", (0, ge.x)({
            renderer: function ({
                                    userProperties: G,
                                    router: c,
                                    ngZone: $,
                                    menuItems: z,
                                    userStarsTotal: se,
                                    userFluxTotal: Ee
                                }) {
                const Ge = (0, p.v9)({store: kt, selector: tt => tt.userMenuOpen}), Xe = (0, p.I0)(kt),
                    yt = () => this.dispatchEvent(ln), Nt = () => this.dispatchEvent(Tn),
                    St = () => this.dispatchEvent(cn), ft = () => {
                        document.removeEventListener("click", Ae)
                    }, Ae = tt => {
                        Xe({type: Zs})
                    };
                return (0, Q.d4)(() => (Ge ? (this.classList.add("open"), setTimeout(() => {
                    document.addEventListener("click", Ae)
                })) : (this.classList.remove("open"), ft()), () => ft()), [Ge]), e.dy`
    <gu-user-details
      verticalLayout
      .userProperties=${G}
      .userStarsTotal=${se}
      .userFluxTotal=${Ee}
      @click=${() => {
                    this.dispatchEvent(new CustomEvent("onUserDetailsClick"))
                }}
    ></gu-user-details>
    ${Object.keys(z).map(tt => {
                    const Dt = z[tt];
                    return Dt.visible ? e.dy`
            <div class="menuItem" @click=${() => (tt => {
                        "Log Out" === tt.shortName ? Nt() : "Connect Wallet" === tt.shortName ? yt() : "Transactions" === tt.shortName ? St() : tt.url ? (0, wt.rb)(tt) : tt.path && (0, wt.pR)(c, $, tt.path)
                    })(Dt)}>
              <gu-simple-text class="menuItem__shortName" kind="small"> ${Dt.shortName} </gu-simple-text>

              ${Dt.showNotificationBubble ? e.dy` <gu-notification-bubble highPriority="true"></gu-notification-bubble> ` : null}
              ${Dt.children ? e.dy`
                    <div class="menuItem__subMenu">
                      ${Object.keys(Dt.children).map(jn => {
                        const Kn = Dt.children[jn];
                        return e.dy`
                          <gu-simple-text
                            kind="tag"
                            class="menuItem__subMenu__item"
                            @click=${uo => ((tt, Dt) => {
                            tt.stopPropagation(), Dt.url ? (0, wt.rb)(Dt) : Dt.path && (0, wt.pR)(c, $, Dt.path)
                        })(uo, Kn)}
                            fillColor=${o.colors.gunmetal[100]}
                          >
                            ${Kn.shortName}
                          </gu-simple-text>
                        `
                    })}
                    </div>
                  ` : null}
            </div>
          ` : null
                })}
  `
            },
            props: {
                properties: {
                    userProperties: {type: Object},
                    userStarsTotal: {type: Number},
                    userFluxTotal: {type: Number},
                    menuItems: {type: Object},
                    router: {type: Object},
                    ngZone: {type: Object}
                }, styles: ms
            }
        }));
        const Mn = e.iv`
  :host {
    display: flex;
  }

  .side {
    display: flex;
    flex-direction: column;
    justify-content: center;
    height: 100%;
  }

  .side--left {
    position: relative;
    align-items: stretch;
    white-space: nowrap;
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
    padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
    padding-left: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
  }

  .side--right {
    max-width: 190px;
    flex: 1;
    padding-top: ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
    padding-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(.75))};
  }

  .side--left:hover .side__hoverGradient {
    opacity: 1;
  }

  .side__border {
    position: absolute;
    right: 0;
    top: 25%;
    height: 50%;
    border-right: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  .side__hoverGradient {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(180deg, #0f1b27 0%, #1d2f41 51.56%, rgba(61, 90, 116, 0.75) 100%);
    opacity: 0;
    z-index: 0;
  }

  .side__part {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }

  .side__part > gu-icon {
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
  }

  .row {
    display: flex;
    text-align: right;
  }

  .row--top {
    color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
    align-items: center;
  }

  .row--bottom {
    justify-content: flex-end;
  }

  .row__userName {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .row__rank {
    text-transform: uppercase;
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2.5))};
    padding-left: ${(0, t.asCssProp)((0, i.gridUnits)(2.5))};
    border-left: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
  }

  :host(.verticalLayout) {
    flex-direction: column;
  }

  :host(.verticalLayout) .side__border {
    display: none;
  }

  :host(.verticalLayout) .side--left {
    order: 2;
    flex-direction: row;
    justify-content: flex-start;
    margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    padding-left: 0;
  }

  :host(.verticalLayout) .side--left:hover .side__hoverGradient {
    opacity: 0;
  }

  :host(.verticalLayout) .side--right {
    max-width: 100%;
    padding: 0;
  }

  :host(.verticalLayout) .side__part:first-child {
    margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(2.5))};
  }

  :host(.verticalLayout) .row {
    text-align: left;
  }

  :host(.verticalLayout) .row--bottom {
    justify-content: flex-start;
  }

  :host(.verticalLayout) .row__userName {
    margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
  }
`, An = {
            userProperties: {type: Object},
            userStarsTotal: {type: String},
            userFluxTotal: {type: String},
            verticalLayout: {type: Boolean}
        };
        customElements.define("gu-user-details", (0, ge.x)({
            renderer: function ({
                                    userProperties: G,
                                    userStarsTotal: c = "0",
                                    userFluxTotal: $ = "0",
                                    verticalLayout: z
                                }) {
                return (0, Q.d4)(() => {
                    z ? this.classList.add("verticalLayout") : this.classList.remove("verticalLayout")
                }, [z]), e.dy`
    <div class="side side--left">
      <gu-simple-text kind="small" fontWeight="bold" fillColor=${o.colors.gold[300]} class="side__part side__part--flux">
        <gu-icon iconLigature="flux_symbol" class="side__part__icon"></gu-icon>
        ${$ || "0"}
      </gu-simple-text>

      <gu-simple-text
        kind="small"
        fontWeight="bold"
        fillColor=${o.colors.apocyan[300]}
        class="side__part side__part--stars"
      >
        <gu-icon iconLigature="collectable_stars" class="side__part__icon"></gu-icon>
        ${c || "0"}
      </gu-simple-text>
      <div class="side__border"></div>
      <div class="side__hoverGradient"></div>
    </div>
    <div class="side side--right">
      <div class="row row--top">
        <div class="row__cardsCount">
          <gu-icon iconLigature="cards_stack" class="row__cardsCount__icon"></gu-icon>
          <gu-simple-text kind="small" class="row__cardsCount__value">
            ${G.unique_card_count}
          </gu-simple-text>
        </div>

        <gu-simple-text kind="small" fontWeight="bold" fillColor=${o.colors.gunmetal[100]} class="row__rank">
          ${G.rank}
        </gu-simple-text>
      </div>
      <div class="row row--bottom">
        <gu-simple-text kind="small" class="row__userName"> ${G.username} </gu-simple-text>
      </div>
    </div>
  `
            }, props: {properties: An, styles: Mn}
        }));
        const Lt = [824, 825, 826, 827, 828, 829];
        let qt = class extends e.oi {
            constructor() {
                super(...arguments), this.videoId = 412954513, this.cropVideoFromTop = !0, this.randomChampionProto = Lt[parseInt("" + (Math.random() * Lt.length - 1), 10)]
            }

            connectedCallback() {
                super.connectedCallback(), this.style.setProperty("--headerAreaHeight", `${o.measurements.standardHeaderHeight}px`)
            }

            render() {
                return e.dy`
      <gu-background-vimeo-embed
        class="videoBackground"
        cropFromTop=${this.cropVideoFromTop}
        videoId=${this.videoId}
      ></gu-background-vimeo-embed>
      <picture class="fallbackImage">
        <source
          type="image/webp"
          sizes="100vw"
          srcset="
            //images.godsunchained.com/art2/250/${this.randomChampionProto}.webp   250w,
            //images.godsunchained.com/art2/375/${this.randomChampionProto}.webp   375w,
            //images.godsunchained.com/art2/500/${this.randomChampionProto}.webp   500w,
            //images.godsunchained.com/art2/720/${this.randomChampionProto}.webp   720w,
            //images.godsunchained.com/art2/1024/${this.randomChampionProto}.webp 1024w,
            //images.godsunchained.com/art2/1280/${this.randomChampionProto}.webp 1280w
          "
        />
        <source
          type="image/jpg"
          sizes="100vw"
          srcset="
            //images.godsunchained.com/art2/250/${this.randomChampionProto}.jpg    250w,
            //images.godsunchained.com/art2/375/${this.randomChampionProto}.jpg    375w,
            //images.godsunchained.com/art2/500/${this.randomChampionProto}.jpg   500w,
            //images.godsunchained.com/art2/720/${this.randomChampionProto}.jpg   720w,
            //images.godsunchained.com/art2/1024/${this.randomChampionProto}.jpg 1024w,
            //images.godsunchained.com/art2/1280/${this.randomChampionProto}.jpg 1280w
          "
        />
        <img src="//images.godsunchained.com/art2/720/827.jpg" alt="" class="fallbackImage__img" />
      </picture>
      <i class="overlaySkrimGradient"></i>
      <slot name="bannerLogo"></slot>
      <div class="slotContent">
        <slot name="bannerContent"></slot>
      </div>
    `
            }
        };
        qt.styles = e.iv`
    ${(0, t.asCssProp)((0, t.setBoxSizing)())}

    :host {
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      position: relative;
      min-height: calc(100vh - var(--headerAreaHeight));
    }

    :host([centerContent='true']) {
      justify-content: center;
    }

    .overlaySkrimGradient {
      content: '';
      position: absolute;
      top: calc((100vh - var(--headerAreaHeight)) / 2);
      height: calc((100vh - var(--headerAreaHeight)) / 2);
      left: 0;
      right: 0;
      background: linear-gradient(
        to top,
        rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.dark[900]))}, 1) 0%,
        rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.dark[900]))}, 0) 100%
      );
    }

    .slotContent {
      position: relative;
    }

    .fallbackImage {
      position: absolute;
      top: 0;
      left: 0;
      height: calc(100vh - var(--headerAreaHeight));
      width: 100%;
    }

    .fallbackImage__img {
      display: block;
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center top;
    }

    .videoBackground {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
    }

    @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping.small)}) {
      .videoBackground {
        display: block;
      }
      .fallbackImage {
        display: none;
      }
      .overlaySkrimGradient {
        top: auto;
        bottom: 0;
        height: 50%;
      }
    }
  `, (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], qt.prototype, "videoId", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], qt.prototype, "cropVideoFromTop", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], qt.prototype, "randomChampionProto", void 0), qt = (0, r.gn)([(0, zt.M)("gu-hero-video-banner")], qt);
        var un = n(66974);
        const In = ["xx-small", "x-small", "small", "medium", "large"],
            _s = {"xx-small": "10px", "x-small": "12px", small: "14px", medium: "16px", large: "20px"},
            fs = {"xx-small": "18px", "x-small": "20px", small: "22px", medium: "24px", large: "28px"},
            bs = {light: 100, regular: 300, "semi-bold": 500, bold: 700, "extra-bold": 900};

        class Mt extends e.oi {
            constructor() {
                super(...arguments), this.fontWeight = "regular", this.fontStyle = "regular", this.align = "center", this.plain = !1, this.responsiveSizes = []
            }

            static get styles() {
                return e.iv`
  ${(0, t.asCssProp)((0, t.setBoxSizing)())}

  :host {
    display: inline;
    font-family: 'Open Sans', sans-serif;
    ${(0, t.asCssProp)(a.uA.enhancedTextRenderingStyles)};
    font-size: ${(0, t.asCssProp)(_s.medium)};
  }

  :host:not([plain]) {
    line-height: ${(0, t.asCssProp)(fs.medium)};
  }

  ${(0, t.asCssProp)(In.map(G => e.iv`
          :host([size=${(0, t.asCssProp)(G)}]),
          :host([size=${(0, t.asCssProp)(G)}]) ::slotted(*) {
            font-size: ${(0, t.asCssProp)(_s[G])};
          }

          :host([size='${(0, t.asCssProp)(G)}]):not([plain']),
          :host([size='${(0, t.asCssProp)(G)}]):not([plain']) ::slotted(*) {
            line-height: ${(0, t.asCssProp)(fs[G])};
          }
        `).join("\n"))}

  :host([fontStyle='italic']),
  :host([fontStyle='italic']) ::slotted(*) {
    font-style: italic;
  }

  ${(0, t.asCssProp)(Object.keys(bs).map(G => e.iv`
          :host([fontWeight=${(0, t.asCssProp)(G)}]),
    :host([fontWeight=${(0, t.asCssProp)(G)}]) ::slotted(*) {
            font-weight: ${bs[G]};
          }
        `).join("\n"))}

  ${(0, t.asCssProp)(un.textAlignRules)}
  ${(0, t.asCssProp)(Ye.fillColoringRules)}
`
            }

            static hasColoringPropertyChanged(c) {
                return c.has("fillColor") || c.has("fillGradient") || c.has("fillGradientTarget")
            }

            updated(c) {
                if (Mt.hasColoringPropertyChanged(c)) {
                    const {fillColor: $, fillGradient: z, fillGradientTarget: se} = this;
                    (0, v.updateColoringVariables)({
                        component: this,
                        fillColor: $,
                        fillGradient: z,
                        fillGradientTarget: se
                    })
                }
            }

            generateMediaQueries() {
                const {breakpointSizeMapping: c} = o.breakpoints, {asCssProp: $} = a.ZB;
                return this.responsiveSizes.length ? e.dy`
          <style>
            /* DEFINE RESPONSIVE SIZING */
            ${this.responsiveSizes.map(({breakpoint: z, size: se = "small"}) => e.iv`
                @media screen and (min-width: ${$(c[z])}) {
                  :host(.overWrite[size='${$(this.size)}']),
                  :host(.overWrite[size='${$(this.size)}']) ::slotted(*) {
                    font-size: ${$(_s[se])} !important;
                  }

                  :host(.overWrite[size='${$(this.size)}']):not([plain]),
                  :host(.overWrite[size='${$(this.size)}']):not([plain]) ::slotted(*) {
                    line-height: ${$(fs[se])} !important;
                  }
                }
              `)}
          </style>
        ` : null
            }

            render() {
                return this.responsiveSizes.length ? this.classList.add("overWrite") : this.classList.remove("overWrite"), e.dy`
      ${this.generateMediaQueries()}
      <slot data-test-id="body-text-slot"></slot>
    `
            }
        }

        (0, r.gn)([(0, g.C)({
            type: String,
            reflect: !0
        }), (0, r.w6)("design:type", String)], Mt.prototype, "size", void 0), (0, r.gn)([(0, g.C)({
            type: String,
            reflect: !0
        }), (0, r.w6)("design:type", String)], Mt.prototype, "fontWeight", void 0), (0, r.gn)([(0, g.C)({
            type: String,
            reflect: !0
        }), (0, r.w6)("design:type", String)], Mt.prototype, "fontStyle", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Mt.prototype, "align", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Mt.prototype, "fillColor", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Mt.prototype, "fillGradient", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Mt.prototype, "fillGradientTarget", void 0), (0, r.gn)([(0, g.C)({
            type: Boolean,
            reflect: !0
        }), (0, r.w6)("design:type", Object)], Mt.prototype, "plain", void 0), (0, r.gn)([(0, g.C)({type: Array}), (0, r.w6)("design:type", Array)], Mt.prototype, "responsiveSizes", void 0), customElements.define("gu-body-text", Mt);

        class vt extends e.oi {
            constructor() {
                super(...arguments), this.disabled = !1, this.valid = void 0, this.dirty = !1, this.status = "initial", this.keyHandlers = {Escape: () => this.reset()}
            }

            static get styles() {
                return e.iv`
      :host([disabled]) {
        filter: grayscale(100%);
      }
    `
            }

            firstUpdated(c) {
                this.initialValue = this.value, this.dispatchEvent(new CustomEvent("registerFormControl", {
                    detail: {control: this},
                    bubbles: !0,
                    composed: !0
                })), super.firstUpdated(c)
            }

            connectedCallback() {
                super.connectedCallback(), this.addEventListener("keyup", this.handleKey), this.addEventListener("input", this.setDirty)
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.removeEventListener("keyup", this.handleKey), this.removeEventListener("input", this.setDirty)
            }

            setDirty() {
                this.dirty = !0
            }

            update(c) {
                this.status = this.disabled ? "disabled" : this.dirty ? this.valid ? "valid" : "invalid" : "initial", super.update(c)
            }

            handleKey(c) {
                if (this.disabled) return;
                const $ = this.keyHandlers[c.code];
                $ && $(c)
            }

            reset() {
                this.value = this.initialValue, this.dirty = !1
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], vt.prototype, "name", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], vt.prototype, "value", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean
        }), (0, r.w6)("design:type", Object)], vt.prototype, "disabled", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Boolean)], vt.prototype, "valid", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], vt.prototype, "dirty", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], vt.prototype, "status", void 0);

        class vs extends vt {
            constructor() {
                super(...arguments), this.size = "normal"
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      :host {
        display: inline;
      }

      .checkbox__input {
        cursor: pointer;
        display: inline-block;
        width: 20px;
        height: 20px;
        appearance: none;
        border-radius: 2px;
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        margin: 0 8px 0 0;
        transition: background-size 0.2s ease, border-color 0.2s ease, padding 0.2s ease;
        outline: none;
        background-size: 0 0;
      }

      .checkbox__input:focus {
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      :host([size='large']) .checkbox__input {
        width: 24px;
        height: 24px;
        padding: 11px;
      }

      .checkbox__input:checked {
        background-image: url("data:image/svg+xml,%3Csvg width='10' height='8' viewBox='0 0 10 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M2 3L4 5L8 0L10 1L4 8L0 4L2 3Z' fill='%238BE1E0'%3E%3C/path%3E%3C/svg%3E");
        background-size: 60%;
        background-repeat: no-repeat;
        background-position: center;
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      .checkbox__input:indeterminate {
        background-image: linear-gradient(
          0deg,
          ${(0, t.asCssProp)(o.colors.gunmetal[900])} 45%,
          ${(0, t.asCssProp)(o.colors.apocyan[300])} 45%,
          ${(0, t.asCssProp)(o.colors.apocyan[300])} 55%,
          ${(0, t.asCssProp)(o.colors.gunmetal[900])} 55%
        );
        background-size: 60%;
        background-repeat: no-repeat;
        background-position: center;
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      .checkbox__label {
        position: relative;
        display: flex;
        place-content: center stretch;
        place-items: center;
        flex: 1 0 auto;
      }

      .checkbox__input:focus {
        box-shadow: 0 0 6px ${(0, t.asCssProp)(o.colors.apocyan[300])}, 0 0 2px ${(0, t.asCssProp)(o.colors.apocyan[300])} inset;
      }
    `
            }

            getInputHandler(c) {
                return $ => {
                    $.stopPropagation(), this.updateValue(c, $.target.checked), this.dispatchEvent(new CustomEvent("input", {detail: {value: this.value}}))
                }
            }

            onChange(c) {
                c.stopPropagation(), this.dispatchEvent(new CustomEvent("change", {detail: {value: this.value}}))
            }

            updateValue(c, $) {
                this.value = $
            }

            activate() {
                const c = this.renderRoot.querySelector("input");
                c && c.click()
            }

            unfocus(c) {
                c.x > 0 && c.y > 0 && c.target.blur()
            }

            render() {
                return e.dy`
      <input
        type="checkbox"
        class="checkbox__input"
        @input=${this.getInputHandler(!0)}
        @change=${this.onChange}
        @click=${this.unfocus}
        .checked=${this.value}
        .indeterminate="${void 0 === this.value}"
        .disabled=${this.disabled}
        data-test-id="checkbox-native-element"
      />
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], vs.prototype, "size", void 0), customElements.define("gu-checkbox", vs);

        class as extends vs {
            constructor() {
                super(...arguments), this.options = [], this.value = []
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      :host {
        display: flex;
        place-content: center space-between;
        margin: 8px 0 16px 0;
        gap: 8px;
      }

      :host([layout='vertical']) {
        flex-direction: column;
      }
    `
            }

            updateValue(c, $) {
                $ ? this.value.splice(this.value.push(c)) : this.value.splice(this.value.indexOf(c), 1)
            }

            activate() {
                const c = this.renderRoot.querySelector("input");
                c && c.focus()
            }

            render() {
                return e.dy`
      ${this.options.map(c => e.dy`
          <label class="checkbox__label">
            <input
              type="checkbox"
              class="checkbox__input"
              @input=${this.getInputHandler(c.value)}
              @change=${this.onChange}
              @click=${this.unfocus}
              .checked=${!!this.value.find($ => $ == c.value)}
              .disabled=${this.disabled}
              data-test-id="checkbox-native-element"
            />
            <gu-body-text size="medium" plain="true">${c.label}</gu-body-text>
          </label>
        `)}
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Array)], as.prototype, "options", void 0), customElements.define("gu-checkbox-group", as);
        var ys = n(30252);

        class gn extends e.oi {
            constructor() {
                super(...arguments), this.controls = []
            }

            static get styles() {
                return e.iv`
      :host {
        display: block;
      }
    `
            }

            connectedCallback() {
                super.connectedCallback(), this.addEventListener("registerFormControl", this.registerControl), this.addEventListener("implicitSubmit", this.handleSubmissionRequest)
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.removeEventListener("registerFormControl", this.registerControl), this.removeEventListener("implicitSubmit", this.handleSubmissionRequest)
            }

            registerControl(c) {
                c.stopPropagation(), this.controls.push(c.detail.control)
            }

            handleSubmissionRequest(c) {
                c.stopPropagation();
                const $ = this.findInvalidControl();
                $ ? $.activate() : this.submit()
            }

            findInvalidControl() {
                return this.controls.find(c => !c.valid)
            }

            submit() {
                this.dispatchEvent(new CustomEvent("submit", {detail: {values: this.controls.reduce((c, $) => (c[$.name] = $.value, c), {})}}))
            }

            render() {
                return e.dy`<slot></slot>`
            }
        }

        (0, r.gn)([(0, ys.v)("", !0), (0, r.w6)("design:type", Array)], gn.prototype, "slotted", void 0), customElements.define("gu-form", gn);

        class S extends e.oi {
            constructor() {
                super(...arguments), this.for = "", this.id = `gu-label-${(0, Os.v4)()}`
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        place-content: center flex-start;
        cursor: default;
        pointer-events: all;
      }
    `
            }

            connectedCallback() {
                super.connectedCallback(), this.addEventListener("click", this.onClick), this.associate()
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.removeEventListener("click", this.onClick)
            }

            associate(c) {
                Promise.resolve().then(() => {
                    const $ = this.findTarget();
                    !$ || $ === this.target || (this.target && this.target.removeAttribute("aria-labelledby"), $.setAttribute("aria-labelledby", this.id), this.target = $)
                })
            }

            findTarget() {
                return this.for ? this.getRootNode().getElementById(this.for) : this.slotted ? this.slotted.find(c => c instanceof vt) : void 0
            }

            onClick(c) {
                const $ = this.target;
                $ && c.target !== $ && $.activate()
            }

            render() {
                return e.dy`<slot @slotchange=${this.associate} class="label__slot"></slot>`
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], S.prototype, "for", void 0), (0, r.gn)([(0, g.C)({reflect: !0}), (0, r.w6)("design:type", Object)], S.prototype, "id", void 0), (0, r.gn)([(0, ys.v)("", !0), (0, r.w6)("design:type", Array)], S.prototype, "slotted", void 0), customElements.define("gu-label", S);
        const H = {
            email: "email",
            phone: "tel",
            name: "text",
            search: "search",
            text: "text",
            url: "url",
            number: "number"
        }, d = {invalid: "alert_triangle", valid: "checkbox_tick", initial: ""};

        class A extends vt {
            constructor() {
                super(...arguments), this.size = "normal", this.type = "text", this.placeholder = "", this.keyHandlers = {
                    Escape: () => this.reset(),
                    Enter: () => this.dispatchEvent(new CustomEvent("implicitSubmit", {
                        detail: {control: this},
                        bubbles: !0,
                        composed: !0
                    }))
                }
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      :host {
        display: flex;
        margin: 8px 0 16px 0;
        position: relative;
      }

      .input__input {
        appearance: none;
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        background: transparent;
        display: inline-block;
        height: 26px;
        border-radius: 2px;
        padding: 4px 28px 4px 8px;
        transition: background-color 0.2s ease, border-color 0.2s ease, padding 0.2s ease;
        flex: 1 1 auto;
        outline: none;
        color: ${(0, t.asCssProp)(o.colors.light[100])};
        font-size: 16px;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
      }

      .input__input::selection {
        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        color: ${(0, t.asCssProp)(o.colors.light[100])};
      }

      .input__input::placeholder {
        color: ${(0, t.asCssProp)(o.colors.light[700])};
      }

      .input__input--status-initial {
        padding-right: 8px;
      }

      .input__icon {
        position: absolute;
        display: flex;
        top: 0;
        right: 0;
        width: 36px;
        height: 36px;
        font-size: 24px;
        place-content: center;
        place-items: center;
        color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        transition: color 0.2s ease;
        pointer-events: none;
      }

      :host(:focus-within) .input__input {
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      :host(:focus-within) .input__icon {
        color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      .input__icon--status-initial {
        opacity: 0;
      }

      .input__input--status-invalid,
      :host(:focus-within) .input__input--status-invalid {
        border-color: ${(0, t.asCssProp)(o.colors.alert)};
      }

      .input__icon--status-invalid,
      :host(:focus-within) .input__icon--status-invalid {
        color: ${(0, t.asCssProp)(o.colors.alert)};
      }

      :host([size='large']) .input__input {
        height: 30px;
        font-size: 16px;
        padding: 4px 36px 4px 8px;
      }

      :host([size='large']) .input__icon {
        height: 38px;
        width: 38px;
        font-size: 28px;
      }
    `
            }

            onChange() {
                this.dispatchEvent(new CustomEvent("change", {detail: {value: this.value}}))
            }

            onInput(c) {
                this.value = c.target.value, c.stopPropagation(), this.dispatchEvent(new CustomEvent("input", {detail: {value: this.value}}))
            }

            activate() {
                this.input.focus()
            }

            getInputType() {
                return H[this.type]
            }

            renderIcon() {
                return e.dy`
      <gu-icon class="input__icon input__icon--status-${this.status}" iconLigature=${d[this.status]}></gu-icon>
    `
            }

            render() {
                var c;
                return e.dy`
      <input
        type=${this.getInputType()}
        .value=${null !== (c = this.value) && void 0 !== c ? c : ""}
        class="input__input input__input--status-${this.status}"
        @input="${this.onInput}"
        @change=${this.onChange}
        placeholder=${this.placeholder}
        .disabled=${this.disabled}
        data-test-id="input-native-element"
      />
      ${this.renderIcon()}
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], A.prototype, "size", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], A.prototype, "type", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], A.prototype, "placeholder", void 0), (0, r.gn)([(0, T.I)(".input__input"), (0, r.w6)("design:type", HTMLInputElement)], A.prototype, "input", void 0), customElements.define("gu-input", A);
        var K = n(61462);
        const _e = {hidden: "password", visible: "text"},
            b = {visible: "action_showPassword", hidden: "action_hidePassword"};

        class L extends A {
            constructor() {
                super(...arguments), this.mode = "hidden"
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      .input__toggle {
        display: block;
        position: absolute;
        top: 0;
        right: 0;
        width: 36px;
        height: 36px;
        outline: none;
        text-decoration: none;
      }

      .input__toggle:focus {
        box-shadow: 0 0 2px ${(0, t.asCssProp)(o.colors.apocyan[300])}, 0 0 8px ${(0, t.asCssProp)(o.colors.apocyan[300])} inset;
      }

      .input__icon--status-initial {
        opacity: 1;
      }

      :host([disabled]) .input__toggle {
        ${(0, t.asCssProp)((0, K.userSelect)("none"))};
      }
    `
            }

            toggleMode(c) {
                c.stopPropagation(), c.preventDefault(), !this.disabled && (this.mode = "hidden" === this.mode ? "visible" : "hidden", c.detail > 0 && this.input.focus())
            }

            getInputType() {
                return _e[this.mode]
            }

            renderIcon() {
                return e.dy`
      <a
        class="input__toggle"
        href="javascript:void(0)"
        @click=${this.toggleMode}
        @keyup=${c => c.stopPropagation()}
        data-test-id="password-input-visibility-toggle"
      >
        <gu-icon
          class="input__icon input__icon--status-${this.status} input__icon--mode-${this.mode}"
          iconLigature=${b[this.mode]}
        ></gu-icon>
      </a>
    `
            }
        }

        (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", String)], L.prototype, "mode", void 0), customElements.define("gu-password-input", L);

        class l extends vt {
            constructor() {
                super(...arguments), this.options = [], this.size = "normal"
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      :host {
        display: flex;
        place-content: center space-between;
        margin: 8px 0 16px 0;
        gap: 8px;
      }

      .radio-button__input {
        ${(0, t.asCssProp)((0, K.userSelect)("none"))}
        cursor: pointer;
        display: inline-block;
        width: 20px;
        height: 20px;
        appearance: none;
        border-radius: 50%;
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        margin: 0 8px 0 0;
        transition: background-size 0.2s ease, border-color 0.2s ease;
        outline: none;
        background: radial-gradient(
            circle at center,
            ${(0, t.asCssProp)(o.colors.apocyan[300])} 50%,
            ${(0, t.asCssProp)(o.colors.gunmetal[900])} 50%
          )
          no-repeat center;
        background-size: 0 0;
      }

      .radio-button__input:focus {
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      .radio-button__input:checked,
      :host([size='large']) .radio-button__input:checked {
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
        background-size: 18px 18px;
      }

      :host([size='large']) .radio-button__input {
        width: 24px;
        height: 24px;
      }

      .radio-button__label {
        display: flex;
        place-content: center stretch;
        place-items: center;
        flex: 1 0 auto;
        color: ${(0, t.asCssProp)(o.colors.light[100])};
      }

      :host([layout='vertical']) {
        flex-direction: column;
      }

      .radio-button__input:focus,
      .radio-button__input:focus-within {
        box-shadow: 0 0 6px ${(0, t.asCssProp)(o.colors.apocyan[300])}, 0 0 2px ${(0, t.asCssProp)(o.colors.apocyan[300])} inset;
      }
    `
            }

            getInputHandler(c) {
                return $ => {
                    $.stopPropagation(), this.value = c, this.dispatchEvent(new CustomEvent("input", {detail: {value: this.value}}))
                }
            }

            onChange(c) {
                c.stopPropagation(), this.dispatchEvent(new CustomEvent("change", {detail: {value: this.value}}))
            }

            activate() {
                let c = this.renderRoot.querySelector("input:checked");
                c || (c = this.renderRoot.querySelector("input")), c.focus()
            }

            unfocus(c) {
                c.x > 0 && c.y > 0 && c.target.blur()
            }

            render() {
                return e.dy`
      ${this.options.map(c => e.dy`
          <label class="radio-button__label">
            <input
              type="radio"
              class="radio-button__input"
              @input=${this.getInputHandler(c.value)}
              @change=${this.onChange}
              @click=${this.unfocus}
              .checked=${this.value == c.value}
              .disabled=${this.disabled}
              data-test-id="radio-button-native-element"
            />
            <gu-body-text size="medium" plain="true">${c.label}</gu-body-text>
          </label>
        `)}
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Array)], l.prototype, "options", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], l.prototype, "size", void 0), customElements.define("gu-radio-button-group", l);

        class M extends vt {
            constructor() {
                super(...arguments), this.value = 50, this.min = 0, this.max = 100, this.updateHelper = c => {
                    requestAnimationFrame(() => requestAnimationFrame(c))
                }
            }

            static get styles() {
                const c = e.iv`linear-gradient(90deg, #AFFAED 0%, #8BE1E0 50.34%, #54BBCD 100%)`, $ = e.iv`
      border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[900])};
      height: 26px;
      width: 8px;
      border-radius: 4px;
      background: ${(0, t.asCssProp)(o.colors.apocyan[100])};
      cursor: pointer;
    `, z = e.iv`
      width: 100%;
      height: 16px;
      cursor: pointer;
      border: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      box-shadow: 0 0 6px rgba(0, 0, 0, 0.35);
      border-radius: 4px;
    `, se = e.iv`
      background: ${c}, ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      background-size: var(--value, 0) 100%;
      background-repeat: no-repeat;
      transition: var(--transition, 'background-size') 0.5s ease;
    `;
                return e.iv`
      ${super.styles}

      :host {
        font-size: 0 !important;
        line-height: 0 !important;
        margin: 8px 0 16px 0;
      }

      .range__input {
        -webkit-appearance: none;
        width: 100%;
        background: transparent;
        outline: none;
      }

      .range__input:focus {
        outline: none;
      }

      .range__input::-webkit-slider-thumb {
        -webkit-appearance: none;
        margin-top: -7px;
        ${$}
      }

      .range__input::-moz-range-thumb {
        ${$}
      }

      .range__input::-ms-thumb {
        ${$}
      }

      .range__input::-webkit-slider-runnable-track {
        ${z}
        ${se}
      }

      .range__input::-moz-range-track {
        ${z}
        ${se}
      }

      .range__input::-ms-track {
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        ${z}
      }

      .range__input::-ms-fill-lower {
        background: ${c};
        border: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      }

      .range__input::-ms-fill-upper {
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])}
        border: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      }

      .range__input:focus,
      .range__input:focus-within,
      .range__input:focus::-webkit-slider-thumb,
      .range__input:focus-within::-webkit-slider-thumb {
        box-shadow: 0 0 8px ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }
    `
            }

            updateSelectedRangeHighlight() {
                this.style.setProperty("--value", Math.min(100, Math.max(0, (this.value - this.min) / (this.max - this.min) * 100)) + "%")
            }

            onInput(c) {
                c.stopPropagation();
                const $ = c.target;
                void 0 !== $.value && (this.value = parseFloat($.value), this.updateSelectedRangeHighlight(), this.dispatchEvent(new CustomEvent("input", {detail: {value: this.value}})))
            }

            onChange(c) {
                c.stopPropagation(), this.dispatchEvent(new CustomEvent("change", {detail: {value: this.value}}))
            }

            update(c) {
                super.update(c), c.has("value") && this.updateHelper(this.updateSelectedRangeHighlight.bind(this))
            }

            firstUpdated(c) {
                super.firstUpdated(c), this.style.setProperty("--value", "0%"), this.updateHelper = $ => $(), this.style.setProperty("--transition", "background-size"), setTimeout(() => {
                    this.style.setProperty("--transition", "none")
                }, 500)
            }

            activate() {
                this.input.focus()
            }

            render() {
                return e.dy`
      <input
        type="range"
        class="range__input"
        .value=${this.value}
        min=${this.min}
        max=${this.max}
        @input=${this.onInput}
        @change=${this.onChange}
        .disabled=${this.disabled}
        data-test-id="range-input-native-element"
      />
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], M.prototype, "value", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], M.prototype, "min", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], M.prototype, "max", void 0), (0, r.gn)([(0, T.I)(".range__input"), (0, r.w6)("design:type", HTMLInputElement)], M.prototype, "input", void 0), customElements.define("gu-range-input", M);

        class U extends vt {
            constructor() {
                super(...arguments), this.placeholder = "", this.options = [], this.stretch = !1, this.open = !1
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      :host {
        display: flex;
        position: relative;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
        margin: 8px 0 16px 0;
      }

      .select__container {
        position: absolute;

        display: flex;
        flex-direction: column;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[300])};
        border-radius: 2px;
        box-sizing: border-box;
        min-height: 36px;

        cursor: pointer;
      }

      :host([stretch]) .select__container {
        width: 100%;
      }

      .select__heading {
        display: flex;
        justify-content: space-between;
        align-items: center;
        vertical-align: center;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(1.75))};
        height: 20px;
        line-height: 20px;
        outline: none;
        text-decoration: none;
      }

      .select__icon {
        margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
      }

      .select__menu {
        display: flex;
        flex-direction: column;
        max-height: 200px;
        overflow-y: auto;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        transition: max-height 0.2s ease;
      }

      .select__menu::-webkit-scrollbar {
        width: 12px;
        border: 2px solid transparent;
      }

      .select__menu::-webkit-scrollbar-thumb {
        background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        border-radius: 6px;
        background-clip: padding-box;
        border: 4px solid rgba(0, 0, 0, 0);
      }

      .select__menu--visibility-hidden {
        max-height: 0;
      }

      .select__option {
        width: 100%;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(2))} ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        box-sizing: border-box;
      }

      .select__option:hover {
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
      }

      .select__option--selected {
        font-weight: bold;
      }

      :host(:focus-within) .select__container {
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      :host([disabled]) .select__heading {
        ${(0, t.asCssProp)((0, K.userSelect)("none"))};
      }
    `
            }

            update(c) {
                var $;
                if (c.has("disabled") && this.disabled && (this.open = !1), c.has("options")) {
                    const z = this.findSelectedOption();
                    this.value = null !== ($ = null == z ? void 0 : z.value) && void 0 !== $ ? $ : void 0
                }
                (c.has("value") || c.has("options")) && this.notify(), super.update(c)
            }

            toggleOpen(c) {
                this.open = !this.disabled && (void 0 !== c ? c : !this.open)
            }

            getToggleIcon() {
                return this.open ? "chevron_up" : "chevron_down"
            }

            renderSelectOptions() {
                return e.dy`
      ${this.options.map(c => e.dy`<a
            href="javascript:void(0)"
            @click=${() => this.selectOption(c)}
            class=${(0, y.$)({select__option: !0, "select__option--selected": this.value === c.value})}
            ><gu-body-text
              size="medium"
              fillColor="colors.light.100"
              fontWeight=${this.value === c.value ? "bold" : "normal"}
              plain="true"
              >${c.label}</gu-body-text
            >
          </a>`)}
    `
            }

            selectOption(c) {
                this.value = c ? c.value : void 0, this.open = !1
            }

            notify() {
                this.dispatchEvent(new CustomEvent("input", {
                    composed: !0,
                    bubbles: !0,
                    detail: {value: this.value}
                })), this.dispatchEvent(new CustomEvent("change", {
                    composed: !0,
                    bubbles: !0,
                    detail: {value: this.value}
                }))
            }

            activate() {
                this.link.focus()
            }

            handleKeyPress(c) {
                if (!this.disabled) switch (c.code) {
                    case"Enter":
                    case"Space":
                        this.toggleOpen();
                        break;
                    case"Escape":
                        this.toggleOpen(!1)
                }
            }

            findSelectedOption() {
                return this.options.find(c => c.value === this.value)
            }

            render() {
                const c = this.findSelectedOption();
                return e.dy`
      <div class="select__container">
        <a
          href="javascript:void(0)"
          @click=${() => this.toggleOpen()}
          @keyup=${this.handleKeyPress}
          data-test-id="select.heading.anchor"
          class="select__heading"
          tabindex="0"
        >
          <gu-body-text size="medium" data-test-id="select.heading.text" fillColor="colors.light.300" plain="true">
            ${this.value && c ? c.label : this.placeholder}
          </gu-body-text>
          <gu-icon class="select__icon" iconLigature="${this.getToggleIcon()}" fillColor="colors.light.300"></gu-icon>
        </a>
        <div
          class=${(0, y.$)({select__menu: !0, "select__menu--visibility-hidden": !this.open})}
        >
          ${this.renderSelectOptions()}
        </div>
      </div>
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], U.prototype, "placeholder", void 0), (0, r.gn)([(0, g.C)({type: Array}), (0, r.w6)("design:type", Array)], U.prototype, "options", void 0), (0, r.gn)([(0, g.C)({
            type: Boolean,
            reflect: !0
        }), (0, r.w6)("design:type", Object)], U.prototype, "stretch", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], U.prototype, "open", void 0), (0, r.gn)([(0, T.I)(".select__heading"), (0, r.w6)("design:type", HTMLAnchorElement)], U.prototype, "link", void 0), customElements.define("gu-select", U);

        class le extends vt {
            constructor() {
                super(...arguments), this.size = "normal", this.placeholder = ""
            }

            static get styles() {
                return e.iv`
      ${super.styles}

      :host {
        display: flex;
        margin: 8px 0 16px 0;
        position: relative;
      }

      .textarea__input {
        appearance: none;
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        background: transparent;
        display: inline-block;
        height: 26px;
        border-radius: 2px;
        padding: 4px 8px 4px 8px;
        transition: background-color 0.2s ease, border-color 0.2s ease, padding 0.2s ease;
        flex: 1 1 auto;
        outline: none;
        color: ${(0, t.asCssProp)(o.colors.light[100])};
        font-size: 16px;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        min-height: 5em;
      }

      .textarea__input::selection {
        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        color: ${(0, t.asCssProp)(o.colors.light[100])};
      }

      .textarea__input::placeholder {
        color: ${(0, t.asCssProp)(o.colors.light[700])};
      }

      .textarea__input--status-initial {
        padding-right: 8px;
      }

      :host(:focus-within) .textarea__input {
        border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
      }

      .textarea__input--status-invalid,
      :host(:focus-within) .textarea__input--status-invalid {
        border-color: ${(0, t.asCssProp)(o.colors.alert)};
      }

      :host([size='large']) .textarea__input {
        height: 30px;
        font-size: 16px;
        padding: 4px 36px 4px 8px;
      }
    `
            }

            onChange() {
                this.dispatchEvent(new CustomEvent("change", {detail: {value: this.value}}))
            }

            onInput(c) {
                this.value = c.target.value, c.stopPropagation(), this.dispatchEvent(new CustomEvent("input", {detail: {value: this.value}}))
            }

            activate() {
                this.input.focus()
            }

            render() {
                var c;
                return e.dy`
      <textarea
        class="textarea__input textarea__input--status-${this.status}"
        @input="${this.onInput}"
        @change=${this.onChange}
        placeholder=${this.placeholder}
        .disabled=${this.disabled}
        data-test-id="textarea-native-element"
        .value=${null !== (c = this.value) && void 0 !== c ? c : ""}
      ></textarea>
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], le.prototype, "size", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], le.prototype, "placeholder", void 0), (0, r.gn)([(0, T.I)(".textarea__input"), (0, r.w6)("design:type", HTMLTextAreaElement)], le.prototype, "input", void 0), customElements.define("gu-textarea", le);

        class ke extends e.oi {
            constructor() {
                super(...arguments), this.errors = [], this.enabled = !1
            }

            static get styles() {
                return e.iv`
      :host {
        display: block;
        cursor: default;
        pointer-events: all;
        color: ${(0, t.asCssProp)(o.colors.alert)};
        margin: -12px 0 0 0;
        padding: 0 0 16px 0;
      }

      ::slotted(*) {
        display: block;
        max-height: 0;
        opacity: 0;
        transition: max-height 0.2s ease, opacity 0.2s ease;
        overflow: hidden;
      }

      ::slotted(.validation-errors--active) {
        max-height: 1.4em;
        opacity: 1;
      }
    `
            }

            updated(c) {
                super.updated(c), c.has("errors") && this.updateErrors()
            }

            updateErrors() {
                Promise.resolve().then(() => {
                    !this.slotted || this.slotted.forEach(c => c.classList.toggle("validation-errors--active", !(!this.enabled || !this.errors.find($ => $ === c.getAttribute("key")))))
                })
            }

            render() {
                return e.dy`<slot @slotchange=${this.updateErrors()}></slot>`
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Array)], ke.prototype, "errors", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], ke.prototype, "enabled", void 0), (0, r.gn)([(0, ys.v)("", !0, "[key]"), (0, r.w6)("design:type", Array)], ke.prototype, "slotted", void 0), customElements.define("gu-validation-errors", ke);
        const ze = (0, i.gridUnits)(.5), He = e.iv`
  :host {
    width: 100%;
    display: flex;
  }

  .innerContainer {
    width: 100%;
    padding-bottom: 140%;
    margin: auto;
    position: relative;
    cursor: pointer;
  }

  .innerContainer__board {
    position: absolute;
    height: 71%;
    top: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
  }

  .innerContainer__trinkets {
    padding-top: ${(0, t.asCssProp)(ze)};
    position: absolute;
    bottom: 0;
    left: 0;
    height: 28%;
    width: 100%;
    display: flex;
  }

  .innerContainer__trinkets__trinket,
  .innerContainer__trinkets__emptyTrinket {
    flex: 1;
    overflow: hidden;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
    position: relative;
  }

  .innerContainer__trinkets__emptyTrinket {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    color: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
  }

  .innerContainer__trinkets__trinket::after,
  .innerContainer__trinkets__emptyTrinket::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: inset 0 0 0 1px rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.white))}, 0.15);
  }

  .innerContainer__trinkets__trinket--left {
    margin-right: ${(0, t.asCssProp)(ze)};
    order: -1;
  }

  .innerContainer__trinkets__trinket--right {
    order: 2;
  }

  .innerContainer__trinkets__emptyTrinket:first-of-type:not(:last-of-type) {
    margin-right: ${(0, t.asCssProp)(ze)};
  }
`;
        let je = class extends e.oi {
            static get styles() {
                return He
            }

            renderIcon() {
                return this.trinkets.length > 0 ? e.dy`` : e.dy`<gu-icon
      iconLigature="empty"
      class="innerContainer__trinkets__emptyTrinket"
      data-test-id="loadout-display-icon"
    ></gu-icon>`
            }

            render() {
                return e.dy`
      <div class="innerContainer">
        <gu-loadout-part
          class="innerContainer__board"
          .board=${this.board}
          ?owned=${!0}
          ?hideCount=${!0}
          ?noAspectRatio=${!0}
          ?hideText=${this.hideText}
          data-test-id="loadout-display-board"
        ></gu-loadout-part>
        <div class="innerContainer__trinkets">
          ${this.trinkets.map(c => e.dy`
              <gu-loadout-part
                class=${(0, y.$)({
                    innerContainer__trinkets__trinket: !0,
                    "innerContainer__trinkets__trinket--left": 1 === c.slot,
                    "innerContainer__trinkets__trinket--right": 2 === c.slot
                })}
                .trinket=${c}
                ?hideText=${!0}
                ?noAspectRatio=${!0}
                ?hideCount=${!0}
                data-test-id="loadout-display-trinket"
              ></gu-loadout-part>
            `)}
          ${this.renderIcon()}
        </div>
      </div>
    `
            }
        };
        (0, r.gn)([(0, g.C)({type: Object}), (0, r.w6)("design:type", Object)], je.prototype, "board", void 0), (0, r.gn)([(0, g.C)({type: Array}), (0, r.w6)("design:type", Array)], je.prototype, "trinkets", void 0), (0, r.gn)([(0, g.C)({type: Boolean}), (0, r.w6)("design:type", Boolean)], je.prototype, "hideText", void 0), je = (0, r.gn)([(0, zt.M)("gu-loadout-display")], je), n(90004), customElements.define("gu-logo", class extends e.oi {
            constructor() {
                super(...arguments), this.size = 40, this.type = "godsunchained", this.images = {
                    godsunchained: "/assets/images/logo--gods-unchained.svg",
                    "godsunchained-icon": "/assets/images/internal-logos/logo--gods-unchained-icon.png",
                    immutable: "/assets/images/internal-logos/logo--immutable.svg",
                    "immutable-icon": "/assets/images/logo--immutable-icon.svg"
                }
            }

            static get properties() {
                return {size: {type: Number}, type: {type: String}}
            }

            static get styles() {
                return e.iv`
      :host {
        font-size: 0 !important;
        line-height: 0 !important;
      }

      .logo {
        max-width: var(--logoSize, 400px);
        width: 100%;

        /* Allow to make image non-interactable with host styles */
        -webkit-touch-callout: inherit;
        -webkit-user-drag: inherit;
      }

      .logo--icon {
        width: var(--logoSize, 40px);
      }
    `
            }

            render() {
                return this.size && this.style.setProperty("--logoSize", `${this.size}px`), e.dy`
      <img class="${this.size < 100 ? "logo--icon" : "logo"}" alt="Gods Unchained Logo" src="${this.images[this.size < 100 ? `${this.type}-icon` : this.type]}" />
    `
            }
        });
        const ye = G => !G || G.length < 11 ? G : `${G.slice(0, 6)}...${G.slice(G.length - 4)}`;

        class fe extends e.oi {
            constructor() {
                super(...arguments), this.walletDropdownMenuOptions = [], this.onGuUnlinkClick = (() => {
                    this.dispatchEvent(new CustomEvent("onGuUnlinkClick", {
                        composed: !0,
                        bubbles: !0,
                        detail: {address: this.address}
                    }))
                }).bind(this), this.onDropdownSelect = (c => {
                    c.stopPropagation(), this.dispatchEvent(new CustomEvent("onDropdownSelect", {
                        composed: !0,
                        bubbles: !0,
                        detail: {address: this.address, menuItem: c.detail}
                    }))
                }).bind(this)
            }

            static get styles() {
                return e.iv`
      :host {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
        background-color: ${(0, t.asCssProp)(o.colors.light[100])};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} solid ${(0, t.asCssProp)(o.colors.light[300])};
        box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2);
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(2))};
      }

      .defaultSticker {
        position: absolute;
        top: 0;
        left: 0;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} ${(0, t.asCssProp)((0, i.gridUnits)(1.5))};
        background-color: ${(0, t.asCssProp)(o.colors.apocyan[500])};
        border-radius: 0 0 ${(0, t.asCssProp)((0, i.gridUnits)(1))} 0;
      }

      .address__text--regular {
        display: none;
      }

      .address__shortener {
        width: ${(0, t.asCssProp)((0, i.gridUnits)(34))};
      }

      .action {
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid ${(0, t.asCssProp)(o.colors.dark[300])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
        display: flex;
        justify-content: center;
        cursor: pointer;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(8))};
        width: ${(0, t.asCssProp)((0, i.gridUnits)(8))};
        user-select: none;
      }

      .action:hover {
        background: ${(0, t.asCssProp)(o.colors.dark[300])};
      }

      .action:hover .action__icon {
        color: ${(0, t.asCssProp)(o.colors.light[100])};
      }

      .action__icon {
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
      }

      .imxLinked_status {
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: default;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
        margin-left: auto;
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        width: ${(0, t.asCssProp)((0, i.gridUnits)(41.25))};
      }

      .imxLinked_status__tick {
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
        :host {
          padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(6))};
        }
        .address__text--small {
          display: none;
        }
        .address__text--regular {
          display: unset;
        }
        .imxLinked_status {
          margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        }
      }
    `
            }

            render() {
                return e.dy`
      ${this.defaultWalletEnabled && this.defaultWallet ? e.dy` <gu-paragraph-text
            text="Default"
            data-test-id="wallet-display-default-sticker"
            kind="tag"
            class="defaultSticker"
            fillColor="${o.colors.light[100]}"
            align="center"
          >
          </gu-paragraph-text>` : null}

      <gu-paragraph-text
        title=${this.address}
        class="address"
        data-test-id="wallet-display-address"
        fillColor="colors.dark.500"
        kind="small"
        .responsiveKind=${[{breakpoint: "small", kind: "large"}]}
        fontWeight="bold"
        align="left"
      >
        <span class="address__text--regular"> ${this.address} </span>
        <span class="address__text--small"> ${ye(this.address)} </span>
        <span></span>
      </gu-paragraph-text>

      ${this.imxLinked ? e.dy`
            <!-- Can't replace this with gu-standard-button as it's non standard -->
            <gu-plain-square-button
              backgroundFillColor="colors.light.300"
              borderColor="colors.light.300"
              fillColor="colors.dark.300"
              icon="immutableX"
              class="imxLinked_status"
              iconColor="colors.dark.300"
              data-test-id="wallet-display-imx-linked-status"
            >
              <gu-icon
                fillColor="colors.apocyan.500"
                iconLigature="checkbox_tick"
                class="imxLinked_status__tick"
              ></gu-icon>
              Linked to
            </gu-plain-square-button>
          ` : e.dy`
            <!-- Can't replace this with gu-standard-button as it's non standard -->
            <gu-plain-square-button
              backgroundFillColor="colors.light.300"
              borderColor="colors.light.300"
              fillColor="colors.light.500"
              class="imxLinked_status"
              data-test-id="wallet-display-imx-linked-status"
            >
              Unlinked
            </gu-plain-square-button>
          `}
      ${this.defaultWalletEnabled ? e.dy`
            <gu-dropdown-menu @onSelect=${this.onDropdownSelect} .items=${this.walletDropdownMenuOptions}>
              <div class="action" slot="dropdownControl">
                <gu-icon
                  class="action__icon"
                  data-test-id="wallet-display-action-icon"
                  fillColor="colors.dark.300"
                  iconLigature="action_kebabMenu"
                ></gu-icon>
              </div>
            </gu-dropdown-menu>
          ` : e.dy`
            <div class="action">
              <gu-icon
                @click=${this.onGuUnlinkClick}
                class="action__icon"
                data-test-id="wallet-display-action-icon"
                fillColor="colors.dark.300"
                iconLigature="action_trash"
              ></gu-icon>
            </div>
          `}
    `
            }
        }

        (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], fe.prototype, "address", void 0), (0, r.gn)([(0, g.C)({type: Boolean}), (0, r.w6)("design:type", Boolean)], fe.prototype, "imxLinked", void 0), (0, r.gn)([(0, g.C)({type: Boolean}), (0, r.w6)("design:type", Boolean)], fe.prototype, "defaultWalletEnabled", void 0), (0, r.gn)([(0, g.C)({type: Boolean}), (0, r.w6)("design:type", Boolean)], fe.prototype, "defaultWallet", void 0), (0, r.gn)([(0, g.C)({type: Array}), (0, r.w6)("design:type", Array)], fe.prototype, "walletDropdownMenuOptions", void 0), customElements.define("gu-wallet-display", fe);

        class Ve extends e.oi {
            constructor() {
                super(...arguments), this.userWallets = [], this.imxLinkLoading = !1, this.connectedWallet = "", this.connectedWalletGuLinked = !1, this.guLinkLoading = !1, this.walletActionLoading = "", this.defaultWalletEnabled = !1, this.walletDropdownMenuOptions = [], this.showEmptyState = !0, this.showImxLink = !1, this.allImxLinked = !1
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        width: 100%;
        background-color: ${(0, t.asCssProp)(o.colors.light[100])};
        border: ${(0, t.asCssProp)(o.colors.light[500])} solid ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
        border-top: ${(0, t.asCssProp)(o.colors.gold[500])} solid ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(6))} ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        box-shadow: 2px 2px 8px rgba(0, 0, 0, 0.2);
      }

      .emptyState {
        display: flex;
        flex-direction: column;
        width: 100%;
        justify-content: center;
        align-items: center;
      }

      .emptyState__icon {
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
        margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
      }

      .emptyState__text {
        max-width: 450px;
      }

      .walletsList {
        display: flex;
        flex-direction: column;
        width: 100%;
      }

      .walletsList__header {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }

      .walletsList__header__ctaSection {
        display: flex;
        flex-direction: column;
      }

      .walletsList__header__ctaSection__helpButton {
        width: ${(0, t.asCssProp)((0, i.gridUnits)(34))};
        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
      }

      .walletsList__header__ctaSection__imxLinkButton {
        width: ${(0, t.asCssProp)((0, i.gridUnits)(56))};
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
      }

      .walletsList__header__text {
        margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
      }

      .walletsList__wallet {
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(1.5))} 0;
      }

      .walletsList__helpText {
      }
      .walletList__addWallet {
        display: flex;
        justify-content: center;
        align-items: center;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(15))};
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(1.5))} 0;
        box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2);
      }
      .walletList__addWallet--added {
        cursor: default;
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
        :host {
          padding: ${(0, t.asCssProp)((0, i.gridUnits)(10))} ${(0, t.asCssProp)((0, i.gridUnits)(12.5))};
        }
        .walletsList__header {
          flex-direction: row;
        }
        .walletsList__header__ctaSection__imxLinkButton {
          margin-left: auto;
        }
        .walletsList__header__ctaSection {
          flex-direction: row;
        }

        .walletsList__header__ctaSection__helpButton {
          margin-top: 0;
        }
        .walletList__addWallet {
          height: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
        }
      }
    `
            }

            update(c) {
                this.showEmptyState = !(this.userWallets && this.userWallets.length || this.connectedWallet && this.connectedWallet.length), this.showImxLink = this.userWallets && this.userWallets.length > 0, this.allImxLinked = this.userWallets && this.userWallets.every($ => $.imx_linked), super.update(c)
            }

            onImxLinkClick() {
                this.dispatchEvent(new CustomEvent("onImxLinkClick", {composed: !0}))
            }

            onImxLinkHelpClick() {
                this.dispatchEvent(new CustomEvent("onImxLinkHelpClick", {composed: !0}))
            }

            onGuLinkClick() {
                this.dispatchEvent(new CustomEvent("onGuLinkClick", {bubbles: !1}))
            }

            renderDisconnected() {
                return e.dy`
      <gu-vertical-space class="emptyState" both="2x-large">
        <gu-icon class="emptyState__icon" fillColor="colors.dark.500" iconLigature="action_wallet"></gu-icon>
        <gu-paragraph-text align="center" class="emptyState__text" fillColor="colors.dark.300">
          No wallet detected. Connect your web wallet to get started.
        </gu-paragraph-text>
      </gu-vertical-space>
    `
            }

            renderImxLink() {
                return this.showImxLink ? this.allImxLinked ? e.dy`
        <div class="walletsList__header__ctaSection">
          <gu-standard-button
            theme="light"
            icon="immutableX"
            iconPosition="right"
            class="walletsList__header__ctaSection__imxLinkButton"
            type="primary"
            .disabled=${!0}
          >
            All wallets linked to
          </gu-standard-button>
        </div>
      ` : e.dy`
      <div class="walletsList__header__ctaSection">
        <gu-standard-button
          theme="light"
          icon="immutableX"
          iconPosition="right"
          class="walletsList__header__ctaSection__imxLinkButton"
          type="primary"
          @click=${this.onImxLinkClick}
          .loading=${this.imxLinkLoading}
        >
          Link a wallet to
        </gu-standard-button>

        <gu-standard-button
          theme="light"
          class="walletsList__header__ctaSection__helpButton"
          type="secondary"
          @click=${this.onImxLinkHelpClick}
        >
          How to link?
        </gu-standard-button>
      </div>
    ` : e.dy``
            }

            renderWallet() {
                return this.connectedWallet && this.connectedWallet.length ? this.connectedWalletGuLinked ? e.dy`
        <!-- Can't replace this with gu-standard-button as it's non standard -->
        <gu-plain-square-button
          backgroundFillColor="colors.light.100"
          borderColor="colors.light.300"
          fillColor="colors.dark.300"
          iconColor="colors.god.nature.secondary"
          icon="checkbox_tick"
          leftIconPosition="true"
          class="walletList__addWallet walletList__addWallet--added"
        >
          Current wallet added
        </gu-plain-square-button>
      ` : e.dy`
      <!-- Can't replace this with gu-standard-button as it's non standard -->
      <gu-plain-square-button
        backgroundFillColor="colors.light.100"
        borderColor="colors.light.300"
        fillColor="colors.apocyan.500"
        class="walletList__addWallet"
        @click=${this.onGuLinkClick}
        icon="add_item"
        leftIconPosition="true"
        loading=${this.guLinkLoading ? "true" : "false"}
        loadingColor="apocyan"
      >
        Add wallet to GU
      </gu-plain-square-button>
    ` : e.dy``
            }

            render() {
                return this.showEmptyState ? this.renderDisconnected() : e.dy`
      <gu-vertical-space class="walletsList">
        <gu-vertical-space class="walletsList__header" bottom="large">
          <gu-paragraph-text class="walletsList__header__text" fillColor="colors.dark.300">
            Wallets connected to Gods Unchained account
          </gu-paragraph-text>
          ${this.renderImxLink()}
        </gu-vertical-space>
        ${this.userWallets.map(c => this.walletActionLoading === c.address ? e.dy`
              <div class="walletList__addWallet"><gu-rectangular-spinner color="apocyan"></gu-rectangular-spinner></div>
            ` : e.dy` <gu-wallet-display
            address=${c.address}
            .walletDropdownMenuOptions=${this.walletDropdownMenuOptions}
            ?imxLinked="${c.imx_linked}"
            ?defaultWallet="${c.is_default}"
            ?defaultWalletEnabled="${this.defaultWalletEnabled}"
            class="walletsList__wallet"
          ></gu-wallet-display>`)}
        ${this.renderWallet()}
        <gu-vertical-space top="large">
          <gu-paragraph-text align="left" class="walletsList__helpText" fillColor="colors.dark.300">
            If you have any questions, please contact <a target="_blank" href="https://support.godsunchained.com">support</a>.
          </gu-paragraph-text>
        </gu-vertical-space>
      </gu-vertical-space>
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Array)], Ve.prototype, "userWallets", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ve.prototype, "imxLinkLoading", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ve.prototype, "connectedWallet", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ve.prototype, "connectedWalletGuLinked", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ve.prototype, "guLinkLoading", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ve.prototype, "walletActionLoading", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ve.prototype, "defaultWalletEnabled", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Array)], Ve.prototype, "walletDropdownMenuOptions", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], Ve.prototype, "showEmptyState", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], Ve.prototype, "showImxLink", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], Ve.prototype, "allImxLinked", void 0), customElements.define("gu-wallets-list", Ve);

        class Ut extends e.oi {
            constructor() {
                super(...arguments), this.connectedWallet = "", this.webWalletConnecting = !1
            }

            onConnectBrowserWalletClick() {
                this.dispatchEvent(new CustomEvent("onConnectBrowserWalletClick", {bubbles: !1}))
            }

            onHardwareWalletClick() {
                this.dispatchEvent(new CustomEvent("onHardwareWalletClick", {bubbles: !1}))
            }

            onLearnMoreClick() {
                this.dispatchEvent(new CustomEvent("onLearnMoreClick", {bubbles: !1}))
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        flex-direction: column;
        width: 100%;
        background: ${(0, t.asCssProp)(o.colors.dark[900])};
        border-radius: 4px 4px 0 0;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(10))} ${(0, t.asCssProp)((0, i.gridUnits)(6))};
        justify-content: space-between;
      }
      .leftSection {
        display: flex;
        flex-direction: column;
        margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
      }
      .rightSection {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }
      .rightSection__button {
        min-width: ${(0, t.asCssProp)((0, i.gridUnits)(50))};
      }
      .rightSection__button--connectedWallet {
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        cursor: default;
      }
      .rightSection__button--connectedWallet__connectedDot {
        width: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        border-radius: 50%;
        background: ${(0, t.asCssProp)(o.colors.god.nature.secondary)};
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
      }
      .rightSection__button--walletAdded {
        cursor: default;
      }
      .rightSection__button__address {
        width: ${(0, t.asCssProp)((0, i.gridUnits)(30))};
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-small"])}) {
        .rightSection {
          flex-direction: row;
          align-items: center;
        }
        .rightSection__button--connectedWallet {
          margin-bottom: 0;
        }
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
        :host {
          flex-direction: row;
          padding: ${(0, t.asCssProp)((0, i.gridUnits)(10))} ${(0, t.asCssProp)((0, i.gridUnits)(12.5))};
        }

        .leftSection {
          margin-bottom: 0;
        }
      }
    `
            }

            render() {
                return e.dy`
      <gu-vertical-space class="leftSection">
        <gu-heading-text fillGradient="gradients.gold.simple" fillGradientTarget="bottom" size="large">
          WALLETS
        </gu-heading-text>

        <gu-vertical-space class="leftSection__infoCtas">
          <gu-simple-text-button @click=${this.onLearnMoreClick}>
            Learn more about wallet linking
          </gu-simple-text-button>
          |
          <gu-simple-text-button @click=${this.onHardwareWalletClick}> Hardware Wallet? </gu-simple-text-button>
        </gu-vertical-space>
      </gu-vertical-space>
      <gu-vertical-space class="rightSection">
        ${this.connectedWallet ? e.dy`
              <!-- We need a dot icon before we can switch to using standard button -->
              <gu-plain-square-button
                backgroundFillColor="colors.dark.700"
                borderColor="colors.dark.700"
                iconColor="colors.god.nature.secondary"
                fillColor="colors.light.700"
                class="rightSection__button rightSection__button--connectedWallet"
                title=${this.connectedWallet}
              >
                <div class="rightSection__button--connectedWallet__connectedDot"></div>
                Current web wallet: ${ye(this.connectedWallet)}
              </gu-plain-square-button>

              <!-- <gu-standard-button
                class="rightSection__button rightSection__button--connectedWallet"
                theme="dark"
                type="subtle"
                title=${this.connectedWallet}
              >
                <div class="rightSection__button--connectedWallet__connectedDot"></div>
                Current web wallet: ${ye(this.connectedWallet)}
              </gu-standard-button> -->
            ` : e.dy`
              <gu-standard-button
                class="rightSection__button rightSection__button--connectedWallet"
                theme="dark"
                icon="action_wallet"
                class="rightSection__button"
                @click=${this.onConnectBrowserWalletClick}
                type="primary"
                .loading=${this.webWalletConnecting}
              >
                Connect Web Wallet
              </gu-standard-button>
            `}
      </gu-vertical-space>
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ut.prototype, "connectedWallet", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Ut.prototype, "webWalletConnecting", void 0), customElements.define("gu-wallets-header", Ut), customElements.define("gu-modal-background", class extends e.oi {
            constructor() {
                super(...arguments), this.goldBorder = null
            }

            static get properties() {
                return {goldBorder: {type: String}}
            }

            static get styles() {
                return e.iv`
      :host {
        position: absolute !important;
        height: 100%;
        width: 100%;
        background: ${(0, t.asCssProp)(o.gradients.gunmetal.mirror("left"))};
      }

      .border {
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        height: 100%;
        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
        position: relative;
      }

      .borderGoldTop:before {
        content: '';
        display: block;
        position: absolute;
        width: calc(100% - ${(0, t.asCssProp)((0, i.gridUnits)(1))});
        left: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
        top: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(1))} solid;
        border-image-source: ${(0, t.asCssProp)(o.gradients.gold.mirror("right"))};
        border-image-slice: 1;
        border-image-width: ${(0, t.asCssProp)((0, i.gridUnits)(1))} 0 0 0;
      }
    `
            }

            render() {
                return e.dy`<div class="border ${"top" === this.goldBorder ? "borderGoldTop" : ""}"></div>`
            }
        });
        const mt = `\nlinear-gradient(\n  90deg,\n  rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.gunmetal[900]))}, 1) 0%,\n  rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.gunmetal[900]))}, 0.8) 25%,\n  rgba(0, 0, 0, 0) 50%,\n  rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.gunmetal[900]))}, 0.8) 75%,\n  rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.gunmetal[900]))}, 1) 100%\n)`;
        customElements.define("gu-two-section-modal", class extends e.oi {
            static get properties() {
                return {background: {type: String}}
            }

            static get styles() {
                return e.iv`
      ${(0, t.asCssProp)((0, t.setBoxSizing)())}

      :host {
        display: flex;
        position: relative;
        flex-direction: column;
        justify-content: center;
        width: 1200px;
        height: 800px;
        max-height: 85vh;
        border: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};

        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        background-size: cover;
      }

      :host([background='nature']) {
        background-image: ${(0, t.asCssProp)(mt)},
          url('https://images.godsunchained.com/god-art/1024/nature--aeona.webp');
        background-position-y: -238px;
      }

      :host([background='war']) {
        background-image: ${(0, t.asCssProp)(mt)},
          url('https://images.godsunchained.com/god-art/1024/war--auros.webp');
        background-position-y: -195px;
      }

      :host([background='magic']) {
        background-image: ${(0, t.asCssProp)(mt)},
          url('https://images.godsunchained.com/god-art/1024/magic--elyrian.webp');
        background-position-y: -195px;
      }

      :host([background='death']) {
        background-image: ${(0, t.asCssProp)(mt)},
          url('https://images.godsunchained.com/god-art/1024/death--malissus.webp');
        background-position-y: -330px;
      }

      :host([background='light']) {
        background-image: ${(0, t.asCssProp)(mt)},
          url('https://images.godsunchained.com/god-art/1024/light--thaeriel.webp');
        background-position-y: -267px;
      }

      :host([background='deception']) {
        background-image: ${(0, t.asCssProp)(mt)},
          url('https://images.godsunchained.com/god-art/1024/deception--ludia.webp');
        background-position-y: -336px;
      }

      :host([background='neutral']) {
        background-image: ${(0, t.asCssProp)(mt)}, url('/assets/images/misc-art/misc-art--C8-026.webp');
        background-position-y: -18px;
      }

      /* This could be improved by rendering any artId, something to look into later.
        Will be difficult though as each bg image will require a different background-position-y
      */
      :host([background='87055']) {
        background-image: ${(0, t.asCssProp)(mt)}, url('https://images.godsunchained.com/art2/1024/87055.webp');
        background-position-y: -180px;
      }

      .closeIcon {
        position: absolute;
        font-size: 24px;
        top: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        cursor: pointer;
      }
      .topSection {
        position: relative;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
      }

      .topSection__divider {
        position: absolute;
        bottom: 0;
        width: 100%;
      }

      .bottomSection {
        position: relative;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        overflow-y: auto;
        justify-content: center;
      }

      .bottomSection__cta {
        display: flex;
        justify-content: center;
      }

      .bottomSection__content {
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(24))};
        overflow-y: auto;
      }

      .bottomSection__background {
        background: #0f1b27;
        opacity: 0.9;
        width: 100%;
        height: 100%;
        position: absolute;
      }

      slot[name='bottomSectionContent']::slotted(*) {
        position: relative;
      }
    `
            }

            closeModal() {
                this.dispatchEvent(new CustomEvent("onCloseSealedDeckModal", {bubbles: !1}))
            }

            render() {
                return this.setAttribute("background", this.background), e.dy`
      <gu-vertical-space class="topSection">
        <gu-icon
          fillColor="colors.apocyan.300"
          iconLigature="close_x"
          class="closeIcon"
          @click=${this.closeModal}
        ></gu-icon>
        <slot name="topSectionSubtitle"></slot>
        <slot name="topSectionTitle"></slot>
        <slot name="topSectionHelptext"></slot>
        <img
          class="topSection__divider"
          src="/assets/images/ui-embellishments/ui--divider-simple-gradient.svg"
          alt="small divider"
        />
      </gu-vertical-space>
      <gu-vertical-space class="bottomSection">
        <div class="bottomSection__background"></div>
        <div class="bottomSection__content">
          <slot name="bottomSectionContent"></slot>
        </div>
        <gu-vertical-space class="bottomSection__cta" bottom="2x-large" top="large">
          <slot name="bottomSectionCta"></slot>
        </gu-vertical-space>
      </gu-vertical-space>
    `
            }
        });

        class Rt extends e.oi {
            constructor() {
                super(...arguments), this.entries = {}, this.active = [], this.visible = !0, this.type = "main"
            }

            static get styles() {
                return e.iv`
      :host {
        font-size: 0 !important;
        line-height: 0 !important;
        height: 100%;
        display: flex;
        justify-content: flex-end;
      }

      .navigation {
        width: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
        place-items: flex-end flex-start;
        justify-content: space-between;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        border-right: 1px solid ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        overflow: hidden;
        transition: width ease 0.3s;
        margin-left: -1px;
      }

      .navigation__items {
        width: 100%;
        display: flex;
        flex-direction: column;
        flex: 0 0 auto;
        padding: 0;
        margin: -1px 0;
        align-items: flex-end;
      }

      .navigation__item {
        width: 100%;
        padding: 0;
        margin: 0;
        cursor: pointer;
        border-bottom: 1px solid black;
        text-transform: uppercase;
        white-space: nowrap;
        overflow: hidden;
      }

      .navigation__item__link {
        display: flex;
        flex-direction: column;
        flex: 0 0 auto;
        justify-content: center;
        text-decoration: none;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(2))} 0;
        border-left: 2px solid transparent;
        border-right: 2px solid transparent;
        margin: -1px 0;
        box-sizing: border-box;

        -webkit-user-drag: none;
        -webkit-touch-callout: none;
      }

      .navigation--type-main.navigation--visible {
        width: 80px;
      }

      .navigation--type-main .navigation__items {
        width: 80px;
      }

      .navigation--type-main .navigation__item__link {
        color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        min-height: ${(0, t.asCssProp)((0, i.gridUnits)(16))};
        align-items: center;
      }

      .navigation--type-sub.navigation--visible {
        width: 130px;
      }

      .navigation--type-sub .navigation__items {
        width: 130px;
      }

      .navigation--type-sub .navigation__item__link {
        color: white;
        min-height: ${(0, t.asCssProp)((0, i.gridUnits)(10))};
        padding: 0 8px;
      }

      .navigation__item__icon {
        display: block;
        margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(7))};
        line-height: 0;
      }

      .navigation__item__name {
        max-width: 100%;
      }

      .navigation__item--active {
        background: linear-gradient(
          90deg,
          ${(0, t.asCssProp)(o.colors.gunmetal[700] + "00")} 0%,
          ${(0, t.asCssProp)(o.colors.gunmetal[700] + "ff")} 100%
        );
      }

      .navigation__item--active .navigation__item__link {
        border-right: 2px solid #c6a052;
      }

      .navigation__item--active .navigation__item__icon,
      .navigation__item--active .navigation__item__name {
        ${(0, t.asCssProp)(o.gradients.textFill(o.gradients.gold.simple("bottom")))};
      }
    `
            }

            onClick(c) {
                this.dispatchEvent(new CustomEvent("navigation", {detail: c, bubbles: !0, composed: !0}))
            }

            renderIcon(c) {
                return c.logo ? e.dy` <gu-logo class="navigation__item__icon" type="${c.logo}" size="28"></gu-logo> ` : c.icon ? e.dy` <gu-icon class="navigation__item__icon" iconLigature=${c.icon}></gu-icon> ` : e.dy``
            }

            renderEntry(c) {
                const $ = "main" === this.type ? "micro" : "tag";
                return e.dy`
      <li
        class=${(0, y.$)({
                    navigation__item: !0,
                    "navigation__item--active": this.active && this.active.indexOf(c.key) > -1
                })}
      >
        <a
          class="navigation__item__link"
          href="javascript:void(0);"
          @click=${() => this.onClick(c)}
          data-test-id="navigation.item.link"
        >
          ${this.renderIcon(c)}

          <gu-simple-text class="navigation__item__name" kind="${$}" fontWeight="bold">
            ${c.name}
          </gu-simple-text>
        </a>
      </li>
    `
            }

            renderGroups(c) {
                return e.dy`
      ${Object.keys(c).map($ => e.dy`
          <ul class="navigation__items navigation__items--${$}">
            ${this.renderEntries(c[$])}
          </ul>
        `)}
    `
            }

            renderEntries(c) {
                return e.dy`
      ${Object.keys(c).map($ => this.renderEntry(Object.assign(Object.assign({}, c[$]), {key: $})))}
    `
            }

            render() {
                return e.dy`
      <nav
        class="${(0, y.$)({navigation: !0, [`navigation--type-${this.type}`]: !0, "navigation--visible": this.visible})}"
      >
        ${this.renderGroups(this.entries)}
        <slot></slot>
      </nav>
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Rt.prototype, "entries", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Rt.prototype, "active", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Rt.prototype, "visible", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Rt.prototype, "type", void 0), customElements.define("gu-navigation", Rt);

        class ls extends e.oi {
            constructor() {
                super(...arguments), this.highPriority = !1
            }

            static get styles() {
                return e.iv`
      :host {
        display: block;
        width: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        border-radius: 50%;
        background: var(--gu-yellow);
      }

      :host(.highPriority) {
        background: ${(0, t.asCssProp)(o.colors.god.war.primary)};
      }
    `
            }

            render() {
                return this.highPriority ? this.classList.add("highPriority") : this.classList.remove("highPriority"), e.dy``
            }
        }

        (0, r.gn)([(0, g.C)({type: Boolean}), (0, r.w6)("design:type", Object)], ls.prototype, "highPriority", void 0), customElements.define("gu-notification-bubble", ls);

        class Cs extends e.oi {
            constructor() {
                super(...arguments), this.progress = 0, this.coloring = "apocyan"
            }

            static get styles() {
                return e.iv`
      ${(0, t.asCssProp)((0, t.setBoxSizing)())}

      :host {
        display: block;
        background: var(--gu-bg-gray);
        height: 24px;
        padding: 4px;
        position: relative;
      }

      :host::before {
        content: '';
        position: absolute;
        top: 1px;
        left: 1.5px;
        height: calc(100% - 2px);
        width: calc(100% - 3px);
      }

      .progress-bar-border {
        position: absolute;
        top: 5px;
        left: 5px;
        bottom: 5px;
        right: 10px;
      }

      .progress-bar-border::before {
        content: '';
        display: block;
        height: 100%;
        width: var(--barWidth);
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        ${(0, t.asCssProp)(o.animation.slowTransition("width"))};
      }

      .progress-bar {
        position: absolute;
        top: 1px;
        left: 0;
        bottom: 1px;
        right: 0;
      }

      .progress-bar::before {
        content: '';
        display: block;
        height: 100%;
        width: calc(var(--barWidth) - 1px);
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        ${(0, t.asCssProp)(o.animation.slowTransition("width"))};
      }

      :host .progress-bar-border::before {
        background: var(--gu-blue);
      }

      :host .progress-bar::before {
        background: var(--gu-blue);
      }

      :host([size='small']) {
        height: 12px;
        padding: 2px 3px;
      }

      :host([size='small']) .progress-bar-border {
        top: 2px;
        left: 3px;
        bottom: 2px;
        right: 3px;
      }

      :host([size='small']) .progress-bar {
        top: 1px;
        left: 0;
        bottom: 1px;
        right: 0;
      }

      :host([size='small']) .progress-bar-border::before,
      :host([size='small']) .progress-bar::before {
        border-radius: 1px;
      }
    `
            }

            render() {
                return this.setAttribute("coloring", ''), this.style.setProperty("--barWidth", `${this.progress}%`), e.dy`
      <div class="progress-bar-border">
        <div class="progress-bar" data-progress="${this.progress}" data-test-id="progress-bar"></div>
      </div>
    `
            }
        }

        (0, r.gn)([(0, g.C)({type: Number}), (0, r.w6)("design:type", Object)], Cs.prototype, "progress", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Cs.prototype, "coloring", void 0), customElements.define("gu-hex-progress-bar", Cs), customElements.define("gu-progress-bar", class extends e.oi {
            constructor() {
                super(...arguments), this.progress = 0, this.withLogo = !1
            }

            static get properties() {
                return {progress: {type: Number}, withLogo: {type: Boolean}}
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        width: 100%;
        flex: 1 1 auto;
        align-items: center;
      }

      .progress-bar {
        display: flex;
        border-radius: 5px;
        position: relative;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        height: 10px;
        width: 100%;
      }

      .progress-bar__fill {
        border-radius: 4px;
        height: 8px;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        margin: 1px;
        transition: width 500ms linear;
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-large"])}) {
        .box__filling {
          /* Looks better at larger viewports like this. */
          margin: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
          height: calc(100% - ${(0, t.asCssProp)((0, i.gridUnits)(2))});
        }
        .bridge {
          /* width: ${(0, t.asCssProp)((0, i.gridUnits)(4))}; */
        }
      }
    `
            }

            render() {
                return e.dy`
      ${this.withLogo ? e.dy`<gu-logo></gu-logo>` : ""}
      <div class="progress-bar">
        <div class="progress-bar__fill" style="width: ${(0, t.asCssProp)(this.progress.toString() + "%")};"></div>
      </div>
    `
            }
        });

        class Ss extends e.oi {
            static animationStyles() {
                return e.iv`
      :host {
        opacity: 0;
        transform: translateY(60%);

        animation-duration: 0.3s;
        animation-name: scrollIn;
        animation-timing-function: ease-in;
        animation-fill-mode: forwards;
      }

      @keyframes scrollIn {
        from {
          opacity: 0;
          transform: translateY(60%);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    `
            }

            firstUpdated(c) {
                super.firstUpdated(c), setTimeout(() => {
                    this.dispatchEvent(new CustomEvent("complete", {bubbles: !0, composed: !0}))
                }, this.duration)
            }
        }

        class hn extends Ss {
            constructor() {
                super(...arguments), this.progress = 0
            }

            get duration() {
                return 500
            }

            static get styles() {
                return e.iv`
      :host {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: ${(0, t.asCssProp)((0, i.gridUnits)(3.5))};
      }

      .milestone-progress__rewards {
        display: flex;
        width: 100%;
        justify-content: center;
      }

      .milestone-progress__rewards-progress-text {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      .milestone-progress__rewards-titles {
        display: flex;
        width: 100%;
        justify-content: center;

        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(3.5))};
      }

      .milestone-progress__rewards-title {
        width: 20%;
      }

      .milestone-progress__previous-rewards ::slotted(*) {
        transform: translateX(50%);
      }

      .milestone-progress__next-rewards ::slotted(*) {
        transform: translateX(-50%);
      }

      .milestone-progress__rewards-spacer {
        display: flex;
        justify-content: center;
        width: ${(0, t.asCssProp)(this.progressWidth.toString())}%;
      }

      .milestone-progress__progress-bar-container {
        width: 100%;
        height: 16px;
        display: flex;

        box-sizing: border-box;
        padding: 2px 0 2px 0;
        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        border: 1px solid ${(0, t.asCssProp)(o.colors.gold[500])};
        border-left: 0;
        border-right: 0;
      }

      .milestone-progress__progress-bar-overlay {
        position: relative;
      }

      .milestone-progress__gradient {
        position: absolute;
        ${(0, t.inset)(0)};
        z-index: 2;
        background: linear-gradient(90deg, #0a0a0add 0%, #00000000 7%, #00000000 93%, #0a0a0add 100%);
      }

      .milestone-progress__extra {
        flex-grow: 1;
      }

      .milestone-progress__extra--first {
        background-color: ${(0, t.asCssProp)(o.colors.apocyan[500])};
      }

      .milestone-progress__extra--last {
        background-color: ${(0, t.asCssProp)(o.colors.apocyan[100])};
      }

      .milestone-progress__container {
        position: relative;
        width: ${(0, t.asCssProp)(`${this.progressWidth.toString()}%`)};
      }

      .milestone-progress__milestone-gem-outer {
        position: absolute;

        width: 18px;
        height: 18px;

        top: 50%;

        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        border: 2px solid ${(0, t.asCssProp)(o.colors.gold[500])};

        z-index: 2;
      }

      .milestone-progress__milestone-gem-outer::before {
        content: '';
        position: absolute;
        ${(0, t.inset)(2)}
        background-image: ${(0, t.asCssProp)(o.gradients.apocyan.simple())};
      }

      .milestone-progress__milestone-gem-inner {
        position: absolute;

        ${(0, t.inset)(4)}

        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};

        z-index: 3;
      }

      .milestone-progress__milestone-gem-inner::before {
        content: '';
        position: absolute;
        display: block;

        ${(0, t.inset)(2)}

        border: 2px solid ${(0, t.asCssProp)(o.colors.god.light.primary)};
        background-image: ${(0, t.asCssProp)(o.gradients.gold.simple("right"))};
        box-shadow: 0px 0px 3px rgba(175, 250, 237, 0.4);
      }

      .milestone-progress__milestone-gem-outer:first-child {
        left: 0;
        transform: translate(-50%, -50%) rotate(45deg);
      }

      .milestone-progress__milestone-gem-outer:last-child {
        right: 0;
        transform: translate(50%, -50%) rotate(45deg);
      }

      /** Unachineved milestone **/
      .milestone-progress__milestone-gem-outer--unachieved::before {
        background-color: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
        background-image: none;
      }

      .milestone-progress__milestone-gem-outer--unachieved .milestone-progress__milestone-gem-inner::before {
        border: 0;
        background-image: none;
        box-shadow: none;
      }

      .milestone-progress__progress-bar {
        position: absolute;
        ${(0, t.inset)(0)}

        z-index: 1;
      }

      .milestone-progress__progress-bar::before {
        content: '';
        position: absolute;
        ${(0, t.inset)(0)}

        width: var(--barWidth);

        border-radius: 4px;
        background-image: ${(0, t.asCssProp)(o.gradients.apocyan.simple("left"))};

        z-index: 1;
      }

      ${Ss.animationStyles()}
    `
            }

            render() {
                const c = this.progress >= 100 ? 100 : Math.min(this.progress, 98);
                return this.style.setProperty("--barWidth", `${c}%`), e.dy`
      <div class="milestone-progress__rewards">
        <div class="milestone-progress__previous-rewards">
          <slot name="previous-reward-icon"></slot>
        </div>
        <div class="milestone-progress__rewards-spacer">
          <slot name="next-rewards-text"></slot>
        </div>
        <div class="milestone-progress__next-rewards">
          <slot name="next-reward-icon"></slot>
        </div>
      </div>
      <div class="milestone-progress__progress-bar-overlay">
        <div class="milestone-progress__gradient"></div>
        <div class="milestone-progress__progress-bar-container">
          <div class="milestone-progress__extra milestone-progress__extra--first"></div>
          <div class="milestone-progress__container">
            <div
              data-test-id="milestone-progress-bar.gem-start"
              class=${(0, y.$)({
                    "milestone-progress__milestone-gem-outer": !0,
                    "milestone-progress__milestone-gem-outer--unachieved": 0 === this.progress
                })}
            >
              <div class="milestone-progress__milestone-gem-inner"></div>
            </div>
            <div class="milestone-progress__progress-bar" progress=${this.progress}></div>
            <div
              data-test-id="milestone-progress-bar.gem-end"
              class=${(0, y.$)({
                    "milestone-progress__milestone-gem-outer": !0,
                    "milestone-progress__milestone-gem-outer--unachieved": this.progress < 100
                })}
            >
              <div class="milestone-progress__milestone-gem-inner"></div>
            </div>
          </div>
          <div
            data-test-id="milestone-progress-bar.trail"
            class=${(0, y.$)({
                    "milestone-progress__extra": !0,
                    "milestone-progress__extra--last": this.progress >= 100
                })}
          ></div>
        </div>
      </div>
      <div class="milestone-progress__rewards-titles">
        <div class="milestone-progress__rewards-title milestone-progress__previous-rewards">
          <slot name="previous-reward-title"></slot>
        </div>
        <div class="milestone-progress__rewards-spacer"></div>
        <div class="milestone-progress__rewards-title  milestone-progress__next-rewards">
          <slot name="next-reward-title"></slot>
        </div>
      </div>
    `
            }
        }

        hn.progressWidth = 60, (0, r.gn)([(0, g.C)({type: Number}), (0, r.w6)("design:type", Object)], hn.prototype, "progress", void 0), customElements.define("gu-milestone-progress-bar", hn), customElements.define("gu-progress-step-counter", class extends e.oi {
            constructor() {
                super(...arguments), this.totalSteps = 9, this.filledSteps = 2, this.fillGradient = "gradients.apocyan.simple", this.fillGradientTarget = "bottom", this.bridgeColor = "colors.apocyan.300", this.squareSize = `${(0, i.gridUnits)(4)}`, this.squareBridgeRatio = "3/4"
            }

            static get properties() {
                return {
                    filledSteps: {type: Number},
                    totalSteps: {type: Number},
                    squareSize: {type: String},
                    fillGradient: {type: String},
                    fillGradientTarget: {type: String},
                    bridgeColor: {type: String}
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
      }

      .box {
        display: flex;
        position: relative;
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} solid;
        border-color: ${(0, t.asCssProp)(o.colors.gunmetal[300])};
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        position: relative;
        width: var(--squareSize);
        height: var(--squareSize);
        transform: rotate(45deg);
      }

      .box:last-child {
        margin-right: 0;
      }

      .box--filled {
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} solid;
        border-image-slice: 1;
        border-width: ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
        border-image-source: var(--backgroundFillGradient);
      }

      .box--filled .box__filling {
        display: block;
      }

      .box__filling {
        display: none;
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
        background: var(--backgroundFillGradient);
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(.75))};
        width: 100%;
        height: calc(100% - ${(0, t.asCssProp)((0, i.gridUnits)(1.5))});
      }

      .bridge {
        margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(-3))};
        margin-right: 0px;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(.25))};
        margin-top: auto;
        margin-bottom: auto;
        /* width: ${(0, t.asCssProp)((0, i.gridUnits)(3))}; */
        width: var(--bridgeSize);

        background: ${(0, t.asCssProp)(o.colors.gunmetal[300])};
      }

      .bridge:last-child {
        display: none;
      }

      .bridge--filled {
        background: var(--backgroundFillColor);
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-large"])}) {
        .box__filling {
          /* Looks better at larger viewports like this. */
          margin: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
          height: calc(100% - ${(0, t.asCssProp)((0, i.gridUnits)(2))});
        }
        .bridge {
          /* width: ${(0, t.asCssProp)((0, i.gridUnits)(4))}; */
        }
      }
    `
            }

            render() {
                return (0, v.setPropertyGradientFromVariable)(this.style, this.fillGradient, "--backgroundFillGradient", this.fillGradientTarget), (0, v.setPropertyColorFromVariable)(this.style, this.bridgeColor, "--backgroundFillColor"), this.style.setProperty("--squareSize", this.squareSize), this.style.setProperty("--bridgeSize", `calc(${this.squareSize} * ${this.squareBridgeRatio})`), e.dy`
      ${new Array(this.totalSteps).fill(0).map((c, $) => {
                    const z = $ < this.filledSteps;
                    return e.dy`
          <div class="box ${z ? "box--filled" : ""}">
            <div class="box__filling"></div>
          </div>
          <div class="bridge ${z ? "bridge--filled" : ""}"></div>
        `
                })}
    `
            }
        });
        let mn = class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: flex;
        flex-flow: column nowrap;
        position: relative;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(3))} 0 0;
      }

      :host::before {
        content: '';
        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;
        width: 100%;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
      }

      :host::after {
        content: '';
        position: absolute;
        z-index: 2;
        top: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        left: 0;
        width: 100%;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        background: ${(0, t.asCssProp)(o.colors.gold[500])};
      }

      .sectionBackground,
      .sectionBackground__picture {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }

      .sectionBackground {
        background: ${(0, t.asCssProp)(o.colors.light[100])};
      }

      .sectionBackground__picture {
        opacity: 0.12;
        filter: grayscale(1);
      }

      .sectionBackground__picture__img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .ribbons {
        position: absolute;
        top: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        left: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
        width: ${(0, t.asCssProp)((0, i.gridUnits)(55))};
        display: none;
      }

      .ribbons--right {
        left: auto;
        right: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
      }

      .header {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .header__bodyCopy {
        width: 100%;
        margin: 0 auto;
        max-width: 800px;
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(12))};
      }

      .slotContent {
        position: relative;
      }

      @media only screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
        .ribbons {
          display: block;
        }
      }
    `
            }

            render() {
                return e.dy`
      <div class="sectionBackground">
        <picture class="sectionBackground__picture">
          <source
            srcset="
              /assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@3x.webp 2250w,
              /assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@2x.webp 1500w,
              /assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@1x.webp  750w
            "
            type="image/webp"
          />
          <source
            srcset="
              /assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@3x.jpg 2250w,
              /assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@2x.jpg 1500w,
              /assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@1x.jpg  750w
            "
            type="image/jpg"
          />
          <img
            src="/assets/images/misc-art/misc-art--outdoor-match-infront-of-palace@1x.jpg"
            alt=""
            class="sectionBackground__picture__img"
          />
        </picture>
      </div>

      <img class="ribbons" src="/assets/images/ui-embellishments/ui--ribbons.svg" alt="Gold and black UI Ribbons" />

      <img
        class="ribbons ribbons--right"
        src="/assets/images/ui-embellishments/ui--ribbons-alt.svg"
        alt="Gold and black UI Ribbons"
      />

      <header class="header">
        <gu-vertical-space top="5x-large" bottom="medium">
          <gu-heading-text size="large" fillColor=${o.colors.dark[900]} align="center"> PRIZE DRAWS </gu-heading-text>
        </gu-vertical-space>

        <gu-paragraph-text class="header__bodyCopy" align="center" size="large" fillColor=${o.colors.dark[700]}>
          Earn draw tickets by purchasing Trial of the Gods packs for a chance to win some truly divine prizes including
          a one-of-a-kind Mythic Card.
        </gu-paragraph-text>

        <gu-vertical-space top="large">
          <gu-simple-text-button href="https://playgu.co/totg-prizes" target="_blank" fillColor=${o.colors.dark[700]}>
            View Prizes
          </gu-simple-text-button>
        </gu-vertical-space>
      </header>

      <div class="slotContent">
        <slot></slot>
      </div>
    `
            }
        };
        mn = (0, r.gn)([(0, zt.M)("gu-raffles-and-prizes-section")], mn), n(28917), n(29939), customElements.define("gu-reward-display", class extends e.oi {
            static get properties() {
                return {text: {type: String}, iconLigature: {type: String}, imageUrl: {type: String}}
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        width: ${(0, t.asCssProp)((0, i.gridUnits)(46))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(80))};
        background: linear-gradient(180deg, rgba(255, 255, 255, 0.1) 0%, rgba(15, 27, 39, 0) 100%);
        border: 1px solid;
        border-color: rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.light[100]))}, 0.1);
      }

      .rewardGraphic {
        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(15))};
      }

      .fancyUnderscore {
        width: ${(0, t.asCssProp)((0, i.gridUnits)(25))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(1))};

        /* Unable to use getColor here - it's colors.quality.diamond */
        box-shadow: 0px 0px 8px rgba(148, 230, 251, 0.5);
        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(8))};
        background: linear-gradient(
          270deg,
          rgba(0, 0, 0, 0) -1.52%,
          ${(0, t.asCssProp)(o.colors.apocyan[500])} 33.58%,
          ${(0, t.asCssProp)(o.colors.apocyan[100])} 48.76%,
          ${(0, t.asCssProp)(o.colors.apocyan[500])} 66.2%,
          rgba(0, 0, 0, 0) 102.27%
        );
      }

      .titleText {
        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(3))};
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-large"])}) {
        :host {
          width: ${(0, t.asCssProp)((0, i.gridUnits)(57))};
          height: ${(0, t.asCssProp)((0, i.gridUnits)(100))};
        }
      }
    `
            }

            render() {
                return e.dy`
      <gu-reward-graphic
        class="rewardGraphic"
        .imageUrl=${this.imageUrl}
        .iconLigature=${this.iconLigature}
      ></gu-reward-graphic>
      <div class="fancyUnderscore"></div>

      ${this.text ? e.dy`
            <gu-paragraph-text
              class="titleText"
              align="center"
              fillColor="colors.light.100"
              fontWeight="bold"
              kind="large"
              text=${this.text}
            >
            </gu-paragraph-text>
          ` : ""}
    `
            }
        }), customElements.define("gu-reward-graphic", class extends e.oi {
            static get properties() {
                return {iconLigature: {type: String}, imageUrl: {type: String}}
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        position: relative;
        justify-content: center;
        align-items: center;
      }

      .outerSquare {
        display: flex;
        width: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
        transform: rotate(45deg);

        border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} solid;
        border-image-slice: 1;
        border-image-source: ${(0, t.asCssProp)(o.gradients.apocyan.simple("top"))};
        background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
      }

      .outerSquare__innerSquare {
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        width: 100%;
        background: ${(0, t.asCssProp)(o.colors.dark[900])};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} ${(0, t.asCssProp)(o.colors.apocyan[500])} solid;
      }

      .icon {
        position: absolute;
        margin: auto;
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(15))};
      }

      .rewardImage {
        position: absolute;
        margin: auto;
        width: 130%;
      }

      .rewardImage__img {
        width: 100%;
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-large"])}) {
        .outerSquare {
          width: ${(0, t.asCssProp)((0, i.gridUnits)(30))};
          height: ${(0, t.asCssProp)((0, i.gridUnits)(30))};
        }
        .icon {
          font-size: ${(0, t.asCssProp)((0, i.gridUnits)(20))};
        }
      }
    `
            }

            render() {
                return e.dy`
      <div class="outerSquare">
        <div class="outerSquare__innerSquare"></div>
      </div>
      ${this.iconLigature ? e.dy`
            <gu-icon
              class="icon"
              iconLigature=${this.iconLigature}
              fillGradientTarget="top"
              fillGradient="gradients.apocyan.simple"
            ></gu-icon>
          ` : ""}
      ${this.imageUrl ? e.dy`
            <picture class="rewardImage">
              <source srcset=${this.imageUrl} type="image/png" />
              <source srcset=${this.imageUrl} type="image/png" />
              <img class="rewardImage__img" alt="image of the reward" src=${this.imageUrl} />
            </picture>
          ` : ""}
    `
            }
        });
        const cs = (0, t.asCssProp)((0, i.gridUnits)(3));
        customElements.define("gu-ribbon-banner", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: block;
        position: relative;
      }

      .ribbon-banner__left,
      .ribbon-banner__right {
        display: none;
        position: absolute;
        top: -${cs};
        width: calc(${cs} * 2);
        height: 100%;
        background: ${(0, t.asCssProp)(o.colors.gold[500])};
      }

      .ribbon-banner__left::before,
      .ribbon-banner__right::before {
        content: '';
        position: absolute;
        width: ${cs};
        height: ${cs};
        background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        top: 0;
        clip-path: polygon(0 100%, 0 0, 100% 100%);
      }

      .ribbon-banner__left {
        left: 0;
      }

      .ribbon-banner__left::before {
        right: 0;
        transform: rotate(-90deg);
      }

      .ribbon-banner__right::before {
        left: 0;
      }

      .ribbon-banner__right {
        right: 0;
      }

      .ribbon-banner__border {
        position: relative;
        background: ${(0, t.asCssProp)(o.colors.quality.mythic)};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(1))} solid;
        border-image-source: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
        border-image-slice: 1;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
      }

      .ribbon-banner__content {
        border: 1px solid;
        border-image-source: ${(0, t.asCssProp)(o.gradients.gold.simple("bottom"))};
        border-image-slice: 1;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(4))} 0 ${(0, t.asCssProp)((0, i.gridUnits)(5))};
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-small"])}) {
        :host {
          padding: 0 ${cs};
        }

        .ribbon-banner__left,
        .ribbon-banner__right {
          display: block;
        }
      }
    `
            }

            render() {
                return e.dy`
      <i class="ribbon-banner__left"></i>
      <i class="ribbon-banner__right"></i>
      <div class="ribbon-banner__border">
        <div class="ribbon-banner__content" part="innerContainer">
          <slot data-test-id="ribbon-banner-slot"></slot>
        </div>
      </div>
    `
            }
        }), n(65694);

        class Nn extends e.oi {
            static get styles() {
                return e.iv`
      ${(0, t.asCssProp)((0, t.setBoxSizing)())}

      :host {
        display: flex;
        justify-content: center;
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(11))};
      }

      .socialButton {
        margin-right: 3vw;
        cursor: pointer;
      }

      .socialButton:last-child {
        margin: 0;
      }

      :host([smallIcons='true']) {
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(8))};
      }
    `
            }

            gotoSocialLink(c) {
                window.location.href = c
            }

            render() {
                return e.dy`
      ${this.accounts.map(c => e.dy`
        <gu-icon
          class="socialButton"
          iconLigature="social_${c.name}"
          fillGradient=${o.gradients.gold.simple("bottom")}
          @click=${() => this.gotoSocialLink(c.link)}"
        ></gu-icon>
      `)}
    `
            }
        }

        (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", Object)], Nn.prototype, "accounts", void 0), (0, r.gn)([(0, g.C)(), (0, r.w6)("design:type", String)], Nn.prototype, "smallIcons", void 0), customElements.define("gu-social-buttons-row", Nn);
        const Qn = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        customElements.define("gu-star-store-sale-item", class extends e.oi {
            constructor() {
                super(...arguments), this.imageUrl = "", this.name = "", this.price = 0, this.title = "", this.showCountdown = !1
            }

            static get properties() {
                return {
                    imageUrl: {type: String},
                    name: {type: String},
                    title: {type: String},
                    price: {type: Number},
                    durationType: {type: String},
                    endTimestamp: {type: String},
                    showCountdown: {type: Boolean}
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        flex-basis: 51%;
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(3.5))};
        flex-direction: column;
        justify-content: center;
        background: ${(0, t.asCssProp)(o.gradients.gunmetal.mirror("left"))};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        align-items: center;
        min-width: ${(0, t.asCssProp)((0, i.gridUnits)(85))};
        width: ${(0, t.asCssProp)((0, i.gridUnits)(85))};
        position: relative;
        padding-top: ${(0, t.asCssProp)((0, i.gridUnits)(8))};
      }

      @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping.medium)}) {
        :host {
          flex-basis: 34%;
          min-width: unset;
        }
      }

      @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping.large)}) {
        :host {
          flex-basis: 21%;
        }
      }

      .divider {
        max-width: 100%;
        margin-top: auto;
      }

      .image {
        max-width: 100%;
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(1))} ${(0, t.asCssProp)((0, i.gridUnits)(4))};
        flex-grow: 1;
      }

      .image__img {
        max-width: 100%;
      }

      .middleSection {
        display: flex;
        flex-direction: column;
        height: ${(0, t.asCssProp)((0, i.gridUnits)(35))};
        align-items: center;
      }

      .middleSection__cta {
        margin-top: auto;
      }

      .middleSection__name {
        padding: 0 ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        text-transform: uppercase;
        margin: auto;
      }

      .middleSection__cta__price {
        color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
        display: flex;
        align-items: center;
      }

      .middleSection__cta__icon {
        display: inline-flex;
        font-size: 28px;
      }

      .bottomSection {
        margin-top: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(2))} 0;
      }

      .helpIcon {
        position: absolute;
        top: 0;
        right: 0;
        margin: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        font-size: 20px;
        cursor: pointer;
      }

      .specialBanner {
        position: absolute;
        top: ${(0, t.asCssProp)((0, i.gridUnits)(-2))};
        left: ${(0, t.asCssProp)((0, i.gridUnits)(-2))};
      }
    `
            }

            buyItem() {
                this.dispatchEvent(new CustomEvent("onBuyItem", {composed: !0}))
            }

            moreInfo() {
                this.dispatchEvent(new CustomEvent("onMoreInfo", {composed: !0}))
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.timer && clearInterval(this.timer)
            }

            figureOutTime() {
                this.endTimestampEpoch = Math.round(new Date(this.endTimestamp).getTime() / 1e3), this.endDate = new Date(this.endTimestamp);
                const $ = this.endTimestampEpoch - 86400, z = Math.round((new Date).getTime() / 1e3);
                if (z > $) return void (this.showCountdown = !0);
                const se = $ - z;
                this.timer && clearInterval(this.timer), this.timer = window.setInterval(() => {
                    this.showCountdown = !0
                }, 1e3 * se + 1e3)
            }

            render() {
                return this.figureOutTime(), e.dy`
      <gu-icon @click=${this.moreInfo} iconLigature="help" class="helpIcon"></gu-icon>

      <gu-star-store-special-banner
        class="specialBanner"
        durationType=${this.durationType}
      >
      ${this.title}
      </gu-star-store-special-banner>

      <picture class="image">
        <source srcset="${this.imageUrl}" type="image/jpg" />
        <img class="image__img" src="${this.imageUrl}" />
      </picture>

      <img
        src="/assets/images/ui-embellishments/ui--divider-complex-2.svg"
        class="divider"
        alt="extra detailed diamond divider"
      />

      <gu-vertical-space top="large" bottom="x-large" class="middleSection">
        <gu-paragraph-text
          kind="large"
          fontWeight="bold"
          align="center"
          fillColor="colors.light.100"
          class="middleSection__name"
          >${this.name}
        </gu-paragraph-text>

        <gu-primary-hex-button @click=${this.buyItem} class="middleSection__cta" size="large">
          BUY WITH&nbsp;<span class="middleSection__cta__price">
            ${this.price}
            <gu-icon
              class="middleSection__cta__icon"
              iconLigature="collectable_stars"
              fillColor="colors.apocyan.300"
            ></gu-icon
          </span>
        </gu-primary-hex-button>
      </gu-vertical-space>

      ${this.showCountdown ? e.dy`
              <gu-vertical-space class="bottomSection">
                <gu-simple-text kind="tag" align="center" fillColor="colors.light.100" class="name">
                  AVAILABLE FOR &nbsp;
                </gu-simple-text>
                <gu-countdown-timer
                  simpleTextDisplay=${!0}
                  simpleTextKind="tag"
                  .showFields=${["hours", "minutes", "seconds"]}
                  padZeroes=${!0}
                  targetTime=${this.endTimestampEpoch}
                ></gu-countdown-timer>
              </gu-vertical-space>
            ` : e.dy`
              <gu-vertical-space class="bottomSection">
                <gu-simple-text kind="tag" align="center" fillColor="colors.light.100" class="name">
                  AVAILABLE UNTIL ${this.endDate.getDate()} ${Qn[this.endDate.getUTCMonth()].slice(0, 3)}
                  ${this.endDate.getUTCFullYear()}
                </gu-simple-text>
              </gu-vertical-space>
            `}
    `
            }
        }), customElements.define("gu-star-store-special-banner", class extends e.oi {
            constructor() {
                super(...arguments), this.durationType = "daily"
            }

            static get properties() {
                return {durationType: {type: String}}
            }

            static get styles() {
                return e.iv`
      :host {
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        background: linear-gradient(
          90deg,
          ${(0, t.asCssProp)(o.colors.gunmetal[300])} 0.91%,
          ${(0, t.asCssProp)(o.colors.gunmetal[700])} 100%
        );
        width: ${(0, t.asCssProp)((0, i.gridUnits)(56))};
        filter: drop-shadow(4px 4px 8px rgba(0, 0, 0, 0.5));
      }

      :host([durationType='monthly']) {
        background: ${(0, t.asCssProp)(o.gradients.gold.simple("right"))};
        border-color: ${(0, t.asCssProp)(o.colors.gold[100])};
      }

      gu-vertical-space {
        position: relative;
      }

      gu-paragraph-text {
        padding-left: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        text-transform: uppercase;
      }

      .border {
        height: 100%;
        width: 100%;
        margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(-.25))};
        position: absolute;
      }

      .border:before {
        content: '';
        display: block;
        position: absolute;
        height: calc(100% + ${(0, t.asCssProp)((0, i.gridUnits)(.5))});
        width: calc(100% - ${(0, t.asCssProp)((0, i.gridUnits)(1))});
        left: calc(${(0, t.asCssProp)((0, i.gridUnits)(-1.5))} - 1px);
        top: ${(0, t.asCssProp)((0, i.gridUnits)(-1))};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(1))} solid;
        border-image-source: ${(0, t.asCssProp)(o.gradients.gold.mirror("top"))};
        border-image-slice: 1;
        border-image-width: 0 0 0 ${(0, t.asCssProp)((0, i.gridUnits)(1))};
      }
    `
            }

            render() {
                return e.dy`
      <gu-vertical-space both="x-small">
        <div class="border"></div>
        <gu-paragraph-text
          kind="large"
          fontWeight="bold"
          fillColor=${"monthly" === this.durationType ? "colors.gunmetal.900" : "colors:light:100"}
        >
          <slot></slot>
        </gu-paragraph-text>
      </gu-vertical-space>
    `
            }
        }), customElements.define("gu-stats-banner", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: block;
        position: relative;
      }

      .stats-banner__content {
        max-width: 140px;
      }

      .stats-banner__middle {
        max-width: 360px;
      }

      .stats-banner__spacer {
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        box-shadow: inset 0 0 0 1.5px ${(0, t.asCssProp)(o.colors.gold[500])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
        display: flex;
        transform: rotate(-45deg);
      }

      .stats-banner__spacer::before {
        content: '';
        width: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        background: ${(0, t.asCssProp)(o.colors.gold[500])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
      }

      .stats-banner__middle,
      .stats-banner__spacer-middle {
        display: none;
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
        .stat--middle {
          display: block;
        }
        .stats-banner__spacer--middle {
          display: flex;
        }
      }
    `
            }

            render() {
                return e.dy`
      <gu-ribbon-banner>
        <div class="stats-banner__content">
          <gu-heading-text
            size="x-small"
            .responsiveSize=${[{breakpoint: "medium", size: "large"}]}
            align="center"
            fillColor="colors.dark.900"
          >
            $17M+
          </gu-heading-text>
          <gu-paragraph-text kind="small" align="center" fillColor="colors.dark.500">
            Worth of cards exchanged
          </gu-paragraph-text>
        </div>

        <i class="stats-banner__spacer stats-banner__spacer-middle"></i>

        <div class="stat stats-banner__middle">
          <gu-heading-text
            size="x-small"
            .responsiveSize=${[{breakpoint: "medium", size: "small"}]}
            align="center"
            fillColor="colors.dark.900"
          >
            <h2>Led by Chris Clay</h2>
          </gu-heading-text>
          <gu-paragraph-text
            kind="small"
            .responsiveKind=${[{breakpoint: "medium", kind: "large"}]}
            align="center"
            fillColor="colors.dark.500"
          >
            The Former Game Director of Magic: The Gathering Arena
          </gu-paragraph-text>
        </div>

        <i class="stats-banner__spacer"></i>

        <div class="stat">
          <gu-heading-text
            size="x-small"
            .responsiveSize=${[{breakpoint: "medium", size: "large"}]}
            align="center"
            fillColor="colors.dark.900"
          >
            $570k
          </gu-heading-text>
          <gu-paragraph-text kind="small" align="center" fillColor="colors.dark.500">
            Tournament Prize Pool
          </gu-paragraph-text>
        </div>
      </gu-ribbon-banner>
    `
            }
        });

        class zn extends e.oi {
            constructor() {
                super(...arguments), this.selectedOptionIndex = 0
            }

            static get styles() {
                return e.iv`
      .two-value-switch__toggle {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        user-select: none;
      }
    `
            }

            onClick() {
                this.dispatchEvent(new CustomEvent("switched", {
                    composed: !0,
                    detail: {selectedOption: this.selectedOption}
                })), this.selectedOptionIndex = 0 === this.selectedOptionIndex ? 1 : 0
            }

            get selectedOption() {
                return this.options[this.selectedOptionIndex]
            }

            render() {
                return this.options && 2 === this.options.length ? e.dy`
      <a
        role="button"
        class="two-value-switch__toggle"
        @click=${() => this.onClick()}
        data-test-id="two-value-switch-toggle"
      >
        <gu-icon iconLigature="action_switch" fillColor="colors.light.500"></gu-icon>
        <gu-paragraph-text align="center" kind="tag" fillColor="colors.light.500" .text=${this.selectedOption.value}>
        </gu-paragraph-text>
      </a>
    ` : e.dy``
            }
        }

        (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Array
        }), (0, r.w6)("design:type", Array)], zn.prototype, "options", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Number
        }), (0, r.w6)("design:type", Number)], zn.prototype, "selectedOptionIndex", void 0), customElements.define("gu-two-value-switch", zn);

        class Un extends e.oi {
            constructor() {
                super(...arguments), this.values = [], this.selectedIndex = 0, this.idPrefix = "", this.onClick = (c, $) => {
                    this.selectedIndex = $, this.dispatchEvent(new CustomEvent("onItemClicked", {
                        composed: !0,
                        detail: {index: $, value: c}
                    }))
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        flex-direction: row;
      }
      gu-square-selection-row-item:not(:last-child) {
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
      }
    `
            }

            render() {
                return e.dy`
      ${this.values.map((c, $) => e.dy`<gu-square-selection-row-item
          .selected=${$ === this.selectedIndex}
          .value="${c}"
          @click=${() => this.onClick(c, $)}
          id=${`${this.idPrefix}item-${c}`}
        >
        </gu-square-selection-row-item>`)}
    `
            }
        }

        (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Array
        }), (0, r.w6)("design:type", Array)], Un.prototype, "values", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Number
        }), (0, r.w6)("design:type", Object)], Un.prototype, "selectedIndex", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: String
        }), (0, r.w6)("design:type", Object)], Un.prototype, "idPrefix", void 0), customElements.define("gu-square-selection-row", Un);

        class Wn extends e.oi {
            constructor() {
                super(...arguments), this.value = "", this.selected = !1
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        width: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(9))};
        border: ${(0, t.asCssProp)((0, i.gridUnits)(.25))} solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
        background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
        color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
      }

      :host(:hover) {
        background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        color: ${(0, t.asCssProp)(o.colors.light[300])};
      }

      :host([selected='true']) {
        background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        color: ${(0, t.asCssProp)(o.colors.light[300])};
        border-color: ${(0, t.asCssProp)(o.colors.gunmetal[300])};
      }
    `
            }

            render() {
                return e.dy` <gu-paragraph-text id=${this.id} kind="small" fontWeight="bold" .text=${this.value}>
    </gu-paragraph-text>`
            }
        }

        (0, r.gn)([(0, g.C)({reflect: !0}), (0, r.w6)("design:type", Object)], Wn.prototype, "value", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], Wn.prototype, "selected", void 0), customElements.define("gu-square-selection-row-item", Wn);
        var eo = n(39017);
        const Vn = G => new RegExp(`^.{${G},}$`), _n = {
            email: new RegExp(/(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/),
            phoneNumber: new RegExp(/\d+/),
            name: new RegExp(/^\D+$/),
            password: Vn(8),
            minLength: G => Vn(G),
            maxLength: G => (G => new RegExp(`^.{${G},${G + 1}}$`))(G),
            deckCode: G => (0, eo.Gu)(G)
        };
        customElements.define("gu-text-input", class extends e.oi {
            constructor() {
                super(...arguments), this.labelText = "", this.initialHelpText = "", this.placeholderText = "", this.successHelpText = "", this.errorHelpText = "", this.align = "left", this.currentStatus = {
                    status: "initial",
                    helpText: this.initialHelpText
                }, this.inputValue = "", this.validateToPattern = [], this.obfuscateInputText = !1, this.updateValue = c => {
                    this.inputValue = c, this.dispatchEvent(new CustomEvent("onValueChange", {
                        detail: {
                            newValue: c,
                            valid: this.validateValue(c)
                        }
                    }))
                }, this.onInputChange = c => {
                    this.updateValue(c.target.value)
                }, this.onInputType = c => {
                    const $ = c.target, {value: z} = $;
                    this.updateValue(z), this.validateValue(z) && "error" === this.currentStatus.status && this.setCurrentStatus({
                        status: "initial",
                        helpText: this.initialHelpText
                    })
                }, this.onInputBlur = c => {
                    const $ = c.target, {value: z} = $;
                    return this.validateValue(z) ? this.setCurrentStatus({
                        status: "success",
                        helpText: this.successHelpText
                    }) : this.setCurrentStatus({status: "error", helpText: this.errorHelpText})
                }
            }

            static get properties() {
                return {
                    labelText: {type: String},
                    placeholderText: {type: String},
                    validateToPattern: {type: Array},
                    initialHelpText: {type: String},
                    successHelpText: {type: String},
                    errorHelpText: {type: String},
                    disabled: {type: String},
                    obfuscateInputText: {type: Boolean},
                    initialValue: {type: String},
                    align: {type: String}
                }
            }

            createRenderRoot() {
                return this
            }

            firstUpdated() {
                this.initialValue && (this.inputValue = this.initialValue, this.requestUpdate())
            }

            updated(c) {
                super.updated(c), "error" === this.currentStatus.status ? (this.classList.add("error"), this.classList.remove("success", "initial")) : "success" === this.currentStatus.status ? (this.classList.remove("error", "initial"), this.classList.add("success")) : (this.classList.remove("error", "success"), this.classList.add("initial"))
            }

            setCurrentStatus(c) {
                const {status: $, helpText: z} = c;
                this.currentStatus = {status: $, helpText: z}, this.requestUpdate()
            }

            resetCurrentStatus() {
                this.setCurrentStatus({status: "initial", helpText: this.initialHelpText})
            }

            get currentIcon() {
                switch (this.currentStatus.status) {
                    case"error":
                        return "alert_triangle";
                    case"success":
                        return "checkbox_tick";
                    default:
                        return "help"
                }
            }

            validateValue(c) {
                let $ = !0;
                return this.validateToPattern.map(z => {
                    if (!$) return !1;
                    if (z instanceof RegExp) $ = z.test(c); else if (-1 !== z.indexOf("not-")) {
                        const se = z.split("not-").pop();
                        $ = !_n[se].test(c)
                    } else $ = _n[z] && "function" == typeof _n[z] ? _n[z](c) : _n[z].test(c)
                }), $
            }

            render() {
                return e.dy`
      <style>
        gu-text-input {
          display: flex;
          flex-direction: column;
        }

        .labelText {
          color: ${(0, t.asCssProp)(o.colors.light[100])};
        }

        .inputArea {
          position: relative;
          width: 100%;
          display: flex;
          flex-direction: row;
          align-items: center;
        }

        .inputArea__input {
          width: 100%;
          background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
          border: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
          padding: ${(0, t.asCssProp)((0, i.gridUnits)(3))} ${(0, t.asCssProp)((0, i.gridUnits)(4))};
          ${(0, t.asCssProp)(un.baseSimpleTextStyles)};
          font-size: ${(0, t.asCssProp)(o.typography.simpleTextSizeMapping.small)};
          color: ${(0, t.asCssProp)(o.colors.light[100])};
          box-sizing: border-box;
        }

        .inputArea__input::placeholder {
          color: ${(0, t.asCssProp)(o.colors.light[700])} !important;
        }

        .inputArea__icon {
          height: 100%;
          font-size: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
          margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        }

        .helpText {
          margin-top: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
        }

        /* ALIGN */
        gu-text-input[align='center'] .inputArea__input {
          text-align: center;
        }
        /* ERROR STATE COLORING */
        gu-text-input.error .inputArea__input {
          border-color: ${(0, t.asCssProp)(o.colors.god.war.primary)};
        }
        gu-text-input.error .inputArea__icon,
        gu-text-input.error .helpText {
          color: ${(0, t.asCssProp)(o.colors.god.war.primary)};
          padding: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        }

        /* SUCCESS STATE COLORING */
        gu-text-input.success .inputArea__input {
          border-color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
        }
        gu-text-input.success .inputArea__icon,
        gu-text-input.success .helpText {
          color: ${(0, t.asCssProp)(o.colors.apocyan[300])};
        }

        /* INITIAL STATE COLORING */
        gu-text-input.initial .inputArea__input {
          border-color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        }
        gu-text-input.initial .inputArea__icon,
        gu-text-input.initial .helpText {
          color: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
        }

        /* DISABLED STATE COLORING */
        gu-text-input[disabled='true'] .labelText,
        gu-text-input[disabled='true'] .inputArea__icon,
        gu-text-input[disabled='true'] .helpText {
          color: ${(0, t.asCssProp)(o.colors.light[700])};
        }
        gu-text-input[disabled='true'] .inputArea__input {
          border-color: ${(0, t.asCssProp)(o.colors.light[700])};
        }
      </style>

      ${this.labelText ? e.dy` <gu-simple-text class="labelText" fontWeight="bold" kind="small"> ${this.labelText} </gu-simple-text> ` : null}
      <div class=${(0, y.$)({inputArea: !0})}>
        <input
          placeholder=${this.placeholderText ? this.placeholderText : ""}
          type=${this.obfuscateInputText ? "password" : "text"}
          class="inputArea__input"
          value=${this.inputValue}
          @blur=${this.onInputBlur}
          @input=${this.onInputType}
          part="textInput"
        />
        ${"help" !== this.currentIcon ? e.dy` <gu-icon iconLigature=${this.currentIcon} class="inputArea__icon"></gu-icon> ` : null}
      </div>
      ${this.currentStatus.helpText ? e.dy`
            <gu-paragraph-text class="helpText" kind="help" part="helpText">
              ${this.currentStatus.helpText}
            </gu-paragraph-text>
          ` : null}
    `
            }
        }), customElements.define("gu-tile-img-header-text", class extends e.oi {
            constructor() {
                super(...arguments), this.headerSize = "x-small", this.headerColor = o.colors.dark[900], this.headerAlign = "center", this.textKind = "small", this.textColor = o.colors.dark[500], this.textAlign = "center"
            }

            static get properties() {
                return {
                    image: {type: String},
                    header: {type: String},
                    headerSize: {type: String},
                    headerColor: {type: String},
                    headerAlign: {type: String},
                    text: {type: String},
                    textKind: {type: String},
                    textColor: {type: String},
                    textAlign: {type: String}
                }
            }

            static get styles() {
                return e.iv`
      .tile {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
      }

      .tile-img {
        width: auto;
        height: 100px;
        margin-bottom: 40px;
      }

      .tile-header {
        margin-bottom: 30px;
      }
    `
            }

            render() {
                return e.dy`
      <div class="tile-img-header-text tile">
        <img class="tile-img tile-img" src="${this.image}" />
        <gu-heading-text
          align="${this.headerAlign}"
          fillcolor="${this.headerColor}"
          size="${this.headerSize}"
          class="tile-header"
        >
          ${this.header}
        </gu-heading-text>
        <gu-paragraph-text align="${this.textAlign}" fillcolor="${this.textColor}" kind="${this.textKind}">
          ${this.text}
        </gu-paragraph-text>
      </div>
    `
            }
        }), customElements.define("gu-will-you-survive-banner", class extends e.oi {
            static get styles() {
                return e.iv`
      :host {
        display: block;
        position: relative;
      }

      gu-ribbon-banner::part(innerContainer) {
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(7))} 0 ${(0, t.asCssProp)((0, i.gridUnits)(10))};
      }

      .will-you-survive-banner__spacer {
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
        box-shadow: inset 0 0 0 1.5px ${(0, t.asCssProp)(o.colors.gold[500])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
        transform: rotate(-45deg);
        display: none;
      }

      .will-you-survive-banner__spacer::before {
        content: '';
        width: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        height: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        background: ${(0, t.asCssProp)(o.colors.gold[500])};
        border-radius: ${(0, t.asCssProp)((0, i.gridUnits)(.5))};
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping["x-small"])}) {
        .statSpacer {
          display: flex;
        }
      }
    `
            }

            render() {
                return e.dy`
      <gu-ribbon-banner>
        <i class="will-you-survive-banner__spacer"></i>

        <gu-heading-text
          size="2x-small"
          .responsiveSize=${[{breakpoint: "small", size: "x-small"}]}
          fillColor="colors.dark.900"
          align="center"
        >
          WILL YOU SURVIVE THE TRIAL OF THE GODS?
        </gu-heading-text>

        <i class="will-you-survive-banner__spacer"></i>

        <slot></slot>
      </gu-ribbon-banner>
    `
            }
        });

        class Hn extends e.oi {
            constructor() {
                super(...arguments), this.values = [], this.selectedIndex = 0, this.itemClicked = (c, $) => {
                    this.selectedIndex = $, this.dispatchEvent(new CustomEvent("onItemClicked", {
                        composed: !0,
                        detail: {index: $, value: c}
                    }))
                }
            }

            static get styles() {
                return e.iv`
      :host {
        display: flex;
        flex-direction: row;
        border-bottom: 3px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        padding-right: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
      }

      gu-tabs-collection-item:not(:last-child) {
        margin-right: ${(0, t.asCssProp)((0, i.gridUnits)(1))};
      }
    `
            }

            render() {
                return e.dy`
      ${this.values.map((c, $) => e.dy`<gu-tabs-collection-item
          .selected=${$ === this.selectedIndex}
          .firstItem=${0 === $}
          .value="${c}"
          @click=${() => this.itemClicked(c, $)}
        >
        </gu-tabs-collection-item>`)}
    `
            }
        }

        (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Array
        }), (0, r.w6)("design:type", Array)], Hn.prototype, "values", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Number
        }), (0, r.w6)("design:type", Object)], Hn.prototype, "selectedIndex", void 0), customElements.define("gu-tabs-collection", Hn);

        class Rn extends e.oi {
            constructor() {
                super(...arguments), this.value = "", this.selected = !1, this.firstItem = !1
            }

            static get styles() {
                return e.iv`
  :host {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    width: ${(0, t.asCssProp)((0, i.gridUnits)(32.5))};
    height: ${(0, t.asCssProp)((0, i.gridUnits)(12.5))};
  }

  :host::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    z-index: -1;
    transform: skew(15deg);
  }

  :host([selected='true'])::after {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
  }
  :host([firstItem='true']) {
    margin-left: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
  }
  :host([firstItem='true'])::before {
    content: '';
    position: absolute;
    width: 50%;
    height: 100%;
    top: 0;
    left: -6%;
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    border-bottom: 3px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
    z-index: -1;
  }

  :host([selected='true'])::before {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[500])};
  }
`
            }

            render() {
                return e.dy`
      ${this.selected ? e.dy`<gu-heading-text align="center" size="x-small" fillColor=${o.colors.light[100]}>
            ${this.value}
          </gu-heading-text>` : e.dy`<gu-heading-text align="center" size="x-small" fillColor=${o.colors.gunmetal[500]}>
            ${this.value}
          </gu-heading-text>`}
    `
            }
        }

        (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: String
        }), (0, r.w6)("design:type", Object)], Rn.prototype, "value", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], Rn.prototype, "selected", void 0), (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: Boolean,
            converter: De.b
        }), (0, r.w6)("design:type", Object)], Rn.prototype, "firstItem", void 0), customElements.define("gu-tabs-collection-item", Rn);
        let fn = class extends e.oi {
            static get styles() {
                return e.iv`
      ${(0, t.asCssProp)((0, t.setBoxSizing)())}

      :host {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      img {
        border: 2px solid rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.light[100]))}, 0.2);
        height: ${(0, t.asCssProp)((0, i.gridUnits)(50))};
        object-fit: cover;
      }

      @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping.small)}) {
        img {
          max-width: ${(0, t.asCssProp)((0, i.gridUnits)(58))};
        }

        .description {
          min-height: ${(0, t.asCssProp)((0, i.gridUnits)(42))};
        }
      }

      @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping.medium)}) {
        img {
          max-width: ${(0, t.asCssProp)((0, i.gridUnits)(75))};
        }
      }

      @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping.large)}) {
        img {
          max-width: ${(0, t.asCssProp)((0, i.gridUnits)(92))};
        }
      }

      @media screen and (min-width: ${(0, t.asCssProp)(f.breakpointSizeMapping["x-large"])}) {
        img {
          max-width: ${(0, t.asCssProp)((0, i.gridUnits)(100))};
        }
      }

      .card {
        border: 1px solid ${(0, t.asCssProp)(o.colors.dark[900])};
        display: flex;
        flex-direction: column;
        & > div {
          display: inline-block;
        }
        max-width: ${(0, t.asCssProp)((0, i.gridUnits)(100))};
      }

      .description {
        background-color: ${(0, t.asCssProp)(o.colors.light[100])};
        color: ${(0, t.asCssProp)(o.colors.dark[900])};
        padding: ${(0, t.asCssProp)((0, i.gridUnits)(3))};
        max-width: ${(0, t.asCssProp)((0, i.gridUnits)(100))};
      }

      .divider {
        height: 5px;
        background: ${(0, t.asCssProp)(o.gradients.gold.horizontal())};
        border-bottom: 1px solid ${(0, t.asCssProp)(o.colors.dark[900])};
        border-top: 1px solid ${(0, t.asCssProp)(o.colors.dark[900])};
      }
    `
            }

            render() {
                return e.dy`
    <div class="card">
      <img class="image" src="${this.imageSrc}" data-test-id="ascension-card-image"></img>
      <div class="divider"></div>
      <div class="description">
        <gu-heading-text
          align="center"
          fillColor="colors.dark.900"
          size="2x-small"
          data-test-id="ascension-card-title"
        >
          ${this.title}
        </gu-heading-text>
        <gu-vertical-space top="medium">
          <gu-paragraph-text align="center" kind="small" fillColor="colors.dark.500" data-test-id="ascension-card-description">
            ${this.description}
          </gu-paragraph-text>
        </gu-vertical-space>
      </div>
    </div>
  `
            }
        };
        (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], fn.prototype, "description", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], fn.prototype, "imageSrc", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], fn.prototype, "title", void 0), fn = (0, r.gn)([(0, zt.M)("gu-x2-ascension-card")], fn), customElements.define("gu-x2-section-header", class extends e.oi {
            static get properties() {
                return {heading: {type: String}, iconLigature: {type: String}, subheading: {type: String}}
            }

            static get styles() {
                return e.iv`
      gu-icon {
        font-size: ${(0, t.asCssProp)((0, i.gridUnits)(27))};
        margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
      }

      header {
        display: flex;
        align-items: center;
        flex-direction: column;
      }

      @media screen and (min-width: ${(0, t.asCssProp)(o.breakpoints.breakpointSizeMapping.small)}) {
        gu-icon {
          margin-bottom: ${(0, t.asCssProp)((0, i.gridUnits)(8))};
        }
      }
    `
            }

            render() {
                return e.dy`
      <header>
        ${this.iconLigature ? e.dy` <gu-icon
              fillGradient="gradients.gold.simple"
              fillGradientTarget="bottom"
              iconLigature="${this.iconLigature}"
            ></gu-icon>` : null}
        <gu-heading-text
          align="center"
          fillGradient="gradients.gold.simple"
          size="small"
          .responsiveSize=${[{breakpoint: "small", size: "large"}, {
                    breakpoint: "medium",
                    size: "x-large"
                }, {breakpoint: "large", size: "2x-large"}]}
        >
          ${this.heading}
        </gu-heading-text>

        ${this.subheading ? e.dy`
      <gu-heading-text
        align="center"
        size="2x-small"
        .responsiveSize=${[{breakpoint: "small", size: "x-small"}]}
        >
          ${this.subheading}
        </gu-heading-text>
      </div>` : null}
      </header>
    `
            }
        }), customElements.define("gu-loading-spinner", class extends e.oi {
            constructor() {
                super(...arguments), this.size = "large", this.spinners = {
                    small: "/assets/images/loading-spinner/spin-1s-70px.svg",
                    medium: "/assets/images/loading-spinner/spin-1s-110px.svg",
                    large: "/assets/images/loading-spinner/spin-1s-135px.svg"
                }
            }

            static get properties() {
                return {size: {type: String}}
            }

            render() {
                return e.dy` <img alt="Loading..." src="${this.spinners[this.size]}" /> `
            }
        });

        class bn extends e.oi {
            constructor() {
                super(...arguments), this.items = [], this.open = !1
            }

            connectedCallback() {
                super.connectedCallback(), window.addEventListener("click", c => this.onClick(c)), window.addEventListener("scroll", () => this.onScroll())
            }

            disconnectedCallback() {
                window.removeEventListener("click", c => this.onClick(c)), window.removeEventListener("scroll", () => this.onScroll()), super.disconnectedCallback()
            }

            static get styles() {
                return e.iv`
  :host {
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .dropdown-menu--hidden {
    display: none;
  }

  .dropdown-menu-content {
    cursor: pointer;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: absolute;
    right: ${(0, t.asCssProp)((0, i.gridUnits)(5))};
    top: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
    outline: 2px solid ${(0, t.asCssProp)(o.colors.dark[300])};
    border-radius: 2px;
    box-shadow: ${(0, t.asCssProp)((0, i.gridUnits)(.5))} ${(0, t.asCssProp)((0, i.gridUnits)(.5))} ${(0, t.asCssProp)((0, i.gridUnits)(2))}
      rgba(${(0, t.asCssProp)((0, v.hexToCssRgbString)(o.colors.black))}, 25%);
    padding: 0;
    margin: 0;
    z-index: ${bt.modalLayerZLevel};
  }
`
            }

            selectDropDownItem(c) {
                this.current = c, this.open = !1, this.dispatchEvent(new CustomEvent("onSelect", {
                    composed: !0,
                    bubbles: !0,
                    detail: Object.assign({}, this.current)
                }))
            }

            toggleOpen() {
                setTimeout(() => {
                    this.open = !this.open
                })
            }

            onClick(c) {
                !c.composedPath().includes(this) && this.open && (this.open = !1)
            }

            onScroll() {
                this.open && (this.open = !1)
            }

            render() {
                return e.dy`
      <slot name="dropdownControl" data-test-id="dropdown-control" @click=${this.toggleOpen}></slot>
      <ul
        class=${(0, y.$)({"dropdown-menu--hidden": !this.open, "dropdown-menu-content": this.open})}
      >
        ${this.items.map((c, $, z) => e.dy`
              <gu-dropdown-menu-item
                .align=${this.align}
                .item=${c}
                .last=${z.length - 1 === $}
                @click=${() => this.selectDropDownItem(c)}
              ></gu-dropdown-menu-item>
            `)}
      </ul>
    `
            }
        }

        (0, r.gn)([(0, g.C)({type: Array}), (0, r.w6)("design:type", Array)], bn.prototype, "items", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], bn.prototype, "align", void 0), (0, r.gn)([(0, ht.S)(), (0, r.w6)("design:type", Object)], bn.prototype, "open", void 0), (0, r.gn)([(0, ht.S)({hasChanged: (G, c) => (null == G ? void 0 : G.value) !== (null == c ? void 0 : c.value)}), (0, r.w6)("design:type", Object)], bn.prototype, "current", void 0), customElements.define("gu-dropdown-menu", bn);

        class Bn extends e.oi {
            constructor() {
                super(...arguments), this.item = {id: "", value: ""}, this.last = !1
            }

            static get styles() {
                return e.iv`
  :host {
    background: ${(0, t.asCssProp)(o.colors.light[100])};
  }

  .dropdown-menu-item:hover {
    background: ${(0, t.asCssProp)(o.colors.light[300])};
  }

  .dropdown-menu-item {
    display: flex;
    flex-direction: column;
  }

  .dropdown-menu-item__text {
    min-height: ${(0, t.asCssProp)((0, i.gridUnits)(6))};
    min-width: ${(0, t.asCssProp)((0, i.gridUnits)(44))};
    padding: ${(0, t.asCssProp)((0, i.gridUnits)(2))};
    display: block;
  }

  hr.solid {
    width: 100%;
    display: block;
    border: 0;
    border-top: 1px solid ${(0, t.asCssProp)(o.colors.light[300])};
    margin: 0;
    padding: 0;
    transform: scaleX(0.88);
    position: absolute;
  }

  .dropdown-menu-item:hover {
    background: ${(0, t.asCssProp)(o.colors.light[300])};
  }

  .dropdown-menu-item:hover + hr {
    display: none;
  }

  a {
    text-decoration: none;
  }
`
            }

            render() {
                return (0, v.updateColoringVariables)({component: this, fillColorHover: "colors.light.100"}), e.dy`
      <li class="dropdown-menu-item" role="dropdown-menu-item">
        <a href="javascript:void(0)">
          <gu-body-text
            class="dropdown-menu-item__text"
            align=${this.align}
            size="medium"
            fillColor=${o.colors.dark[500]}
          >
            ${this.item.value}
          </gu-body-text>
        </a>
      </li>

      ${this.last ? null : e.dy`<hr class="solid" />`}
    `
            }
        }

        (0, r.gn)([(0, g.C)({
            reflect: !0,
            type: String
        }), (0, r.w6)("design:type", Object)], Bn.prototype, "item", void 0), (0, r.gn)([(0, g.C)({type: String}), (0, r.w6)("design:type", String)], Bn.prototype, "align", void 0), (0, r.gn)([(0, g.C)({
            type: Boolean,
            reflect: !0
        }), (0, r.w6)("design:type", Object)], Bn.prototype, "last", void 0), customElements.define("gu-dropdown-menu-item", Bn)
    }, 14879: (ee, R, n) => {
        "use strict";
        n.d(R, {o: () => i});
        var p = n(70655), m = (n(1949), n(32830)), e = n(56418), g = n(98539), v = n(26711);

        class i extends m.oi {
            constructor() {
                super(...arguments), this.loading = !1, this.disabled = !1, this.expand = !1, this.iconPosition = "right", this.type = "secondary"
            }

            renderIcon(o) {
                return o ? m.dy`<gu-icon iconLigature=${o} class="button__icon"></gu-icon>` : m.dy``
            }

            renderText() {
                return m.dy`<slot class="button__text"></slot>`
            }

            renderContent(o, C) {
                return o ? m.dy`<gu-rectangular-spinner class="button__spinner" color="grey"></gu-rectangular-spinner>` : m.dy` ${this.renderIcon(C)} ${this.renderText()} `
            }

            getClassMap() {
                return {
                    button__content: !0,
                    [`button__content--icon-${this.iconPosition}`]: !0,
                    [`button__content--type-${this.type}`]: !0
                }
            }

            render() {
                return m.dy` <div class=${(0, g.$)(this.getClassMap())}> ${this.renderContent(this.loading, this.icon)} </div> `
            }
        }

        (0, p.gn)([(0, e.C)({
            reflect: !0,
            type: Boolean,
            converter: v.b
        }), (0, p.w6)("design:type", Object)], i.prototype, "loading", void 0), (0, p.gn)([(0, e.C)({
            reflect: !0,
            type: Boolean,
            converter: v.b
        }), (0, p.w6)("design:type", Object)], i.prototype, "disabled", void 0), (0, p.gn)([(0, e.C)({
            reflect: !0,
            type: Boolean,
            converter: v.b
        }), (0, p.w6)("design:type", Object)], i.prototype, "expand", void 0), (0, p.gn)([(0, e.C)(), (0, p.w6)("design:type", String)], i.prototype, "icon", void 0), (0, p.gn)([(0, e.C)(), (0, p.w6)("design:type", String)], i.prototype, "iconPosition", void 0), (0, p.gn)([(0, e.C)({reflect: !0}), (0, p.w6)("design:type", Object)], i.prototype, "type", void 0)
    }, 43977: (ee, R, n) => {
        "use strict";
        n(61517);
        var r = n(32830), m = n(80102), e = n(26532), g = n(65281);
        customElements.define("gu-circular-close-button", class extends r.oi {
            static get styles() {
                return r.iv`
      :host {
        display: block;
        width: ${(0, e.asCssProp)((0, m.gridUnits)(7))};
        cursor: pointer;
        height: ${(0, e.asCssProp)((0, m.gridUnits)(7))};
        background: ${(0, e.asCssProp)(g.gradients.apocyan.simple("bottom"))};
        position: relative;
        border-radius: 50%;
      }

      .circular-close-button__background {
        position: absolute;
        left: ${(0, e.asCssProp)((0, m.gridUnits)(.5))};
        right: ${(0, e.asCssProp)((0, m.gridUnits)(.5))};
        top: ${(0, e.asCssProp)((0, m.gridUnits)(.5))};
        bottom: ${(0, e.asCssProp)((0, m.gridUnits)(.5))};
        background: ${(0, e.asCssProp)(g.colors.gunmetal[900])};
        border-radius: 50%;
        display: flex;
      }

      .circular-close-button__icon {
        margin: auto;
        font-size: ${(0, e.asCssProp)((0, m.gridUnits)(4))};
      }
    `
            }

            render() {
                return r.dy`
      <div class="circular-close-button__background">
        <gu-icon
          class="circular-close-button__icon"
          iconLigature="close_x"
          fillGradient=${g.gradients.apocyan.simple("bottom")}
        ></gu-icon>
      </div>
    `
            }
        })
    }, 89534: (ee, R, n) => {
        "use strict";
        var p = n(70655), r = n(32830), m = n(56418), e = n(72650), g = n(93270), v = n(14879), i = n(80102),
            t = n(26532), o = n(65281), C = n(40010);
        const F = r.iv`
  ${C.W2}

  .button__icon {
    font-size: ${(0, t.asCssProp)((0, i.gridUnits)(4))};
  }

  .button__text {
    color: inherit;
    text-shadow: 0 calc(var(--vh) * 0.2) calc(var(--vh) * 0.2) rgba(${(0, t.asCssProp)(o.colors.dark[900])}, 0.5);
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-self: center;
    align-content: center;
    order: 1;
    gap: 8px;
  }

  /*  MOUSE-DOWN FX
    ----------------------------------------------------------------------------------- */
  :host(:active)::after {
    content: '';
    position: absolute;
    left: 3px;
    right: 3px;
    top: 2px;
    bottom: 2px;
    z-index: 0;
    background: ${(0, t.asCssProp)(o.gradients.apocyan.simple())};
    opacity: 0.2;
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(11, 11))};
  }

  /* Primary */

  :host([type='primary']) {
    background: ${(0, t.asCssProp)(o.gradients.apocyan.simple("bottom"))};
  }

  .button__artwork {
    ${(0, t.asCssProp)(o.uifx.userSelect("none"))};
    position: absolute;
    z-index: 2;
    left: 3px;
    right: 3px;
    top: 2px;
    bottom: 2px;
    ${(0, t.asCssProp)((0, t.drawHexShapePolygonMask)(11, 11))};
  }

  .button__artwork__side {
    position: absolute;
    left: 50%;
  }

  .button__artwork__side img {
    display: block;
    height: 100%;
  }

  .button__artwork__side--top {
    height: calc(${(0, t.asCssProp)("32px")} * 1.4);
    bottom: 36%;
    transform: translateX(-42%);
  }

  .button__artwork__side--bottom {
    height: calc(${(0, t.asCssProp)("32px")} * 2);
    top: 32%;
    transform: translateX(-58%);
  }

  :host([size='large']) .button__artwork__side--top {
    height: calc(${(0, t.asCssProp)("48px")} * 1.4);
  }

  :host([size='large']) .button__artwork__side--bottom {
    height: calc(${(0, t.asCssProp)("48px")} * 2);
  }

  :host([type='primary']:hover) {
    color: ${(0, t.asCssProp)(o.colors.light[100])};
  }

  :host([type='primary']:hover)::before {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  :host([type='primary']:hover) .artwork__side {
    opacity: 0.8;
  }

  /* Secondary */

  :host([type='secondary']) {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[100])};
  }

  :host([type='secondary'])::before {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
  }

  :host([type='secondary']:hover)::before {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }

  /* Subtle */

  :host([type='subtle']) {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[900])};
    text-transform: uppercase;
  }

  :host([type='subtle'])::before {
    display: none;
  }

  :host([type='subtle']) .button__text,
  :host([type='subtle']) .button__icon {
    color: ${(0, t.asCssProp)(o.colors.apocyan[100])};
  }

  :host([type='subtle']:hover) {
    background: ${(0, t.asCssProp)(o.colors.gunmetal[700])};
  }
`;

        class _ extends v.o {
            constructor() {
                super(...arguments), this.type = "secondary"
            }

            static get styles() {
                return F
            }

            renderArtwork() {
                return "primary" !== this.type ? r.dy`` : r.dy`
      <div class="button__artwork">
        <picture class="button__artwork__side button__artwork__side--top">
          <source srcset="/assets/images/hex-button/hex-button--top-wave-art.webp" type="image/webp" />
          <source srcset="/assets/images/hex-button/hex-button--top-wave-art.png" type="image/png" />
          <img src="/assets/images/hex-button/hex-button--top-wave-art.png" />
        </picture>

        <picture class="button__artwork__side button__artwork__side--bottom">
          <source srcset="/assets/images/hex-button/hex-button--bottom-wave-art.webp" type="image/webp" />
          <source srcset="/assets/images/hex-button/hex-button--bottom-wave-art.png" type="image/png" />
          <img src="/assets/images/hex-button/hex-button--bottom-wave-art.png" />
        </picture>
      </div>
    `
            }

            renderText() {
                return r.dy`
      <gu-heading-text class="button__text" size="${"large" === this.size ? "2x-small" : "3x-small"}">
        <slot></slot>
      </gu-heading-text>
    `
            }

            render() {
                return r.dy`${this.renderArtwork()} ${super.render()}`
            }
        }

        (0, p.gn)([(0, m.C)({reflect: !0}), (0, p.w6)("design:type", String)], _.prototype, "type", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], _.prototype, "size", void 0), customElements.define("gu-hex-button", (0, e.b)((0, g.Z)(_)))
    }, 40010: (ee, R, n) => {
        "use strict";
        n.d(R, {W2: () => C});
        var p = n(32830), r = n(80102), m = n(26532), e = n(65281);
        const g = p.iv`
  :host {
    cursor: pointer;
    display: inline-flex;
    justify-self: center;
    justify-content: center;
    flex-grow: 0;
    color: ${(0, m.asCssProp)(e.colors.gunmetal[100])};
    border-radius: ${(0, m.asCssProp)((0, r.gridUnits)(1))};
    padding: 1px;
    overflow: hidden;
  }

  /* Button content styles
    ----------------------------------------------------------------------------------- */
  .button__content {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: ${(0, m.asCssProp)((0, r.gridUnits)(1.5))} ${(0, m.asCssProp)((0, r.gridUnits)(3.5))};
    flex: 1;
    gap: 8px;
  }

  .button__icon {
    position: relative;
    z-index: 2;
    order: 2;
    font-size: ${(0, m.asCssProp)((0, r.gridUnits)(6))};
  }

  .button__text {
    position: relative;
    z-index: 2;
    text-decoration: none;
    order: 1;
    line-height: 20px;
  }

  /* Horizontal stretch functionality:
    ----------------------------------------------------------------------------------- */
  :host([expand='true']) {
    justify-self: stretch;
    flex-grow: 1;
  }

  /* Button content icon on left side state:
    ----------------------------------------------------------------------------------- */
  .button__content--icon-left .button__icon {
    order: 0;
  }

  /* Button content when layout is square
  ----------------------------------------------------------------------------------- */
  .button__content--layout-square {
    padding: ${(0, m.asCssProp)((0, r.gridUnits)(1.5))};
  }

  /* Button content when layout is vertical
    ----------------------------------------------------------------------------------- */
  .button__content--layout-vertical {
    flex-direction: column;
    align-items: center;
    min-width: 70px;
    max-width: 80px;
    padding: ${(0, m.asCssProp)((0, r.gridUnits)(3))} ${(0, m.asCssProp)((0, r.gridUnits)(3))};
    gap: 0px;
  }

  .button__content--layout-vertical .button__icon {
    order: 0;
    margin: 0;
    font-size: ${(0, m.asCssProp)((0, r.gridUnits)(6))};
  }

  .button__content--layout-vertical .button__text {
    text-align: center;
  }

  /* "DISABLED" and "LOADING" BUTTON STYLES
    ----------------------------------------------------------------------------------- */
  :host([disabled='true']),
  :host([loading='true']) {
    ${(0, m.asCssProp)(e.uifx.userSelect("none"))};
  }

  :host([disabled='true']) {
    filter: grayscale(100%);
  }
`, C = p.iv`
  ${g}

  :host {
    position: relative;
    white-space: nowrap;
    color: ${(0, m.asCssProp)(e.colors.light[100])};
    ${(0, m.asCssProp)((0, m.drawHexShapePolygonMask)(12, 12))};
    ${(0, m.asCssProp)(e.animation.standardTransition("all"))};

    /* NORMAL SIZING BY DEFAULT */
    min-width: 140px;
    height: ${(0, m.asCssProp)("32px")};
    line-height: ${(0, m.asCssProp)("32px")};
  }

  /* The background "fill" color of the button */
  :host::before {
    content: '';
    position: absolute;
    ${(0, m.inset)(2, 3)}
    z-index: 0;
    background: ${(0, m.asCssProp)(e.colors.gunmetal[900])};
    ${(0, m.asCssProp)((0, m.drawHexShapePolygonMask)(11, 11))};
    ${(0, m.asCssProp)(e.animation.standardTransition("all"))};
  }

  .button__content {
    padding: 0 ${(0, m.asCssProp)("20px")};
  }

  /* large size */

  :host([size='large']) {
    height: ${(0, m.asCssProp)("48px")};
    line-height: ${(0, m.asCssProp)("48px")};
    ${(0, m.asCssProp)((0, m.drawHexShapePolygonMask)(18, 18))};
  }

  :host([size='large']) .button__content {
    padding: 0 ${(0, m.asCssProp)("26px")};
  }

  :host([size='large'])::before {
    ${(0, m.asCssProp)((0, m.drawHexShapePolygonMask)(17, 17))};
  }

  :host([size='large']) .buttonContent__icon {
    font-size: ${(0, m.asCssProp)((0, r.gridUnits)(5.5))};
  }
`
    }, 62701: (ee, R, n) => {
        "use strict";
        n.d(R, {w: () => f});
        var p = n(70655), r = n(92436), m = n(87435), e = n(32830), g = n(5284), v = n(26532), i = n(65281);
        const t = new r.do(w => {
            w.forEach(k => {
                k.target.handleResize()
            })
        }), o = new CustomEvent("onVideoEnd"), f = w => new Promise(k => {
            setTimeout(() => k(), w)
        });
        customElements.define("gu-controllable-vimeo-embed", class extends e.oi {
            constructor() {
                super(...arguments), this.muted = !1, this.autoPlay = !1, this.loopVideo = !1, this.showControls = !1, this.pauseOnEndFrame = !1, this.startPausedOnFirstFrame = !1, this.volume = 1, this.dimensions = {
                    width: 0,
                    height: 0
                }, this.hasSignalledEnd = !1, this.onVideoLoaded = () => {
                    console.log("VIDEO IS LOADED (not necessarily fully buffered though)", this.videoId);
                    const k = () => {
                        this.bindPlayListeners(), this.delayedEmitVideoReady(), this.setVolume()
                    };
                    this.startPausedOnFirstFrame ? this.gotoTimeAndPause(.02).then(() => k()) : k()
                }, this.onVideoUpdate = k => {
                    const {percent: F} = k;
                    this.dispatchEvent(new CustomEvent("onVideoProgress", {detail: {percent: F}})), this.pauseOnEndFrame && F >= .88 && (this.pauseVideo(), this.hasSignalledEnd || (this.hasSignalledEnd = !0, this.dispatchEvent(o)))
                }, this.delayedEmitVideoReady = () => setTimeout(() => {
                    this.hasSignalledEnd = !1, this.classList.remove("hideVideo"), this.dispatchEvent(new CustomEvent("onVideoReady"))
                }, 350)
            }

            static get styles() {
                return e.iv`
      :host {
        width: 100%;
        height: 100%;
        display: flex;
        ${(0, v.asCssProp)(i.animation.standardTransition("opacity"))};
      }

      :host ::slotted(iframe) {
        width: 100%;
        height: 100%;
        display: block;
      }

      gu-rectangular-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: none;
      }

      :host(.hideVideo) gu-rectangular-spinner {
        display: flex;
      }
    `
            }

            static get properties() {
                return {
                    videoId: {type: Number},
                    loopVideo: {type: Boolean},
                    autoPlay: {type: Boolean},
                    pauseOnEndFrame: {type: Boolean},
                    startPausedOnFirstFrame: {type: Boolean},
                    showControls: {type: Boolean},
                    volume: {type: Number},
                    muted: {type: Boolean}
                }
            }

            firstUpdated() {
                this.handleResize(), t.observe(this)
            }

            updated(k) {
                super.updated(k), k.has("videoId") && this.videoId ? this.handleVideoIdUpdated() : k.has("volume") && this.setVolume()
            }

            disconnectedCallback() {
                t.unobserve(this), this.vimeoControl && this.vimeoControl.destroy()
            }

            handleVideoIdUpdated() {
                return (0, p.mG)(this, void 0, void 0, function* () {
                    if (this.vimeoControl) {
                        const k = yield this.vimeoControl.getVideoId();
                        return console.log("@@@@@@@@@@@@", k, this.videoId), this.videoId === k ? this.reInitCurrentVideo() : this.loadNewVideoId()
                    }
                    this.initVideo()
                })
            }

            unBindEventsAndReset() {
                this.classList.add("hideVideo"), this.dispatchEvent(new CustomEvent("onVideoLoading")), this.vimeoControl.off("timeupdate", this.onVideoUpdate), this.vimeoControl.off("loaded", this.onVideoLoaded)
            }

            reInitCurrentVideo() {
                console.log("@@@@@ RE-INIT CURRENT VIDEO @@@@@@"), this.unBindEventsAndReset(), this.onVideoLoaded()
            }

            loadNewVideoId() {
                console.log("@@@@@ LOAD NEW VIDEO ID @@@@@@"), this.unBindEventsAndReset(), this.vimeoControl.loadVideo(this.videoId).then(() => this.onVideoLoaded()).catch(k => console.log(k))
            }

            initVideo() {
                const k = {
                    title: !1,
                    byline: !1,
                    portrait: !1,
                    controls: this.showControls,
                    playsinline: !0,
                    autopause: !1,
                    muted: !0,
                    id: this.videoId,
                    loop: this.loopVideo,
                    autoplay: this.autoPlay
                };
                this.classList.add("hideVideo"), this.dispatchEvent(new CustomEvent("onVideoLoading")), this.vimeoControl = new m.Z(this, k), this.vimeoControl.on("loaded", this.onVideoLoaded)
            }

            setVolume() {
                return !!this.vimeoControl && (this.muted ? this.vimeoControl.setMuted(!0) : this.vimeoControl.setVolume(this.volume))
            }

            bindPlayListeners() {
                this.vimeoControl.on("ended", () => {
                    this.dispatchEvent(o)
                }), this.vimeoControl.on("timeupdate", this.onVideoUpdate)
            }

            gotoTimeAndPause(k) {
                return (0, p.mG)(this, void 0, void 0, function* () {
                    try {
                        return console.log("gotoTimeAndPause(time)", k, this.videoId), yield this.vimeoControl.setMuted(!0), console.log("gotoTimeAndPause > this.vimeoControl.setMuted(true) resolved", this.videoId, k), yield this.vimeoControl.play(), console.log("gotoTimeAndPause > this.vimeoControl.play() resolved", this.videoId, k), g.I5.isSafari() && (yield f(350), console.log("gotoTimeAndPause > artificialDelay() resolved", this.videoId, k)), yield this.vimeoControl.pause(), console.log("gotoTimeAndPause > this.vimeoControl.pause() resolved", this.videoId, k), yield this.vimeoControl.setCurrentTime(k), console.log("gotoTimeAndPause > this.vimeoControl.setCurrentTime(time) resolved", this.videoId, k), this.setVolume(), console.log("gotoTimeAndPause > ALL STEPS resolved")
                    } catch (F) {
                        console.error("gotoTimeAndPause ERROR:", F)
                    }
                })
            }

            playVideo(k) {
                console.log("playVideo(time)", k);
                const F = () => {
                    this.hasSignalledEnd = !1, this.vimeoControl.play()
                };
                return void 0 !== k ? this.gotoTimeAndPause(k).then(() => F()) : F()
            }

            pauseVideo() {
                this.vimeoControl.pause()
            }

            handleResize() {
                this.dimensions = {width: this.offsetWidth, height: this.offsetHeight}
            }

            destroyVideo() {
                this.vimeoControl.destroy()
            }

            render() {
                return e.dy`
      <slot></slot>
      <gu-rectangular-spinner></gu-rectangular-spinner>
    `
            }
        })
    }, 99454: (ee, R, n) => {
        "use strict";
        var p = n(32830), r = n(26532), m = n(61462);
        customElements.define("gu-form-context", class extends p.oi {
            static get properties() {
                return {}
            }

            static get styles() {
                return p.iv`
      ${(0, r.asCssProp)((0, r.setBoxSizing)())}

      :host {
        display: block;
        position: relative;
      }

      /* @NOTE: The hidden submit button cannot be display: none,
      as this breaks the go-button / enter functionality in Safari */
      .formControl__hiddenSubmitInput {
        position: absolute;
        opacity: 0;
        top: 0;
        left: 0;
        ${(0, r.asCssProp)((0, m.userSelect)("none"))};
      }

      .formControl__fakeSlot {
        display: flex;
        flex-direction: column;
      }
    `
            }

            firstUpdated() {
                this.formDom = this.shadowRoot.querySelector(".formControl"), this.formDom.addEventListener("submit", this.formSubmitHandler)
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.formDom.removeEventListener("submit", this.formSubmitHandler)
            }

            formSubmitHandler(v) {
                v.preventDefault(), this.dispatchEvent(new CustomEvent("onFormSubmit", {bubbles: !0, composed: !0}))
            }

            onSlotChange() {
                const v = this.shadowRoot.querySelector(".formSlot"),
                    i = this.shadowRoot.querySelector(".formControl__fakeSlot");
                v.assignedElements().forEach(t => i.appendChild(t))
            }

            render() {
                return p.dy`
      <form class="formControl" action="">
        <input type="submit" class="formControl__hiddenSubmitInput" @click=${this.formSubmitHandler} />
        <div class="formControl__fakeSlot"></div>
      </form>
      <slot class="formSlot" @slotchange=${this.onSlotChange}></slot>
    `
            }
        })
    }, 4390: (ee, R, n) => {
        "use strict";

        function p(v, i, t) {
            i.runTask(() => v.navigate([t]))
        }

        function r(v) {
            window.open(v.url, v._target)
        }

        function e(v, i) {
            return Object.keys(v).reduce((t, o) => -1 !== i.indexOf(v[o].path) || t, !1)
        }

        n.d(R, {pR: () => p, rb: () => r, M0: () => e, Cs: () => g});
        const g = v => new CustomEvent("onExternalNavItemClick", {detail: {navItem: v}, bubbles: !0, composed: !0})
    }, 61517: (ee, R, n) => {
        "use strict";
        var p = n(32830), r = n(5284), m = n(65171), e = n(26532), g = n(65281), v = n(91418);
        customElements.define("gu-icon", class extends p.oi {
            constructor() {
                super(...arguments), this.iconLigature = "", this.fillGradientTarget = "top"
            }

            static get properties() {
                return {
                    iconLigature: {type: String},
                    fillColor: {type: String},
                    fillGradient: {type: String},
                    fillGradientTarget: {type: String}
                }
            }

            static get styles() {
                return p.iv`
      :host {
        display: inline-flex;
        font-weight: 400 !important;
        ${(0, e.asCssProp)(r.uA.enhancedTextRenderingStyles)};
        /* 
          Adding fill coloring rules for textFillColor here.
          ${(0, e.asCssProp)(v.fillColoringRules)} didn't allow for the case
          where a fillColor wasn't passed a component input, but was 
          controlled by a parent component via css variables.
        */
        color: var(--textFillColor);
        border-color: var(--textFillColor);
      }

      .icon {
        -webkit-user-select: none;
        user-select: none;

        margin: auto;
        ${(0, e.asCssProp)(g.typography.iconTextStyles)};
      }

      :host([fillGradient]) {
        display: inline;
        line-height: 0;
      }

      ${(0, e.asCssProp)(v.fillColoringRules)}
    `
            }

            render() {
                return (0, m.updateColoringVariables)({
                    component: this,
                    fillColor: this.fillColor,
                    fillGradient: this.fillGradient,
                    fillGradientTarget: this.fillGradientTarget
                }), p.dy`<i class="icon">${this.iconLigature}</i>`
            }
        })
    }, 1949: (ee, R, n) => {
        "use strict";
        var p = n(70655), r = n(32830), m = n(56418), e = n(80102), g = n(26532), v = n(65281);

        class i extends r.oi {
            constructor() {
                super(...arguments), this.color = "grey"
            }

            static get styles() {
                return r.iv`
      :host {
        height: ${(0, g.asCssProp)((0, e.gridUnits)(6))};
        display: flex;
        background: none;
        position: relative;
        transform: translateZ(0) scale(1);
        backface-visibility: hidden;
        transform-origin: 0 0;
      }
      .rect {
        box-sizing: content-box;
        width: ${(0, g.asCssProp)((0, e.gridUnits)(1.5))};
        height: 100%;
        animation: opacityFade 1s cubic-bezier(0.5, 0, 0.5, 1) infinite;
      }
      .rect:not(:first-child) {
        margin-left: ${(0, g.asCssProp)((0, e.gridUnits)(1.5))};
      }
      .rect--1 {
        animation-delay: -0.6s;
      }
      .rect--2 {
        animation-delay: -0.4s;
      }
      .rect--3 {
        animation-delay: -0.2s;
      }
      .rect--4 {
        animation-delay: -1s;
      }
      .grey.rect--1 {
        background: #fafafa;
      }
      .grey.rect--2 {
        background: #f2f2f2;
      }
      .grey.rect--3 {
        background: #e5e5e5;
      }
      .grey.rect--4 {
        background: ${(0, g.asCssProp)(v.colors.light[300])};
      }
      .apocyan.rect--1 {
        background: ${(0, g.asCssProp)(v.colors.apocyan[300])};
      }
      .apocyan.rect--2 {
        background: #6edbdb;
      }
      .apocyan.rect--3 {
        background: #67d9e0;
      }
      .apocyan.rect--4 {
        background: ${(0, g.asCssProp)(v.colors.apocyan[500])};
      }
      @keyframes opacityFade {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
        100% {
          opacity: 1;
        }
      }
    `
            }

            render() {
                return r.dy`
      <div class="rect rect--1 ${this.color}"></div>
      <div class="rect rect--2 ${this.color}"></div>
      <div class="rect rect--3 ${this.color}"></div>
      <div class="rect rect--4 ${this.color}"></div>
    `
            }
        }

        (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", Object)], i.prototype, "color", void 0), customElements.define("gu-rectangular-spinner", i)
    }, 90004: (ee, R, n) => {
        "use strict";
        var p = n(70655), e = (n(51256), n(52102), n(32830)), g = n(56418), v = n(65281), i = n(65171), t = n(80102),
            o = n(26532);
        const C = (0, o.asCssProp)((0, t.gridUnits)(11)), f = e.iv`
  ${(0, o.asCssProp)((0, o.setBoxSizing)())}

  :host {
    display: flex;
    width: 100%;
    cursor: pointer;
    padding: ${(0, o.asCssProp)((0, t.gridUnits)(5))} 0 0;
  }

  .innerContainer {
    margin: auto;
    width: 100%;
    padding-bottom: 140%;
    position: relative;
  }

  .itemImage {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .itemImage--cryptoKittyHead,
  .itemImage--cryptoKitty {
    width: 80%;
    height: 80%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .itemImage--cryptoKitty {
    width: 85%;
    height: 85%;
  }

  .colorStrip {
    z-index: 1;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2.5%;
    background: ${(0, o.asCssProp)(v.colors.quality.plain)};
    box-shadow: 0px 1px 2px rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.dark[900]))}, 0.5);
  }

  .gradientSkrim {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: inset 0 0 0 1px rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.light[100]))}, 0.3);
    background: linear-gradient(
      to top,
      rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.dark[900]))}, 1) 0%,
      rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.dark[900]))}, 0) 70%
    );
  }

  .countDisplay {
    position: absolute;
    z-index: 2;
    left: 50%;
    top: ${(0, o.asCssProp)((0, t.gridUnits)(-5))};
    transform: translate(-50%, 0);
    width: ${C};
    height: ${C};
    line-height: ${C};
    background: url('/assets/images/ui-embellishments/ui--count-background-diamonds.svg') center no-repeat;
    background-size: contain;
  }

  .countDisplay__x {
    font-weight: normal;
    text-transform: none;
  }

  .textFields {
    position: absolute;
    bottom: ${(0, o.asCssProp)((0, t.gridUnits)(5))};
    left: 0;
    width: 100%;
    text-align: center;
    padding: 0 ${(0, o.asCssProp)((0, t.gridUnits)(4))};
  }

  .textFields__qualityName {
    text-shadow: 0px ${(0, o.asCssProp)((0, t.gridUnits)(1))} ${(0, o.asCssProp)((0, t.gridUnits)(1))}
      rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.dark[900]))}, 0.5);
  }

  .textFields__qualityName,
  .textFields__itemName {
    display: block;
  }

  .textFields__qualityName {
    margin-bottom: ${(0, o.asCssProp)((0, t.gridUnits)(1))};
  }

  /*
    @NOTE: style for various UI states ...
  */
  :host(.hideCount) {
    padding: 0;
  }

  :host(:hover) .gradientSkrim {
    box-shadow: inset 0 0 0 ${(0, o.asCssProp)((0, t.gridUnits)(.25))} rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.apocyan[300]))}, 1);
  }

  :host(.noAspectRatio) {
    height: 100%;
  }

  :host(.noAspectRatio) .innerContainer {
    padding-bottom: 0%;
    height: 100%;
  }

  :host(.notOwned) .itemImage,
  :host([count='0']) .itemImage {
    opacity: 0.3;
  }

  :host(.equipped) .gradientSkrim {
    box-shadow: inset 0 0 0 ${(0, o.asCssProp)((0, t.gridUnits)(.5))} rgba(${(0, o.asCssProp)((0, i.hexToCssRgbString)(v.colors.apocyan[300]))}, 1);
  }

  :host(.hideBorder) .gradientSkrim {
    box-shadow: none;
  }
`;
        n(29939), n(28917);

        class T extends e.oi {
            static get styles() {
                return f
            }

            renderText() {
                var O, E, u, x;
                if (this.hideText) return e.dy``;
                const s = (null === (E = null === (O = this.board) || void 0 === O ? void 0 : O.class_properties) || void 0 === E ? void 0 : E.quality) || (null === (x = null === (u = this.board) || void 0 === u ? void 0 : u.class_properties) || void 0 === x ? void 0 : x.effort),
                    Z = this.trinket ? this.trinket.name : this.board ? this.board.name : "";
                return e.dy`
      <i class="gradientSkrim"></i>
      <div class="textFields">
        <gu-simple-text class="textFields__qualityName" kind="tag" fillColor=${v.colors.light[100]}>
          ${s}
        </gu-simple-text>
        <gu-heading-text class="textFields__itemName" size="2x-small" fillGradient=${v.gradients.gold.simple()}>
          ${Z}
        </gu-heading-text>
      </div>
    `
            }

            renderCount() {
                var O, E;
                let u;
                return !this.hideCount && void 0 !== this.count && (u = (null === (O = this.trinket) || void 0 === O ? void 0 : O.owned) || (null === (E = this.board) || void 0 === E ? void 0 : E.owned) ? this.count : 0), this.hideCount || void 0 === u ? e.dy`` : e.dy`
        <gu-simple-text class="countDisplay" align="center" kind="micro" data-test-id="loadout-part-count">
          x<strong>${Math.min(u, 99)}</strong>${u > 99 ? "+" : null}
        </gu-simple-text>
      `
            }

            render() {
                var O, E, y;
                return this.noAspectRatio ? this.classList.add("noAspectRatio") : this.classList.remove("noAspectRatio"), (null === (O = this.trinket) || void 0 === O ? void 0 : O.owned) || (null === (E = this.board) || void 0 === E ? void 0 : E.owned) ? this.classList.remove("notOwned") : this.classList.add("notOwned"), this.equipped ? this.classList.add("equipped") : this.classList.remove("equipped"), this.hideText ? this.classList.add("hideText") : this.classList.remove("hideText"), this.hideCount ? this.classList.add("hideCount") : this.classList.remove("hideCount"), this.hideBorder ? this.classList.add("hideBorder") : this.classList.remove("hideBorder"), e.dy`
      <div class="innerContainer">
        ${this.trinket ? ((y, O) => "Good Kitty Statue" === y.name ? ((y, O) => {
                    var E;
                    let u = "#6B6B70", x = "#B1AEB9", s = "#E1E1E1";
                    return (null === (E = null == y ? void 0 : y.properties) || void 0 === E ? void 0 : E.fur_color) && (u = y.properties.fur_color, x = y.properties.belly_color, s = y.properties.eyes_color), O ? e.dy`
      <gu-regular-crypto-kitty-head
        class="itemImage itemImage--trinket itemImage--cryptoKittyHead"
        .furColor=${u}
        .bellyColor=${x}
        .eyeColor=${s}
        data-test-id="loadout-part-trinket"
      ></gu-regular-crypto-kitty-head>
    ` : e.dy`
    <gu-regular-crypto-kitty
      class="itemImage itemImage--trinket itemImage--cryptoKitty"
      .furColor=${u}
      .bellyColor=${x}
      .eyeColor=${s}
      data-test-id="loadout-part-trinket"
    ></gu-regular-crypto-kitty>
  `
                })(y, O) : e.dy`<img
    class="itemImage itemImage--trinket"
    src="https://images.godsunchained.com/collectables/trinkets/${y.proto}--preview.webp"
    alt=""
    data-test-id="loadout-part-trinket"
  />`)(this.trinket, this.noAspectRatio) : null}
        ${this.board ? (y = this.board.proto, e.dy`
  <img
    class="itemImage itemImage--board"
    src="https://images.godsunchained.com/collectables/boards/${y}--thumb.webp"
    alt=""
    data-test-id="loadout-part-board"
  />
  <i class="colorStrip"></i>
`) : null} ${this.renderCount()} ${this.renderText()}
      </div>
    `
            }
        }

        (0, p.gn)([(0, g.C)({
            type: Number,
            reflect: !0
        }), (0, p.w6)("design:type", Number)], T.prototype, "count", void 0), (0, p.gn)([(0, g.C)({type: Object}), (0, p.w6)("design:type", Object)], T.prototype, "board", void 0), (0, p.gn)([(0, g.C)({type: Object}), (0, p.w6)("design:type", Object)], T.prototype, "trinket", void 0), (0, p.gn)([(0, g.C)({type: Boolean}), (0, p.w6)("design:type", Boolean)], T.prototype, "equipped", void 0), (0, p.gn)([(0, g.C)({type: Boolean}), (0, p.w6)("design:type", Boolean)], T.prototype, "noAspectRatio", void 0), (0, p.gn)([(0, g.C)({type: Boolean}), (0, p.w6)("design:type", Boolean)], T.prototype, "hideText", void 0), (0, p.gn)([(0, g.C)({type: Boolean}), (0, p.w6)("design:type", Boolean)], T.prototype, "hideCount", void 0), (0, p.gn)([(0, g.C)({type: Boolean}), (0, p.w6)("design:type", Boolean)], T.prototype, "hideBorder", void 0), customElements.define("gu-loadout-part", T)
    }, 29939: (ee, R, n) => {
        "use strict";
        var p = n(70655), r = n(32830), m = n(56418), e = n(26532), g = n(65281);

        class v extends r.oi {
            static get styles() {
                return r.iv`
      :host {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
      }

      svg {
        flex: 1;
        max-height: 100%;
        max-width: 100%;
      }
    `
            }

            render() {
                return r.YP`
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 204 240">
        <defs>
          <style>
            .furColor {
              fill: ${this.furColor};
            }

            .eyeColor {
              fill: ${this.eyeColor};
            }

            .bellyColor {
              fill: ${this.bellyColor};
            }

            .outlineColor {
              fill: ${(0, e.asCssProp)(g.colors.black)};
              fill-rule: evenodd;
            }
          </style>
        </defs>
        <path
          class="furColor"
          d="M143,209.9c71.5-8.69,66.29-85.92,29.35-129.73,1.14-5-.43-8.14-2.22-12.21-8.7-19.79-9.33-42.93-9.33-60.12a2.57,2.57,0,0,0-3.59-2.53c-13.6,6.29-34.1,29-36.52,44.34-1.45-.11-2.92-.17-4.39-.17-10.13,0-22.78.14-35.51,2.72-9.71-13.55-36.7-39.3-54.08-46a2.78,2.78,0,0,0-3.67,2.88c.34,11.36-1.94,22.37-4.2,33.35-4.29,20.78-8.55,41.43,5,64a5.64,5.64,0,0,0,.62.85A137.93,137.93,0,0,0,21.32,138,80.06,80.06,0,0,0,23,154.35C28.8,193.72,21.32,221.87,13,240H138.1C138.47,227.09,140.14,216.55,143,209.9Z"
        />
        <path class="eyeColor" d="M159.46,111.74l4.6,23.06,18.66-7.22,5.26-19L180.5,90.33l-13.31,6Z" />
        <path class="eyeColor" d="M76.19,133.35l-19.26-23L88.85,98.88l26.66,11.45L126,139.14l-24.1,3Z" />
        <path class="eyeColor" d="M140.43,150.43,142,154.9l11.69,8.49,3.47-.52s5.34-9.08,7.52-13.16l-2.09-3.27Z" />
        <path
          class="bellyColor"
          d="M153.8,60c-2.17-7.88-3.08-23.49,6.54-30.12,1.07,0,1.53,4.45,2,8.75.17,1.56.32,3.1.51,4.4.08.59.16,1.21.24,1.88a60.86,60.86,0,0,0,1.09,6.71A8.17,8.17,0,0,1,173,54a8.75,8.75,0,0,0-4.83,2.94,9.1,9.1,0,0,1-1.67,1.56c2.47-.77,5.31-.14,7.5,4a4,4,0,0,0-2.78,1.09,2.84,2.84,0,0,1-2.67.79c2.45.62,3.61,2.19,3.45,3.12a2.22,2.22,0,0,0-1.89.4c.41.87.85,1.77,1.31,2.69,1.83,3.66,1.69,5.17,1.29,6.78C166.65,70.36,160.05,64.17,153.8,60Z"
        />
        <path
          class="bellyColor"
          d="M42,51c-3.63-7.23-7.36-14.66-11.8-17.73a1,1,0,0,0-1.49.78c-.37,3.48-2,7.21-3.83,11.42C22.6,50.77,20,56.8,19.05,64.06A22.54,22.54,0,0,0,10.5,66.5a27.43,27.43,0,0,1,3.67,3.11,28.69,28.69,0,0,0,4.71,3.87c0,.19,0,.38.05.57-2.71.25-5.55,1.59-6.43,6.45a9.61,9.61,0,0,1,4.69.14,12,12,0,0,0,3,.34c.06.24.12.48.19.72-2.65,2.31-3.3,5-2.88,5.8a5.25,5.25,0,0,1,4.68-.31A75.85,75.85,0,0,0,28,99c1.91-4.67,11.17-21.5,24.25-29.94a1.34,1.34,0,0,0,0-2.1C48.6,64.16,45.35,57.69,42,51Z"
        />
        <path
          class="outlineColor"
          d="M101.91,142.1l-25.72-8.75-19.26-23L88.85,98.88l26.66,11.45L126,139.14Zm-22.2-13.89L67.05,113.07l21.6-7.75,22.11,9.5,7,19.29L102.54,136Z"
        />
        <path
          class="outlineColor"
          d="M163.78,143.69l3.79,5.91-.69,1.29c-1.11,2.09-3,5.41-4.62,8.18l-2.08,3.58-.64,1.08-.84,1.43-.91.14.25,10.17,10.56,6.71a1.87,1.87,0,0,1,.49,2.62,1.93,1.93,0,0,1-2.64.75l-9.85-6.26-13.29,11.78a1.94,1.94,0,0,1-2.66-.39,1.85,1.85,0,0,1,0-2.6l13.41-11.88-.25-10.3L153,166l-13.15-9.55-2.79-8Zm-7.92,16.43-.26.45-1.28.19-10.23-7.42-.33-1,17.62-3.18.39.62c-1.07,2-2.54,4.5-3.84,6.75C157.13,158,156.4,159.21,155.86,160.12Z"
        />
        <path
          class="outlineColor"
          d="M146.64,214.45c-1.69,5.11-4,17.05-3.14,25.55H136c-.5-6.5.66-14.46,1.55-19.26-21.53,2.62-58.9-8.61-71.69-15.82q-4-1.57-7.73-3.44l1.33.42h0c7.27,2.35,33.35,10.77,71.56,7.1q5.43-.36,11.08-1l.58-.06c1.1-.14,2.17-.28,3.23-.45C157.3,205.7,166.45,202,173.66,197a49.09,49.09,0,0,0,11.72-11.44,50,50,0,0,0,3.83-6.14l.07-.14.05-.1,0-.06c.65-1.25,1.25-2.52,1.8-3.82a62.17,62.17,0,0,0,4.36-16.93c0-.4.1-.79.14-1.2q.24-2.4.33-4.86a96,96,0,0,0-3.86-29.69c-1-3.6-2.24-7.19-3.64-10.72-.28-.7-.56-1.41-.86-2.11l-4.91,17.78-18.66,7.22-4.6-23.06,7.73-15.45L178,91.44q-2.13-3.33-4.49-6.5c-1.32-1.77-2.69-3.51-4.11-5.18l-.06-.08c-1.56-1.85-3.18-3.63-4.84-5.34-12.86-13.2-28.62-22-45.55-22.79-.88,0-1.76-.07-2.65-.07a199.22,199.22,0,0,0-29.21,1.65q-2.94.43-5.9,1l-1.27.25-.76-1C74.45,46.75,65.39,37,55.32,28.13S34.35,11.28,26,8.07a.57.57,0,0,0-.59.1,1.07,1.07,0,0,0-.36.86c.34,11.59-2,22.8-4.22,33.7l0,.11a215.77,215.77,0,0,0-3.68,21.45,19.89,19.89,0,0,0-2.05.45,20.52,20.52,0,0,0-2,.63l-.09,0a27.16,27.16,0,0,0-2.52,1.1,21.89,21.89,0,0,1,3.44,2.88l.76.73,0,0c.65.6,1.31,1.2,2,1.75,0,.89,0,1.79,0,2.68a6.06,6.06,0,0,0-3,2.63A8.45,8.45,0,0,0,13,78.64a2.47,2.47,0,0,0-.1.29,10.92,10.92,0,0,0-.39,1.57A6.84,6.84,0,0,1,15,80.29a18.87,18.87,0,0,1,2,.32q.26,2.31.69,4.62a3.12,3.12,0,0,0-.25,2.27,6.31,6.31,0,0,1,.66-.29,61.43,61.43,0,0,0,7.38,18.25,4.52,4.52,0,0,0,.4.56l.67.76-.22,1a130,130,0,0,0-3,25c0,1.69-.08,3.42-.08,5.18,0,2.12.08,4.2.23,6.22a74.67,74.67,0,0,0,1.36,9.74V154h0q.38,1.73.81,3.39c.13,2.13.26,4.13.38,6C28.65,187.86,28,217,17.5,240H8c8.5-14.5,15.68-46.52,10-84.77A84.8,84.8,0,0,1,16.32,138a146.59,146.59,0,0,1,2.8-29.74,68,68,0,0,1-8.29-22.06L6.14,87.52l1.44-7.91a14.77,14.77,0,0,1,2.09-5.48c0-.64,0-1.27,0-1.91a11.73,11.73,0,0,0-1.82-1.48L.29,66l8-4c.74-.37,1.47-.7,2.21-1,.82-6.64,2.17-13.16,3.47-19.48l0-.12c2.29-11.07,4.42-21.52,4.1-32.19-.14-4.79,4.51-10,10.46-7.7C38.09,5.23,49.75,13.85,60,22.88a193.53,193.53,0,0,1,23,23.83c12.19-2.12,24-2.23,33.38-2.23h.49c2.46-7.91,8-16.4,14.16-23.63C138.32,12.2,147.4,4.34,155.13.77a7.35,7.35,0,0,1,7.46.69,7.91,7.91,0,0,1,3.22,6.21c0,.38,0,1.16,0,2.26-.1,5.88-.36,21.08,2.49,36.58.35,0,.7.09,1.06.16a12.57,12.57,0,0,1,7.42,4l5.12,5.84L177.07,58a17.92,17.92,0,0,1,1.35,2.16l3.75,7.09-5.15.16a6.52,6.52,0,0,1-.1,1l-.3,1.69a20.37,20.37,0,0,1,1,8.71c17.69,22.75,28,53.44,24.88,80.16-1.59,13.8-6.76,26.71-16.52,36.76C176.75,205.22,163.72,211.85,146.64,214.45Zm26.07-137a15.73,15.73,0,0,0-.52-4.86,1.55,1.55,0,0,0-.07-.23,10.73,10.73,0,0,0-.61-1.6l-.09-.17c-.22-.44-.43-.88-.64-1.31s-.45-.92-.67-1.38a1.81,1.81,0,0,1,.87-.41,3.18,3.18,0,0,1,1,0v0h0a1.61,1.61,0,0,0,0-.43,3.83,3.83,0,0,0-2.28-2.25l-.2-.08a6.22,6.22,0,0,0-.95-.31,4.69,4.69,0,0,0,.8.05,2.8,2.8,0,0,0,1.87-.84,4.11,4.11,0,0,1,1.51-.89,4.76,4.76,0,0,1,1.27-.2,12,12,0,0,0-1-1.65,8.65,8.65,0,0,0-.77-.89,5.81,5.81,0,0,0-2.3-1.48h0a5.42,5.42,0,0,0-3.38,0,9.1,9.1,0,0,0,1.67-1.56l.2-.22a8.41,8.41,0,0,1,4.15-2.57L173,54a8.36,8.36,0,0,0-6.19-2.58,13.34,13.34,0,0,0-2.61.18,149,149,0,0,1-2.85-19.92c-.2-1.32-.47-4.74-.77-8.59h0c-.55-6.93-1.21-15.25-1.76-15.26a.83.83,0,0,0-.31-.68.48.48,0,0,0-.19-.08.59.59,0,0,0-.25,0c-6.43,3-14.73,10-21.77,18.27a89.1,89.1,0,0,0-7.09,9.51c-2.08,4.07-2,13.09-.58,13.89,14.51,3.1,27.76,11.47,38.75,22.76Q170.14,74.37,172.71,77.45Zm5,45.62-9.19,3.56-2.8-14,5.85-11.7,5.7-2.55,4.35,10.6Z"
        />
      </svg>
    `
            }
        }

        (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], v.prototype, "furColor", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], v.prototype, "bellyColor", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], v.prototype, "eyeColor", void 0), customElements.define("gu-regular-crypto-kitty-head", v)
    }, 28917: (ee, R, n) => {
        "use strict";
        var p = n(70655), r = n(32830), m = n(56418), e = n(26532), g = n(65281);

        class v extends r.oi {
            static get styles() {
                return r.iv`
      :host {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: flex-start;
      }

      svg {
        flex: 1;
        max-height: 100%;
        max-width: 100%;
      }
    `
            }

            render() {
                return r.YP`
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 299.94 497.53">
        <defs>
          <style>
            .furColor {
              fill: ${this.furColor};
            }

            .eyeColor {
              fill: ${this.eyeColor};
            }

            .bellyColor {
              fill: ${this.bellyColor};
            }

            .outlineColor {
              fill: ${(0, e.asCssProp)(g.colors.black)};
              fill-rule: evenodd;
            }
          </style>
        </defs>
        <path
          class="furColor"
          d="M253.37,80.11c36.94,43.81,42.15,121-29.35,129.73-5.11,11.79-6.39,35.79-3.45,63.61,1.68-11.47,3.46-22.64,11.69-28.58,18.77-13.57,47.23,2.88,48.4,23.84,1.5,27-24.38,20.89-28,19.59,9.82,41.51,2.15,83.51-18,90.64a8.61,8.61,0,0,1-5.17.17,115.46,115.46,0,0,1-5.68,15.95c9.76-1,17.9-1.49,23.62-1.12,10,.64,17.87,4.13,23.58,9.12,16.23-.65,18.25,14.75,19,20.7a10.07,10.07,0,0,0,.39,2.18c-2.24-.6-4.34-1.37-6.35-2.11h0l-2.29-.83a29.09,29.09,0,0,1,.24,3.49c7.65,14-.78,19.81-7.88,24.66-2.81,1.93-5.4,3.71-6.71,5.8a24.06,24.06,0,0,1-1.15-6.51l-.68.27c-14,12.27-34.76,5.12-36.67-8.76,7.65.59,11.67.83,15.21-1.83,7.74-6.29,8.31-21.09-7.21-24.67-5.8-1.34-15.22.9-27.31,4.72-.69.78-1.39,1.52-2.06,2.25-3.32,3.57-6.2,6.67-5.81,11,13,0,23.5,8.33,21,26.5-4.12,3.92-12.76,6.17-22.36,7a37.44,37.44,0,0,1-3.27,11.29c-23,9.8-67.55,8.24-65.87-11.26.48-5.53.22-13.8-.68-23.78-2.7.5-5.41,1-8.15,1.38,10,14.32,3.52,26.26-1.17,29.9-6.23,4.85-51,7-60.13-4.16.8-8.91-1.27-17.87-4.61-26.56C18.74,435.91,5,415.3,5,395.94c0-13.64,7-22.16,14.27-31.09C24,359,28.91,353.06,32.11,345.39a85.83,85.83,0,0,1,3-11.38c8.59-25.37,18.11-36.79,29-49.8a234.53,234.53,0,0,0,19.26-25.65v-.14c.43-.67.88-1.35,1.33-2.07,3.2-5.18,6.51-11.07,9.92-17.92,8.32-18.14,15.23-44.77,9.39-84.15a79.51,79.51,0,0,1-1.64-16.36,137.9,137.9,0,0,1,3.12-30.65,6.36,6.36,0,0,1-.62-.85c-13.51-22.61-9.25-43.26-5-64.05,2.26-11,4.54-22,4.2-33.34a2.78,2.78,0,0,1,3.67-2.88c17.38,6.69,44.37,32.43,54.08,46,12.73-2.57,25.38-2.71,35.51-2.71,1.47,0,2.94.06,4.39.17,2.42-15.32,22.92-38.06,36.52-44.34a2.56,2.56,0,0,1,3.38,1.33,2.48,2.48,0,0,1,.21,1.2c0,17.19.63,40.33,9.33,60.12C252.94,72,254.51,75.08,253.37,80.11Z"
        />
        <path class="eyeColor" d="M240.46,111.68l4.6,23.06,18.66-7.22,5.26-19L261.5,90.27l-13.31,6Z" />
        <path class="eyeColor" d="M157.19,133.29l-19.26-23,31.92-11.44,26.66,11.44L207,139.08l-24.1,3Z" />
        <path class="eyeColor" d="M221.43,150.37l1.56,4.47,11.69,8.49,3.47-.53s5.34-9.07,7.52-13.15l-2.09-3.27Z" />
        <path
          class="bellyColor"
          d="M234.8,59.92c-2.17-7.87-3.08-23.48,6.54-30.11,1.07,0,1.53,4.45,2,8.74.17,1.56.32,3.1.51,4.4.08.6.16,1.22.24,1.88a61.07,61.07,0,0,0,1.09,6.72A8.16,8.16,0,0,1,254,53.94a8.75,8.75,0,0,0-4.83,2.94,9.15,9.15,0,0,1-1.67,1.56c2.47-.77,5.31-.14,7.5,4a4,4,0,0,0-2.78,1.09,2.81,2.81,0,0,1-2.67.78c2.45.63,3.61,2.2,3.45,3.13a2.17,2.17,0,0,0-1.89.4c.41.87.85,1.76,1.31,2.69,1.83,3.65,1.69,5.17,1.29,6.78C247.65,70.3,241.05,64.1,234.8,59.92Z"
        />
        <path
          class="bellyColor"
          d="M123,51c-3.63-7.23-7.36-14.66-11.8-17.74a1,1,0,0,0-1.36.38.83.83,0,0,0-.13.41c-.37,3.48-2,7.21-3.83,11.42C103.6,50.71,101,56.73,100,64a22.61,22.61,0,0,0-8.54,2.44,27.39,27.39,0,0,1,3.68,3.11,29.06,29.06,0,0,0,4.7,3.87,2.12,2.12,0,0,0,0,.56c-2.71.25-5.55,1.6-6.43,6.46a9.43,9.43,0,0,1,4.69.14,12.12,12.12,0,0,0,3,.34c.06.24.12.48.19.72-2.65,2.3-3.3,5-2.88,5.8a5.25,5.25,0,0,1,4.68-.31A76.35,76.35,0,0,0,109,98.94c1.91-4.67,11.17-21.5,24.25-29.94a1.34,1.34,0,0,0,.22-1.88,1.52,1.52,0,0,0-.22-.22C129.6,64.1,126.35,57.62,123,51Z"
        />
        <path
          class="bellyColor"
          d="M228.32,335.92c5.89,46.14-19.2,96.25-50.26,95.09-7.54-21-11.13-53.22-10-70.21s4-38.63,2.95-59.32c5.4-27.6,12.12-46.36,26.79-48.06C210.26,252,222.32,288.92,228.32,335.92Z"
        />
        <path
          class="outlineColor"
          d="M182.91,142l-25.72-8.75-19.26-23,31.92-11.44,26.66,11.44L207,139.08Zm-22.2-13.89L148.05,113l21.6-7.75,22.11,9.49,7,19.3-15.25,1.87Z"
        />
        <path
          class="outlineColor"
          d="M244.78,143.62l3.79,5.92-.69,1.29c-1.11,2.08-3,5.41-4.62,8.18l-2.08,3.57-.64,1.09-.84,1.43-.91.13.25,10.18,10.56,6.71a1.86,1.86,0,0,1,.51,2.58l0,0a1.92,1.92,0,0,1-2.6.78l0,0-9.85-6.26L224.31,191a1.94,1.94,0,0,1-2.66-.39,1.85,1.85,0,0,1,0-2.6l13.41-11.89-.25-10.29L234,166l-13.15-9.55-2.79-8Zm-7.92,16.44-.26.45-1.28.19-10.23-7.42-.33-1,17.62-3.17.39.62c-1.07,2-2.54,4.5-3.84,6.74C238.13,157.89,237.4,159.15,236.86,160.06Z"
        />
        <path
          class="outlineColor"
          d="M27.31,343.92c-2.89,6.68-7.21,12-11.91,17.76l-.27.34C8,370.77,0,380.51,0,395.94a45.28,45.28,0,0,0,13,31.67A60.46,60.46,0,0,0,26.9,438.3C11.8,444.35,3,451.64,3,459.47c0,21,63.28,38.06,141.34,38.06s141.34-17,141.34-38.06a13,13,0,0,0-3.26-8.16,23.55,23.55,0,0,0,5.67-6.7,18,18,0,0,0,1.19-13.82l10.66,2.84-4.73-9.45v-.76l-.07-.48c-.38-3-1.19-9.14-4.33-14.53a20.56,20.56,0,0,0-7.41-7.55A21.66,21.66,0,0,0,273,398.05,44.78,44.78,0,0,0,247.82,389a121,121,0,0,0-16.27.38c.59-1.63,1.15-3.28,1.68-5a12.77,12.77,0,0,0,3.17-.71c6.43-2.28,11.49-7.21,15.28-13.45s6.5-14.06,8.18-22.74c3-15.33,2.85-34-.7-52.82a32.34,32.34,0,0,0,10.65-.69,20,20,0,0,0,11.7-7.73c3.1-4.38,4.56-10.28,4.14-17.79-.7-12.66-9.53-23.38-20.27-29s-24.74-6.78-36,1.4a24.21,24.21,0,0,0-5.31,5.24q0-5.34.25-10.16c.49-9.1,1.68-16.4,3.37-21.51,17.08-2.61,30.11-9.23,39.35-18.76,9.76-10,14.93-23,16.52-36.76,3.07-26.72-7.19-57.41-24.88-80.16a20.45,20.45,0,0,0-1-8.71l.3-1.69a6.64,6.64,0,0,0,.1-1l5.15-.16-3.75-7.09a18.69,18.69,0,0,0-1.35-2.17l4.81-1.44-5.12-5.84a12.56,12.56,0,0,0-7.42-4l-1.06-.15c-2.85-15.5-2.59-30.7-2.49-36.58V7.64a7.89,7.89,0,0,0-3.22-6.2,7.32,7.32,0,0,0-7.46-.69c-7.77,3.53-16.85,11.39-24.17,20-6.14,7.22-11.7,15.72-14.16,23.63h-.49c-9.34,0-21.19.11-33.38,2.23a193.27,193.27,0,0,0-23-23.83c-10.22-9-21.87-17.66-31.44-21.34-6-2.29-10.6,2.91-10.46,7.7.32,10.67-1.81,21.11-4.1,32.18v.13C93.64,47.8,92.29,54.33,91.47,61c-.74.3-1.47.63-2.21,1l-8,4,7.56,4.73a10.81,10.81,0,0,1,1.82,1.48v1.91a14.53,14.53,0,0,0-2.09,5.47L87.11,87.5l4.69-1.33a68.13,68.13,0,0,0,8.29,22,147.08,147.08,0,0,0-2.8,29.75A84.57,84.57,0,0,0,99,155.16c5.65,38.25-1.06,63.85-9,81.11-3.33,6.67-6.54,12.4-9.65,17.42-.44.7-.87,1.37-1.29,2l-.23.37-.07.14A229,229,0,0,1,60.17,281l-.12.14c-10.94,13.13-20.87,25.12-29.72,51.25A89.64,89.64,0,0,0,27.31,343.92Zm216.5,88.52a9,9,0,0,0,.59-4.85c-.45-2.67-2.45-5.88-8.52-7.28-1.87-.43-4.85-.37-9.25.47a132.52,132.52,0,0,0-14.14,3.74l-1.18,1.27h0l-.11.13A286.78,286.78,0,0,1,243.81,432.44ZM94,65.34a25.61,25.61,0,0,0-2.52,1.1,21.53,21.53,0,0,1,3.44,2.88l.77.73h0c.65.61,1.31,1.21,2,1.76v2.68a6,6,0,0,0-3,2.63A7.8,7.8,0,0,0,94,78.58a2.47,2.47,0,0,0-.1.29,10.59,10.59,0,0,0-.39,1.57A7.2,7.2,0,0,1,96,80.22a17,17,0,0,1,2,.33q.25,2.31.69,4.62a3.09,3.09,0,0,0-.25,2.27q.33-.16.66-.3a61.15,61.15,0,0,0,7.38,18.25,3.78,3.78,0,0,0,.4.56l.67.77-.22,1a129.87,129.87,0,0,0-3,25c0,1.69-.08,3.42-.08,5.18q0,3.18.23,6.22a74.19,74.19,0,0,0,1.36,9.73v.06h0c.24,1.14.51,2.28.8,3.39q.19,3.19.38,6c2.54,24.51,0,43.8-4.4,59a122.71,122.71,0,0,1-6,16.18v.16c-.25.54-.5,1.07-.76,1.61-1.64,3.49-3.33,6.66-5,9.54l.21-.61c-1.6,2.8-3.3,5.66-5.13,8.71h0c-7.35,11.82-14.17,20-20.49,27.59l-2.38,2.87C53.4,300.15,44.8,311.47,37,334.65c-3.36,9.91-5,22.28-4.83,34.5s2.23,24.12,6.11,33.09c2,4.55,4.62,9.49,7.5,14.79l.62,1.15c2.68,4.93,5.51,10.15,8.07,15.52,5.37,11.28,9.67,23.53,8.82,35.86,2,2,5.72,3.63,10.76,4.79a86.36,86.36,0,0,0,15.78,1.92c1.43-3.66,3.07-11.07-1-18.07,6.76,3,8.51,13.23,6.56,18.17a119.33,119.33,0,0,0,15-1c.74-.11,1.46-.21,2.14-.33,1.58-3.71,4.55-12.06-.27-19.36,6.24,3.72,7.57,13,5.89,18.06a7.46,7.46,0,0,0,2-.94c2.61-2,6.22-7.5,5.59-14.83s-5.42-16.72-20.44-26.68l-1-.62.08-1.69c.36-7.53,1.12-23.44-1.31-40.62-2.5-17.67-8.65-35.89-21.4-48.21C77.3,336,75.16,330,74,323.74a55.16,55.16,0,0,0,12.26,16.45C100,353.44,104.48,369.87,107,387.84a216,216,0,0,1,1.42,39.79,102,102,0,0,0,14.9,3.69l-.09-.07c2.57-6.79-4.88-47.67-8.8-68.16-2.5-9.81-5.25-19.26-8.19-27.85h0c5.39,3.53,8,12.31,10,19.61h.06c4,14.59,7.42,30.23,10.15,45.21,5.13,28.16,7.81,54.3,6.72,66.92-.34,3.93,1.56,7,5.43,9.51s9.73,4.17,16.49,4.95A82.32,82.32,0,0,0,164,482c1.61-4,4.25-12.94-.41-20,6.43,3.84,7.31,14.86,5.34,19.91a94,94,0,0,0,16.61-2.23c1.27-9.21,1.56-14.34-3.52-22,6.48,3.87,9.52,10.49,8,20.89,2-.59,3.86-1.24,5.61-1.95,2.36-5.29,3.66-12,2.62-17.74a15.35,15.35,0,0,0-3.56-7.71,15.11,15.11,0,0,0-8.36-4.52,12.45,12.45,0,0,1-6.88-4.7,36.19,36.19,0,0,1-5-8.94c-2.89-7-5.07-16.11-6.67-25.47-3.18-18.7-4.73-40.34-3.89-48.4.33-4.92.74-10,1.16-15.06h0c2-25.12,4.23-52-2.08-75.58,7.28,7.59,7.83,27.15,8.15,38.31,0,.88,0,1.71.08,2.48.42,12.83-.79,24.76-1.87,35.37h0c-.52,5.15-1,10-1.27,14.48-.78,13.7.52,29.22,3.67,47.73,1.55,9.1,3.63,17.74,6.3,24.33h.27c18.8-.09,34.67-17.29,43.45-40.57.63-1.58,1.22-3.21,1.79-4.88,9-26.51,9.88-62.84-2.65-104.35v-.26q-4.16-26-3.83-44a99.83,99.83,0,0,1,1.48-16.46c-21.53,2.63-58.9-8.6-71.69-15.81-2.67-1.05-5.24-2.2-7.73-3.44l1.33.42h0c7.27,2.35,33.35,10.77,71.56,7.1q5.43-.36,11.08-1l.58-.07c1.1-.13,2.17-.28,3.23-.44,11.39-1.78,20.54-5.45,27.75-10.47a49.16,49.16,0,0,0,11.72-11.44,50.55,50.55,0,0,0,3.83-6.15l.07-.13.05-.1v-.06c.65-1.25,1.25-2.52,1.8-3.83a62.28,62.28,0,0,0,4.36-16.92c.05-.4.1-.8.14-1.2q.24-2.4.33-4.86a96.14,96.14,0,0,0-3.86-29.69,106.54,106.54,0,0,0-3.64-10.72c-.28-.7-.56-1.41-.85-2.11l-4.92,17.78L245,134.72l-4.6-23.06,7.73-15.45L259,91.38q-2.13-3.33-4.49-6.5-2-2.67-4.11-5.19l-.06-.07c-1.56-1.85-3.18-3.63-4.84-5.34-12.86-13.21-28.62-22-45.55-22.8-.88,0-1.76-.06-2.65-.06a198.1,198.1,0,0,0-29.21,1.65q-2.94.43-5.9,1l-1.27.26-.76-1C155.43,46.67,146.37,37,136.3,28s-21-16.82-29.3-20a.54.54,0,0,0-.59.1,1,1,0,0,0-.36.86c.34,11.59-2,22.8-4.22,33.7v.11a215.94,215.94,0,0,0-3.68,21.45,18.7,18.7,0,0,0-2,.44c-.64.18-1.31.39-2,.64Zm159.69,12a15.7,15.7,0,0,0-.52-4.87.31.31,0,0,0-.07-.23,11.33,11.33,0,0,0-.61-1.59l-.09-.17c-.22-.44-.43-.88-.64-1.31l-.67-1.38a1.89,1.89,0,0,1,.87-.41,3.35,3.35,0,0,1,1,0h0a1.55,1.55,0,0,0,0-.43,3.81,3.81,0,0,0-2.28-2.25l-.2-.08a8.16,8.16,0,0,0-.95-.32,3.55,3.55,0,0,0,.8.06,2.75,2.75,0,0,0,1.87-.84,4.3,4.3,0,0,1,1.51-.9,4.94,4.94,0,0,1,1.27-.19,11.5,11.5,0,0,0-1-1.65,11.06,11.06,0,0,0-.77-.9,6,6,0,0,0-2.3-1.48h0a5.42,5.42,0,0,0-3.38,0,9.15,9.15,0,0,0,1.67-1.56l.2-.22a8.41,8.41,0,0,1,4.15-2.57l.48-.15a8.35,8.35,0,0,0-6.19-2.58,12.69,12.69,0,0,0-2.61.18,148.75,148.75,0,0,1-2.85-19.93c-.2-1.31-.47-4.73-.77-8.58h0c-.55-6.92-1.21-15.24-1.76-15.25a.82.82,0,0,0-.31-.68.46.46,0,0,0-.19-.08.53.53,0,0,0-.25,0c-6.43,3-14.73,10-21.77,18.27a90,90,0,0,0-7.09,9.51c-2.08,4.07-2,13.09-.58,13.89,14.51,3.1,27.76,11.47,38.75,22.75,1.82,1.95,3.59,3.94,5.3,6ZM20.9,366c1.46-1.79,3-3.61,4.41-5.51,2.38.09,2.54,3.37,2.65,5.75a11.21,11.21,0,0,0,.16,1.83h0v1.14c.2,12.56,2.28,25,6.44,34.62,2,4.74,4.79,9.83,7.65,15.11l.61,1.13c1.9,3.49,3.85,7.07,5.71,10.73a1,1,0,0,0,0,.16h0c.49,1.52,1.64,5.07-2.08,8.12A74.57,74.57,0,0,1,25.28,429C12.18,419.68,7,407.53,7,395.94c0-12.84,6.49-20.86,13.82-29.83Zm198.47,49.24-1.82.49a39.66,39.66,0,0,0,3.12-4.68c2.89-4.77,6.79-11.2,13.19-14.87a106.87,106.87,0,0,1,13.51-.26c9.58.62,17,3.95,22.39,8.64l.6.52h.8a15.52,15.52,0,0,1,8.63,1.85,13.65,13.65,0,0,1,4.87,5c2.17,3.72,2.92,8.11,3.34,11.14-1.06-.36-2.11-.74-3.16-1.13h0l-2.31-.84-3.07-1.1.41,3.21a27.15,27.15,0,0,1,.22,3.25v.5l.24.44c3.6,6.6,3.22,10.82,1.59,13.87-1.77,3.29-5.19,5.69-8.84,8.18h0c-1.37.94-2.78,1.91-4,2.91l-.45.38c-.12-.82-.2-1.64-.24-2.47l-.12-2.84-2.64,1.08c-.2.09-.42.17-.63.25l-.33.13-.27.24a22.65,22.65,0,0,1-21,5c-5.67-1.58-10.09-5.29-11.75-10.06,5.93.41,10.11.36,13.83-2.43h0a16.52,16.52,0,0,0,5.83-15.24c-1-5.84-5.41-11-13.85-12.94-4.58-1-10.83-.08-18.09,1.79Zm-8,47.89a64.41,64.41,0,0,1-8.72,1.53,29.3,29.3,0,0,0-.39-6.48,19.41,19.41,0,0,0-4.52-9.67,19.13,19.13,0,0,0-10.51-5.77,8.5,8.5,0,0,1-4.6-3.29,25.37,25.37,0,0,1-2.7-4.24c2.41.76,15.08-.86,19.88-4.44a13.67,13.67,0,0,0,0,2.86l.2,1.78h1.78c6.1,0,11.37,1.95,14.83,5.78s5.27,9.45,4.29,17.72a19.9,19.9,0,0,1-6,3.17c1-2.84,1-8.32-5.31-11.54,4.75,5.21,3.15,9.75,2.1,12.51l-.18.05ZM251.94,353c-3.57,10.58-13.47,16.36-19.87,15.6,4.38-24.74,2.78-54.93-7.24-88.21q-.92-5.76-1.6-11.09a83.06,83.06,0,0,1,2-9.5c1.62-5.67,4-10.26,8.22-13.28,8.61-6.23,19.58-5.66,28.7-.87s16,13.6,16.53,23.2a32.11,32.11,0,0,1-.11,5.46,12.36,12.36,0,0,0-4.68-6.16A18.74,18.74,0,0,1,276.62,281q-.33.58-.69,1.11a11.88,11.88,0,0,1-5.25,4.23c-.05-.43-.1-.84-.15-1.25-.77-6.33-1.32-10.92-8-15.49a31.73,31.73,0,0,1,3.93,18l-.95.14c-1.48.14-3.57.24-5.87.27h-1.15a17.32,17.32,0,0,0-8.17-15.25c.32.79.69,1.57,1.07,2.38A24.94,24.94,0,0,1,254.31,288a42,42,0,0,1-8.14-1c-5.62-1.5-10.15-4.46-10.94-5.79a11,11,0,0,0,3.7,6.24c3.4,3.92,10.25,9.26,14.08,9.2,3.58,18.4,3.51,36.19.47,50.46C253,349.09,252.51,351.07,251.94,353Zm6.8-230-9.19,3.56-2.8-14,5.85-11.7,5.7-2.55,4.35,10.6Z"
        />
      </svg>
    `
            }
        }

        (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], v.prototype, "furColor", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], v.prototype, "bellyColor", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], v.prototype, "eyeColor", void 0), customElements.define("gu-regular-crypto-kitty", v)
    }, 65694: (ee, R, n) => {
        "use strict";
        var p = n(70655), i = (n(90004), n(51256), n(11015), n(61517), n(43977), n(32830)), t = n(56418), o = n(7302),
            C = n(98539), f = n(65281), P = n(65171), w = n(80102), k = n(26532);
        const F = i.iv`
  :host {
    display: block;
    width: 100%;
  }

  .innerContainer {
    position: relative;
    width: 100%;
    padding-bottom: 100%;
  }

  .gradientSkrim {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: linear-gradient(
      to top,
      rgba(${(0, k.asCssProp)((0, P.hexToCssRgbString)(f.colors.dark[900]))}, 1) 0%,
      rgba(${(0, k.asCssProp)((0, P.hexToCssRgbString)(f.colors.dark[900]))}, 0) 70%
    );
  }

  .trinket {
    width: 100%;
    height: 100%;
    cursor: pointer;
    position: absolute;
    top: 0;
    left: 0;
    border-radius: 50%;
    border: ${(0, k.asCssProp)((0, w.gridUnits)(.5))} solid ${(0, k.asCssProp)(f.colors.gunmetal[500])};
    background: ${(0, k.asCssProp)(f.colors.gunmetal[900])};
    overflow: hidden;
    box-shadow: 0px 0px ${(0, k.asCssProp)((0, w.gridUnits)(2))} rgba(${(0, k.asCssProp)((0, P.hexToCssRgbString)(f.colors.dark[900]))}, 0.65);
  }

  .trinketName {
    position: absolute;
    bottom: 13%;
    left: 50%;
    width: 70%;
    transform: translateX(-50%);
  }

  .clearButton {
    position: absolute;
    top: 6%;
    right: 6%;
    cursor: pointer;
  }

  .uiTextArea {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    transform: translate(-50%, -50%);
    display: flex;
    flex-direction: column;
    color: ${(0, k.asCssProp)(f.colors.gunmetal[500])};
  }

  .uiTextArea__icon {
    font-size: ${(0, k.asCssProp)((0, w.gridUnits)(7))};
    margin-bottom: ${(0, k.asCssProp)((0, w.gridUnits)(1))};
  }

  .uiTextArea__text--choose {
  }

  .uiTextArea__text--replace {
    display: none;
  }

  /*

    @NOTE: Handle various UI states:

  */

  /*
    HIGHLIGHT STATES:
  */
  .innerContainer--highlight {
    cursor: pointer;
  }

  .innerContainer--highlight .trinket {
    border-color: ${(0, k.asCssProp)(f.colors.gold[300])};
  }

  .innerContainer--highlight:hover .trinket {
    border-color: ${(0, k.asCssProp)(f.colors.apocyan[300])};
  }

  .innerContainer--highlight .uiTextArea {
    color: ${(0, k.asCssProp)(f.colors.light[100])};
  }

  /*
    EQUIPPED STATES:
  */
  .innerContainer--equipped .uiTextArea__icon,
  .innerContainer--equipped .uiTextArea__text--choose,
  .innerContainer--equipped .uiTextArea__text--replace {
    display: none;
  }
  .innerContainer--equipped:hover .uiTextArea__icon {
    display: inline-flex;
  }
  .innerContainer--equipped:hover .uiTextArea__text--replace {
    display: block;
  }
`;

        class _ extends i.oi {
            constructor() {
                super(...arguments), this.highlight = !1, this.hideNameText = !1
            }

            static get styles() {
                return F
            }

            update(y) {
                y.has("highlight") && !y.get("highlight") && (this.hideNameText = !1), super.update(y)
            }

            renderTrinketName() {
                return this.hideNameText ? i.dy`` : i.dy`
      <gu-heading-text
        fillGradient=${f.gradients.gold.simple()}
        class="trinketName"
        align="center"
        size="2x-small"
        data-test-id="selected-trinket-name"
      >
        ${this.trinket.name}
      </gu-heading-text>
    `
            }

            renderTrinket() {
                return this.trinket ? i.dy`
      <div class="gradientSkrim"></div>
      ${this.renderTrinketName()}
      <gu-circular-close-button
        class="clearButton"
        @click=${() => this.dispatchEvent(new CustomEvent("xButtonClick", {bubbles: !0, composed: !0}))}
        data-test-id="selected-trinket-close-button"
      ></gu-circular-close-button>
    ` : i.dy``
            }

            renderInstructions() {
                return this.highlight ? i.dy`
        <gu-icon class="uiTextArea__icon" iconLigature="add_item"></gu-icon>
        <gu-paragraph-text class="uiTextArea__text uiTextArea__text--choose" kind="tag" align="center">
          choose slot
        </gu-paragraph-text>
        <gu-paragraph-text class="uiTextArea__text uiTextArea__text--replace" kind="tag" align="center">
          replace
        </gu-paragraph-text>
      ` : this.trinket ? i.dy`` : i.dy`
        <gu-paragraph-text class="uiTextArea__text uiTextArea__text--empty" kind="tag" align="center">
          select a trinket
        </gu-paragraph-text>
      `
            }

            onClick() {
                this.dispatchEvent(new CustomEvent("trinketClick", {bubbles: !0, composed: !0}))
            }

            onMouseEnter() {
                this.trinket && this.highlight && (this.hideNameText = !0)
            }

            onMouseLeave() {
                this.trinket && this.highlight && (this.hideNameText = !1)
            }

            render() {
                return i.dy`
      <div
        class=${(0, C.$)({
                    innerContainer: !0,
                    "innerContainer--highlight": this.highlight,
                    "innerContainer--equipped": !!this.trinket
                })}
        @click=${this.onClick}
        @mouseenter=${this.onMouseEnter}
        @mouseleave=${this.onMouseLeave}
        data-test-id="selected-trinket-container"
      >
        <gu-loadout-part
          class="trinket"
          .trinket=${this.trinket}
          ?noAspectRatio=${!0}
          ?hideCount=${!0}
          ?hideBorder=${!0}
          ?hideText=${!0}
        ></gu-loadout-part>
        ${this.renderTrinket()}
        <div class="uiTextArea">${this.renderInstructions()}</div>
      </div>
    `
            }
        }

        (0, p.gn)([(0, t.C)({type: Object}), (0, p.w6)("design:type", Object)], _.prototype, "trinket", void 0), (0, p.gn)([(0, t.C)({type: Boolean}), (0, p.w6)("design:type", Object)], _.prototype, "highlight", void 0), (0, p.gn)([(0, o.S)(), (0, p.w6)("design:type", Object)], _.prototype, "hideNameText", void 0), customElements.define("gu-selected-trinket", _)
    }, 69039: (ee, R, n) => {
        "use strict";
        n.d(R, {Q: () => m});
        var p = n(30109);
        const m = (0, p.XM)(class extends p.Xe {
            constructor(g) {
                super(g)
            }

            update(g, [v]) {
                v.current = g.element
            }

            render(g) {
            }
        })
    }, 25297: (ee, R, n) => {
        "use strict";
        n.d(R, {J: () => g});
        var p = n(84876), r = n(69800), m = n(32830);
        const e = Promise.resolve().then.bind(Promise.resolve());
        window.fakeComponentToFoolBuildOptimizer = (0, r.z)(() => {
        });

        class g extends m.oi {
            constructor() {
                super(), this.haunted = new p.ZM(() => this.requestUpdate(), this)
            }

            update(i) {
                this.haunted.run(() => {
                    super.update(i)
                })
            }

            updated(i) {
                super.updated(i), this.haunted.runLayoutEffects(), e(() => this.haunted.runEffects())
            }

            disconnectedCallback() {
                this.haunted.teardown(), super.disconnectedCallback()
            }
        }
    }, 65171: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            componentToHex: () => r,
            loopForVariable: () => m,
            rgbToHex: () => e,
            hexToRgb: () => g,
            hexToCssRgbString: () => v,
            setPropertyGradientFromVariable: () => i,
            setPropertyGradient: () => t,
            setPropertyColorFromVariable: () => o,
            setPropertyColor: () => C,
            setBorderColorHoverFromVariable: () => f,
            setBorderColorHover: () => P,
            setBackgroundFillHoverFromVariable: () => w,
            setBackgroundFillHover: () => k,
            updateColoringVariables: () => F
        });
        var p = n(65281);
        const r = _ => {
            const T = _.toString(16);
            return 1 === T.length ? "0" + T : T
        }, m = _ => {
            const T = _.split(".");
            let y = p;
            for (let O = 0; O < T.length; O++) y = y[T[O]];
            return y
        }, e = (_, T, y) => `#${r(_)}${r(T)}${r(y)}`, g = _ => {
            const T = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(_);
            return T ? {r: parseInt(T[1], 16), g: parseInt(T[2], 16), b: parseInt(T[3], 16)} : void 0
        }, v = _ => {
            const T = g(_);
            return T ? `${T.r}, ${T.g}, ${T.b}` : void 0
        }, i = (_, T, y, O) => {
            const u = m(T)(O).replace(/;/gm, "");
            _.setProperty(y, u)
        }, t = (_, T, y) => {
            _.setProperty(y, T.replace(/;/gm, ""))
        }, o = (_, T, y) => {
            const O = m(T);
            _.setProperty(y, O)
        }, C = (_, T, y) => {
            _.setProperty(y, T)
        }, f = (_, T) => {
            const y = m(T);
            _.setProperty("--borderColorHover", y)
        }, P = (_, T) => {
            _.setProperty("--borderColorHover", T)
        }, w = (_, T) => {
            const y = m(T);
            _.setProperty("--backgroundFillColorHover", y)
        }, k = (_, T) => {
            _.setProperty("--backgroundFillColorHover", T)
        }, F = ({
                    component: _,
                    fillColor: T,
                    fillColorHover: y,
                    fillGradient: O,
                    fillGradientTarget: E,
                    borderColor: u,
                    borderColorHover: x,
                    backgroundFillColor: s,
                    backgroundFillColorHover: Z,
                    backgroundFillGradient: X,
                    backgroundFillGradientTarget: me,
                    iconColor: ue
                }) => {
            T && (_.setAttribute("fillColor", T), /colors\./.test(T) ? o(_.style, T, "--textFillColor") : C(_.style, T, "--textFillColor")), y && (_.setAttribute("fillColorHover", y), /colors\./.test(y) ? o(_.style, y, "--textFillColorHover") : C(_.style, y, "--textFillColorHover")), u && (_.setAttribute("borderColor", u), /colors\./.test(u) ? o(_.style, u, "--borderColor") : C(_.style, u, "--borderColor")), x && (_.setAttribute("borderColorHover", x), /colors\./.test(x) ? o(_.style, x, "--borderColorHover") : C(_.style, x, "--borderColorHover")), x && (_.setAttribute("borderColorHover", x), /colors\./.test(x) ? f(_.style, x) : P(_.style, x)), s && (_.setAttribute("backgroundFillColor", s), /colors\./.test(s) ? o(_.style, s, "--backgroundFillColor") : C(_.style, s, "--backgroundFillColor")), Z && (_.setAttribute("backgroundFillColorHover", Z), /colors\./.test(Z) ? o(_.style, Z, "--backgroundFillColorHover") : C(_.style, Z, "--backgroundFillColorHover")), ue && (_.setAttribute("iconColor", ue), /colors\./.test(ue) ? o(_.style, ue, "--iconColor") : C(_.style, ue, "--iconColor")), Z && (_.setAttribute("backgroundFillColorHover", Z), /colors\./.test(Z) ? w(_.style, Z) : k(_.style, Z)), X && (_.setAttribute("backgroundFillGradient", X), /gradients\./.test(X) ? i(_.style, X, "--backgroundFillGradient", me) : t(_.style, X, "--backgroundFillGradient")), O && (_.setAttribute("fillGradient", O), /gradients\./.test(O) ? i(_.style, O, "--textFillGradient", E) : t(_.style, O, "--textFillGradient"))
        }
    }, 5284: (ee, R, n) => {
        "use strict";
        n.d(R, {gt: () => m, I5: () => p, dz: () => v, ZB: () => t, uA: () => r});
        var p = {};
        n.r(p), n.d(p, {isIos: () => e, isSafari: () => g});
        var r = {};
        n.r(r), n.d(r, {enhancedTextRenderingStyles: () => P, stringContainsEmoji: () => f, uppercaseWord: () => w});
        var m = n(65171);

        function e() {
            return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document
        }

        const g = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        var v = n(80102), t = (n(26711), n(26532)), o = n(89747), C = n.n(o);
        const f = k => C()().test(k),
            P = "\n  /* Get fonts to look slightly nicer where possible */\n  -webkit-font-smoothing: subpixel-antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility\n",
            w = k => k.charAt(0).toUpperCase() + k.slice(1)
    }, 80102: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            gridUnits: () => p,
            checkOutOfBounds: () => r,
            getOuterHeight: () => m,
            waitForImageToLoad: () => e
        });
        const p = g => 4 * g + "px", r = ({
                                              x: g,
                                              y: v,
                                              left: i,
                                              top: t,
                                              width: o,
                                              height: C,
                                              tolerance: f = 2
                                          }) => (window.scrollY >= t && (t -= window.scrollY, C += window.scrollY), v >= Math.floor(C + t - f) || v <= t + f || g >= Math.floor(o + i - f) || g <= i + f),
            m = g => {
                const v = window.getComputedStyle(g), i = parseInt(v.getPropertyValue("margin-top")),
                    t = parseInt(v.getPropertyValue("margin-bottom"));
                return g.offsetHeight + i + t
            }, e = g => new Promise((v, i) => {
                const t = () => {
                    g.removeEventListener("load", C), g.removeEventListener("error", o)
                }, o = f => {
                    console.error("Awww snap! <img> or <picture> LOAD ERROR:", f, g.src), t(), i()
                }, C = () => {
                    t(), v()
                };
                g.complete ? v() : (g.addEventListener("load", C), g.addEventListener("error", o))
            })
    }, 26711: (ee, R, n) => {
        "use strict";
        n.d(R, {b: () => p});
        const p = {fromAttribute: r => r && "false" !== r, toAttribute: r => r ? "true" : "false"}
    }, 26532: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            asCssProp: () => m,
            drawHexShapePolygonMask: () => e,
            drawBottomHexShapePolygonMask: () => g,
            setBoxSizing: () => v,
            fadeReveal: () => i,
            listReveal: () => t,
            styleScrollbars: () => o,
            inset: () => C
        });
        var p = n(32830), r = n(65281);
        const m = f => p.iv`${(0, p.$m)(f)}`,
            /* HEX BUTTON I THINK ?*/
            e = (f, P, w = 0) => `\n  clip-path: polygon(\n    ${f + w}px 0%,\n    calc(100% - ${P + w}px) 0%,\n    100% 50%,\n    calc(100% - ${P + w}px) 100%,\n    ${f + w}px 100%,\n    0% 50%\n  );\n  -webkit-clip-path: polygon(\n    ${f + w}px 0%,\n    calc(100% - ${P + w}px) 0%,\n    calc(100% - ${w}px) 50%,\n    calc(100% - ${P + w}px) 100%,\n    ${f + w}px 100%,\n    ${w}px 50%\n  );\n`,
            g = f => `\n  clip-path: polygon(\n    0% 0%,\n    100% 0%,\n    100% calc(100% - ${f}),\n    50% 100%,\n    0% calc(100% - ${f}),\n    0% 0%\n  );\n  -webkit-clip-path: polygon(\n    0% 0%,\n    100% 0%,\n    100% calc(100% - ${f}),\n    50% 100%,\n    0% calc(100% - ${f}),\n    0% 0%\n  );\n`,
            v = (f = "border-box") => `\n  :host,\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: ${f};\n  }\n`,
            i = (f, P, w = "initial", k = .3, F = 0) => `\n  ${f} {\n    opacity: 0;\n    height: 0;\n    transition: opacity ${k}s ease, height 0s ${k}s, transform ${k}s ease;\n    ${F ? `transform: translateY(${F}px);` : ""}\n  }\n  ${P} {\n    opacity: 1;\n    height: ${w};\n    transition: opacity ${k}s ease, height 0s 0s, transform ${k}s ease;\n    ${F ? "transform: translateY(0);" : ""}\n  }\n`,
            t = (f, P = .3, w = 10) => `\n  ${f} {\n    animation: listReveal ${P}s ease-out backwards;\n    animation-delay: ${.1 * w}s;\n  }\n\n  ${[...Array(w).keys()].map(k => `\n      ${f}:nth-of-type(${k}) {\n        animation-delay: ${.1 * k}s;\n      }\n    `).join("\n")}\n\n  @keyframes listReveal {\n    from {\n      transform: translateY(12px);\n      opacity: 0;\n    }\n    to {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n`,
            o = (f = "") => `\n  ${f}::-webkit-scrollbar {\n    width: 4px;\n  }\n\n  ${f}::-webkit-scrollbar-thumb {\n    width: 4px;\n    background: ${r.colors.gunmetal[500]};\n    border-radius: 2px;\n  }\n`,
            C = (f, P = f, w = f, k = P) => p.iv`
  top: ${f}px;
  right: ${P}px;
  bottom: ${w}px;
  left: ${k}px;
`
    }, 39029: (ee, R, n) => {
        "use strict";
        n.d(R, {x1: () => r.x, I0: () => g, v9: () => e, Rl: () => i}), n(25297);
        var r = n(58672), m = n(84876);
        const e = ({store: C, selector: f}) => {
            const [P, w] = (0, m.eJ)(f(C.getState()));
            return (0, m.d4)(() => C.subscribe(() => {
                const k = f(C.getState());
                w(k)
            }), [f]), P
        }, g = C => f => C.dispatch(f);
        n(5284);
        var i = n(65281);
        n(72985), n(69039)
    }, 72650: (ee, R, n) => {
        "use strict";
        n.d(R, {b: () => i});
        var p = n(70655), r = n(46461), e = n(56418);
        const g = {
            default: {
                ogg: "/assets/audio/buttons/hover--primary.ogg",
                mp3: "/assets/audio/buttons/hover--primary.mp3"
            }
        }, v = {
            primary: {
                ogg: "/assets/audio/buttons/click--primary.ogg",
                mp3: "/assets/audio/buttons/click--primary.mp3"
            },
            secondary: {
                ogg: "/assets/audio/buttons/click--secondary.ogg",
                mp3: "/assets/audio/buttons/click--secondary.mp3"
            }
        }, i = t => {
            class o extends t {
                constructor() {
                    super(...arguments), this.audibleHover = "", this.audibleClick = "", this.howl = r.Howl
                }

                updated(f) {
                    super.updated(f), this.updateHoverSound(), this.updateClickSound()
                }

                disconnectedCallback() {
                    super.disconnectedCallback(), this.disconnectHover(), this.disconnectClick()
                }

                handleHover(f) {
                    f.preventDefault(), this.hoverControl.play()
                }

                handleClick(f) {
                    f.preventDefault(), this.clickControl.play()
                }

                updateHoverSound() {
                    this.audibleHover && !this.hoverControl ? this.connectHover() : !this.audibleHover && this.hoverControl && this.disconnectHover()
                }

                updateClickSound() {
                    this.audibleClick ? this.connectClick() : !this.audibleClick && this.clickControl && this.disconnectClick()
                }

                connectHover() {
                    this.hoverControl = new this.howl({src: [g[this.audibleHover].ogg, g[this.audibleHover].mp3]}), this.addEventListener("mouseover", this.handleHover)
                }

                connectClick() {
                    this.clickControl && this.disconnectClick(), this.clickControl = new this.howl({src: [v[this.audibleClick].ogg, v[this.audibleClick].mp3]}), this.addEventListener("mousedown", this.handleClick), this.addEventListener("touchstart", this.handleClick)
                }

                disconnectHover() {
                    !this.hoverControl || (this.hoverControl.unload(), this.hoverControl = void 0, this.removeEventListener("mouseover", this.handleHover))
                }

                disconnectClick() {
                    !this.clickControl || (this.clickControl.unload(), this.clickControl = void 0, this.removeEventListener("mousedown", this.handleClick), this.removeEventListener("touchstart", this.handleClick))
                }
            }

            return (0, p.gn)([(0, e.C)({type: String}), (0, p.w6)("design:type", Object)], o.prototype, "audibleHover", void 0), (0, p.gn)([(0, e.C)({type: String}), (0, p.w6)("design:type", Object)], o.prototype, "audibleClick", void 0), o
        }
    }, 72985: (ee, R, n) => {
        "use strict";
        n.d(R, {Am: () => g, lH: () => i, Xg: () => r, s: () => p});
        const p = o => class extends o {
            update(C) {
                this.setAttribute("disabled", `${this.disabled}`), this.setAttribute("loading", `${this.loading}`), this.setAttribute("horizontalStretch", `${this.horizontalStretch}`), super.update(C)
            }
        }, r = o => class extends o {
            constructor() {
                super(...arguments), this.clickLinkListenerBound = !1
            }

            update(C) {
                this.href && !this.clickLinkListenerBound ? (this.addEventListener("click", this.clickLinkHandler), this.clickLinkListenerBound = !0) : !this.href && this.clickLinkListenerBound && (this.removeEventListener("click", this.clickLinkHandler), this.clickLinkListenerBound = !1), super.update(C)
            }

            disconnectedCallback() {
                this.removeEventListener("click", this.clickLinkHandler)
            }

            clickLinkHandler() {
                const {target: C, href: f} = this;
                C ? window.open(f, C) : window.location.href = f
            }
        };
        var m = n(46461);
        const e = {
            "GU-SPECIAL-HEX-BUTTON": {
                ogg: "/assets/audio/buttons/click--primary.ogg",
                mp3: "/assets/audio/buttons/click--primary.mp3"
            },
            "GU-SPECIAL-HEX-FLAT-BUTTON": {
                ogg: "/assets/audio/buttons/click--primary.ogg",
                mp3: "/assets/audio/buttons/click--primary.mp3"
            },
            "GU-PRIMARY-HEX-BUTTON": {
                ogg: "/assets/audio/buttons/click--primary.ogg",
                mp3: "/assets/audio/buttons/click--primary.mp3"
            },
            "GU-SECONDARY-HEX-BUTTON": {
                ogg: "/assets/audio/buttons/click--secondary.ogg",
                mp3: "/assets/audio/buttons/click--secondary.mp3"
            },
            "GU-SUBTLE-HEX-BUTTON": {
                ogg: "/assets/audio/buttons/click--secondary.ogg",
                mp3: "/assets/audio/buttons/click--secondary.mp3"
            }
        }, g = o => class extends o {
            constructor() {
                super(...arguments), this.clickSoundListenerBound = !1
            }

            updated(C) {
                super.updated(C), this.checkToEnableClickSound()
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.destroyClickSound(), this.destroyClickEvents()
            }

            clickSoundHandler(C) {
                C.preventDefault(), this.clickSoundControl.play()
            }

            checkToEnableClickSound() {
                this.enableSounds && !this.clickSoundListenerBound ? (this.initClickEvents(), this.initClickSound()) : !this.enableSounds && this.clickSoundListenerBound && (this.destroyClickSound(), this.destroyClickEvents())
            }

            initClickSound() {
                this.clickSoundControl = new m.Howl({src: [e[this.nodeName].ogg, e[this.nodeName].mp3]})
            }

            initClickEvents() {
                this.addEventListener("mousedown", this.clickSoundHandler), this.addEventListener("touchstart", this.clickSoundHandler), this.clickSoundListenerBound = !0
            }

            destroyClickSound() {
                this.clickSoundControl && this.clickSoundControl.unload()
            }

            destroyClickEvents() {
                this.removeEventListener("mousedown", this.clickSoundHandler), this.removeEventListener("touchstart", this.clickSoundHandler), this.clickSoundListenerBound = !1
            }
        }, i = o => class extends o {
            constructor() {
                super(...arguments), this.hoverSoundListenerBound = !1
            }

            updated(C) {
                super.updated(C), this.checkToEnableHoverSound()
            }

            disconnectedCallback() {
                super.disconnectedCallback(), this.destroyHoverSound(), this.removeEventListener("mouseover", this.hoverSoundHandler)
            }

            hoverSoundHandler(C) {
                C.preventDefault(), this.hoverSoundControl.play()
            }

            checkToEnableHoverSound() {
                this.enableSounds && !this.hoverSoundListenerBound ? (this.addEventListener("mouseover", this.hoverSoundHandler), this.hoverSoundListenerBound = !0, this.initHoverSound()) : !this.enableSounds && this.hoverSoundListenerBound && (this.removeEventListener("mouseover", this.hoverSoundHandler), this.hoverSoundListenerBound = !1, this.destroyHoverSound())
            }

            initHoverSound() {
                this.hoverSoundControl = new m.Howl({src: ["/assets/audio/buttons/hover--primary.ogg", "/assets/audio/buttons/hover--primary.mp3"]})
            }

            destroyHoverSound() {
                this.hoverSoundControl && this.hoverSoundControl.unload()
            }
        };
        n(72650)
    }, 93270: (ee, R, n) => {
        "use strict";
        n.d(R, {Z: () => m});
        var p = n(70655), r = n(56418);
        const m = e => {
            class g extends e {
                constructor() {
                    super(...arguments), this.href = "", this.target = "", this.bound = !1, this.window = window
                }

                updated(i) {
                    super.updated(i), this.href && !this.bound ? (this.addEventListener("click", this.handleClick), this.bound = !0) : !this.href && this.bound && this.removeListener()
                }

                disconnectedCallback() {
                    super.disconnectedCallback(), this.removeListener()
                }

                removeListener() {
                    this.bound && this.removeEventListener("click", this.handleClick)
                }

                handleClick() {
                    const {target: i, href: t} = this;
                    i ? this.window.open(t, i) : this.window.location.href = t
                }
            }

            return (0, p.gn)([(0, r.C)({type: String}), (0, p.w6)("design:type", Object)], g.prototype, "href", void 0), (0, p.gn)([(0, r.C)({type: String}), (0, p.w6)("design:type", Object)], g.prototype, "target", void 0), g
        }
    }, 47925: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {breakpointSizeMapping: () => p});
        const p = {
            "2x-small": "360px",
            "x-small": "512px",
            small: "768px",
            medium: "960px",
            large: "1200px",
            "x-large": "1400px",
            "2x-large": "1600px"
        }
    }, 91418: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            gunmetal: () => p,
            light: () => r,
            white: () => m,
            black: () => e,
            dark: () => g,
            apocyan: () => v,
            yellow: () => i,
            gold: () => t,
            aqua: () => o,
            card: () => C,
            alert: () => f,
            quality: () => P,
            rarity: () => w,
            god: () => k,
            fillColoringRules: () => F
        });
        const p = {100: "#7192B0", 300: "#527493", 500: "#3D5A74", 700: "#1D2F41", 900: "#0F1B27"},
            r = {100: "#F6F6F6", 300: "#D7D7D7", 500: "#B6B6B6", 700: "#979797", 900: "#7F7F7F"}, m = "#ffffff",
            e = "#000000", g = {100: "#7F7F7F", 300: "#646464", 500: "#464646", 700: "#272727", 900: "#0A0A0A"},
            v = {100: "#AFFAED", 300: "#8BE1E0", 500: "#54BBCD"}, i = {100: "#FCF7D4", 300: "#F7EA9B", 500: "#F2DC63"},
            t = {100: "#FFF2D8", 300: "#EBC98B", 500: "#C6A052"}, o = {200: "#affaed", 300: "#8be1e0", 500: "#54bbcd"},
            C = {creature: "#ebd08a", spell: "#76b5ad", weapon: "#7a608c"}, f = "#FF8B01", P = {
                plain: "#8295A2",
                bronze: "#6A8B35",
                iron: "#3D91B9",
                meteorite: "#84343E",
                shadow: "#B461C5",
                gold: "#E5D93C",
                diamond: "#94E6FB",
                mythic: "#ffffff"
            }, w = {common: "#6D6C6D", rare: "#3C8ED2", epic: "#6D1FC4", legendary: "#D8A638", mythic: "#D02C3A"}, k = {
                deception: {primary: "#FA77FC", secondary: "#CA3FD8", tertiary: "#8F189B"},
                war: {primary: "#FF8B01", secondary: "#D73333", tertiary: "#99011A"},
                death: {primary: "#9C4EF9", secondary: "#35145B", tertiary: "#35145B"},
                magic: {primary: "#50BCFF", secondary: "#3884DE", tertiary: "#1752BA"},
                nature: {primary: "#9DE764", secondary: "#5AC33F", tertiary: "#4C772F"},
                light: {primary: "#FBE29F", secondary: "#FFD76E", tertiary: "#FAB248"}
            },
            F = "\n  /* Styles to use when there is a gradientFill set ... */\n  :host([fillGradient]),\n  :host([fillGradient]) ::slotted(*) {\n    background: var(--gu-yellow);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  /* Styles to use when there is a simple fill color set ... */\n  :host([fillColor]),\n  :host([fillColor]) ::slotted(*) {\n    color: var(--textFillColor);\n\n    /* Use the text coloring for border color, and allow it to be over-written */\n    border-color: var(--textFillColor);\n  }\n\n  /* Styles to use when there is a simple fill color hover set ... */\n  :host([fillColorHover]:hover),\n  :host([fillColorHover]:hover) ::slotted(*) {\n    color: var(--textFillColorHover);\n\n    /* Use the text coloring for border color, and allow it to be over-written */\n    border-color: var(--textFillColorHover);\n  }\n\n  /* Styles to use when there is a simple border color set ... */\n  :host([borderColor]),\n  :host([borderColor]) ::slotted(*) {\n    border-color: var(--borderColor);\n  }\n\n  /* Styles to use when there is a simple border color hover set ... */\n  :host([borderColorHover]:hover),\n  :host([borderColorHover]:hover) ::slotted(*) {\n    border-color: var(--borderColorHover);\n  }\n\n  /* Styles to use when there is a simple background color fill set ... */\n  :host([backgroundFillColor]),\n  :host([backgroundFillColor]) ::slotted(*) {\n    background-color: var(--backgroundFillColor);\n  }\n\n  /* Styles to use when there is a simple background color fill hover set ... */\n  :host([backgroundFillColorHover]:hover),\n  :host([backgroundFillColorHover]:hover) ::slotted(*) {\n    background-color: var(--backgroundFillColorHover);\n  }\n"
    }, 65281: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            animation: () => p,
            breakpoints: () => t,
            colors: () => o,
            gradients: () => r,
            measurements: () => y,
            typography: () => O,
            uifx: () => E
        });
        var p = {};
        n.r(p), n.d(p, {
            slowTransition: () => i,
            slowTransitionDuration: () => g,
            standardTransition: () => v,
            standardTransitionDuration: () => m,
            standardTransitionEasing: () => e
        });
        var r = {};
        n.r(r), n.d(r, {
            apocyan: () => w,
            dark: () => k,
            god: () => _,
            gold: () => C,
            gunmetal: () => f,
            light: () => F,
            textFill: () => T,
            yellow: () => P
        });
        const m = "150ms", e = "ease-in-out", g = "300ms", v = u => `\n  transition: ${u} ${m}\n  ${e};\n`,
            i = u => `\n  transition: ${u} ${g}\n  ${e};\n`;
        var t = n(47925), o = n(91418);
        const C = {
                simple: (u = "bottom") => `\n  linear-gradient(\n    to ${u},\n    ${o.gold[100]} 0%,\n    ${o.gold[500]} 100%\n  );\n`,
                mirror: (u = "bottom") => `\n  linear-gradient(\n    to ${u},\n    ${o.gold[500]} 0%,\n    ${o.gold[100]} 50%,\n    ${o.gold[500]} 100%\n  );\n`,
                complex: (u = "top") => `\n  linear-gradient(\n    to ${u},\n    #FFFDF0 0%,\n    #FBEBC1 14%,\n    #E6C675 25%,\n    #F6DF6E 40%,\n    #B27E18 60%,\n    #DEAB61 73%,\n    #A67B4B 85%,\n    #664320 100%\n  );\n`,
                horizontal: (u = "right") => `\n  linear-gradient(\n    to ${u},\n    ${o.gold[500]} 3%,\n    ${o.gold[300]} 25%,\n    ${o.gold[100]} 50%,\n    ${o.gold[300]} 75%,\n    ${o.gold[500]} 97%\n  );\n`
            }, f = {
                simple: (u = "bottom") => `\n  linear-gradient(\n    to ${u},\n    ${o.gunmetal[900]} 0%,\n    ${o.gunmetal[700]} 100%\n  );`,
                mirror: (u = "bottom") => `\n  linear-gradient(\n    to ${u},\n    ${o.gunmetal[900]} 0%,\n    ${o.gunmetal[700]} 50%,\n    ${o.gunmetal[900]} 100%\n  );\n`
            },
            P = {simple: (u = "top") => `\n  linear-gradient(\n    to ${u},\n    ${o.yellow[100]} 0%,\n    ${o.yellow[300]} 50%,\n    ${o.yellow[500]} 100%\n  );\n`},
            w = {
                simple: (u = "top") => `linear-gradient(\n    to ${u},\n    ${o.apocyan[100]} 0%,\n    ${o.apocyan[500]} 100%\n  );`,
                mirror: (u = "top") => `linear-gradient(\n    to ${u},\n    ${o.apocyan[500]} 0%,\n    ${o.apocyan[100]} 50%,\n    ${o.apocyan[500]} 100%\n  );`
            },
            k = {simple: (u = "top") => `linear-gradient(\n    to ${u},\n    ${o.dark[500]} 100%,\n    ${o.dark[900]} 100%\n  );`},
            F = {simple: (u = "top") => `linear-gradient(\n    to ${u},\n    ${o.light[100]} 100%,\n    ${o.light[300]} 100%\n  );`},
            _ = {
                deception: (u = "top") => `linear-gradient(\n      to ${u},\n      ${o.god.deception.primary} 0%,\n      ${o.god.deception.secondary} 50%,\n      ${o.god.deception.tertiary} 100%\n    )`,
                war: (u = "top") => `linear-gradient(\n      to ${u},\n      ${o.god.war.primary} 0%,\n      ${o.god.war.secondary} 50%,\n      ${o.god.war.tertiary} 100%\n    )`,
                death: (u = "top") => `linear-gradient(\n      to ${u},\n      ${o.god.death.primary} 0%,\n      ${o.god.death.secondary} 50%,\n      ${o.god.death.tertiary} 100%\n    )`,
                magic: (u = "top") => `\n    linear-gradient(\n      to ${u},\n      ${o.god.magic.primary} 0%,\n      ${o.god.magic.secondary} 50%,\n      ${o.god.magic.tertiary} 100%\n    )`,
                nature: (u = "top") => `\n    linear-gradient(\n      to ${u},\n      ${o.god.nature.primary} 0%,\n      ${o.god.nature.secondary} 50%,\n      ${o.god.nature.tertiary} 100%\n    )`,
                light: (u = "top") => `\n    linear-gradient(\n      to ${u},\n      ${o.god.light.primary} 0%,\n      ${o.god.light.secondary} 50%,\n      ${o.god.light.tertiary} 100%\n    )`
            },
            T = u => `background: ${u};\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;`;
        var y = n(49219), O = n(66974), E = n(61462)
    }, 49219: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            spacingAmountMapping: () => r,
            standardTransitionDuration: () => m,
            standardTransitionEasing: () => e,
            standardBorderSize: () => g,
            draggableTitleBarHeight: () => v,
            standardHeaderHeight: () => i,
            standardHeaderHeightInCss: () => t,
            standardHeaderAlertBarHeight: () => o,
            headerBarZLevel: () => C,
            electronMenuBarZLevel: () => f,
            modalLayerZLevel: () => P,
            electronTitleBarHeight: () => w,
            imageQualities: () => k
        });
        var p = n(80102);
        const r = {
                "2x-small": "2px",
                "x-small": "4px",
                small: "8px",
                medium: "12px",
                large: "16px",
                "x-large": "24px",
                "2x-large": "32px",
                "3x-large": "40px",
                "4x-large": "56px",
                "5x-large": "72px",
                "6x-large": "96px",
                "7x-large": "128px",
                "8x-large": "192px",
                "9x-large": "320px"
            }, m = "150ms", e = "ease-in-out", g = "1px", v = (0, p.gridUnits)(7), i = 80, t = "80px", o = 50, C = 22,
            f = 23, P = 22, w = (0, p.gridUnits)(7), k = {small: 128, normal: 256, high: 512, xHigh: 720, best: 1024}
    }, 66974: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {
            iconTextStyles: () => p,
            headingFont: () => r,
            simpleFont: () => m,
            textAlignRules: () => e,
            headingSizeMapping: () => g,
            simpleTextSizeMapping: () => v,
            baseSimpleTextStyles: () => i
        });
        const p = "\n  font-family: 'gu-cons';\n  font-feature-settings: 'liga' 1;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  vertical-align: middle;\n  letter-spacing: 0;\n  line-height: 1;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n",
            r = "\n  font-family: 'Unchained', serif;\n", m = "\n  font-family: 'Open Sans', sans-serif;\n",
            e = "\n  :host([align='center']),\n  :host([align='center']) ::slotted(*) {\n    text-align: center;\n  }\n\n  :host([align='left']),\n  :host([align='left']) ::slotted(*) {\n    text-align: left;\n  }\n\n  :host([align='right']),\n  :host([align='right']) ::slotted(*) {\n    text-align: right;\n  }\n",
            g = {
                "3x-small": "14px",
                "2x-small": "18px",
                "x-small": "24px",
                small: "32px",
                large: "40px",
                "x-large": "48px",
                "2x-large": "72px"
            }, v = {large: "20px", small: "16px", help: "14px", tag: "12px", micro: "10px"},
            i = `\n  ${m}\n  line-height: 1.1;\n`
    }, 61462: (ee, R, n) => {
        "use strict";
        n.r(R), n.d(R, {userSelect: () => p});
        const p = r => `\n    -webkit-user-select: ${r};\n    user-select: ${r};\n    pointer-events: ${r};\n  `
    }, 58672: (ee, R, n) => {
        "use strict";
        n.d(R, {x: () => r});
        var p = n(25297);

        function r({renderer: m, baseClass: e = p.J, props: g = {}}) {
            const v = class extends e {
                render() {
                    return m.call(this, this)
                }
            };
            return Object.entries(g).forEach(([i, t]) => v[i] = t), v
        }
    }, 51256: (ee, R, n) => {
        "use strict";
        var p = n(70655), r = n(32830), m = n(56418), e = n(5284), g = n(65171), v = n(26532), i = n(65281),
            t = n(47925), o = n(91418);

        class C extends r.oi {
            constructor() {
                super(...arguments), this.size = "small", this.align = "center", this.responsiveSize = []
            }

            static get styles() {
                return r.iv`
      :host {
        display: block;
        ${(0, v.asCssProp)(e.uA.enhancedTextRenderingStyles)};
      }

      :host,
      ::slotted(*) {
        ${(0, v.asCssProp)(i.typography.headingFont)};
        color: ${(0, v.asCssProp)(i.colors.light[100])};
        line-height: 1.2;
        font-weight: 700;
        text-transform: uppercase;
        margin: 0;
      }

      ${(0, v.asCssProp)(i.typography.textAlignRules)}

      :host([size='2x-large']),
      :host([size='2x-large']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping["2x-large"])} !important;
      }

      :host([size='x-large']),
      :host([size='x-large']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping["x-large"])} !important;
      }

      :host([size='large']),
      :host([size='large']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping.large)} !important;
      }

      /* 'Small' size is the default size... */
      :host,
      :host ::slotted(*),
      :host([size='small']),
      :host([size='small']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping.small)} !important;
      }

      :host([size='x-small']),
      :host([size='x-small']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping["x-small"])} !important;
      }

      :host([size='2x-small']),
      :host([size='2x-small']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping["2x-small"])} !important;
      }

      :host([size='3x-small']),
      :host([size='3x-small']) ::slotted(*) {
        font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping["3x-small"])} !important;
      }

      ${(0, v.asCssProp)(o.fillColoringRules)}
    `
            }

            generateMediaQueries() {
                return this.responsiveSize.length ? r.dy`
          <style>
            /* DEFINE RESPONSIVE SIZING */
            ${this.responsiveSize.map(({breakpoint: P, size: w}) => r.iv`
                @media screen and (min-width: ${(0, v.asCssProp)(t.breakpointSizeMapping[P])}) {
                  :host(.overWrite[size='${(0, v.asCssProp)(this.size)}']),
                  :host(.overWrite[size='${(0, v.asCssProp)(this.size)}']) ::slotted(*) {
                    font-size: ${(0, v.asCssProp)(i.typography.headingSizeMapping[w])} !important;
                  }
                }
              `)}
          </style>
        ` : null
            }

            render() {
                const {fillColor: P, fillGradient: w, fillGradientTarget: k} = this;
                return (0, g.updateColoringVariables)({
                    component: this,
                    fillColor: P,
                    fillGradient: w,
                    fillGradientTarget: k
                }), this.setAttribute("size", this.size), this.responsiveSize.length ? this.classList.add("overWrite") : this.classList.remove("overWrite"), r.dy`
      ${this.generateMediaQueries()}
      <slot></slot>
    `
            }
        }

        (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], C.prototype, "size", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], C.prototype, "align", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], C.prototype, "fillColor", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], C.prototype, "fillGradient", void 0), (0, p.gn)([(0, m.C)({type: String}), (0, p.w6)("design:type", String)], C.prototype, "fillGradientTarget", void 0), (0, p.gn)([(0, m.C)({type: Array}), (0, p.w6)("design:type", Array)], C.prototype, "responsiveSize", void 0), customElements.define("gu-heading-text", C)
    }, 11015: (ee, R, n) => {
        "use strict";
        var p = n(32830), r = n(52102);
        customElements.define("gu-paragraph-text", class extends r._ {
            static get styles() {
                return p.iv`
      ${super.styles}

      :host {
        display: block;
      }

      :host,
      :host ::slotted(*) {
        line-height: 1.375;
      }

      :host([kind='large']) ::slotted(*) {
        line-height: 1.4;
      }

      :host([kind='small']) ::slotted(*) {
        line-height: 1.5;
      }

      :host([kind='help']) ::slotted(*) {
        line-height: 1.43;
      }

      :host([kind='tag']) ::slotted(*) {
        line-height: 1.67;
      }
    `
            }
        })
    }, 52102: (ee, R, n) => {
        "use strict";
        n.d(R, {_: () => P});
        var p = n(70655), r = n(32830), m = n(56418), e = n(5284), g = n(65281), v = n(26532), i = n(91418),
            t = n(66974), o = n(61462);
        const C = `\n  font-size: ${(0, v.asCssProp)(g.typography.simpleTextSizeMapping.tag)};\n  font-weight: 700;\n  text-transform: uppercase;\n`;

        class P extends r.oi {
            constructor() {
                super(...arguments), this.align = "center", this.fontStyle = "regular", this.responsiveKind = []
            }

            static get styles() {
                return r.iv`
  ${(0, v.asCssProp)((0, v.setBoxSizing)())}

  :host,
    :host ::slotted(*) {
    ${(0, v.asCssProp)(e.uA.enhancedTextRenderingStyles)};
    ${(0, v.asCssProp)(t.baseSimpleTextStyles)};
    font-size: ${(0, v.asCssProp)(g.typography.simpleTextSizeMapping.small)};

    ${(0, v.asCssProp)((0, o.userSelect)("inherit"))};
  }

  :host([kind='large']),
  :host([kind='large']) ::slotted(*) {
    font-size: ${(0, v.asCssProp)(g.typography.simpleTextSizeMapping.large)};
  }

  :host([kind='small']),
  :host([kind='small']) ::slotted(*) {
    font-size: ${(0, v.asCssProp)(g.typography.simpleTextSizeMapping.small)};
  }

  :host([kind='micro']),
  :host([kind='micro']) ::slotted(*) {
    font-size: ${(0, v.asCssProp)(g.typography.simpleTextSizeMapping.micro)};
  }

  :host([kind='help']),
  :host([kind='help']) ::slotted(*) {
    font-style: italic;
    font-size: ${(0, v.asCssProp)(g.typography.simpleTextSizeMapping.help)};
  }

  :host([kind='tag']),
  :host([kind='tag']) ::slotted(*) {
    ${(0, v.asCssProp)(C)};
  }

  :host([fontStyle='italic']),
  :host([fontStyle='italic']) ::slotted(*) {
    font-style: italic;
  }

  :host([fontWeight='bold']),
  :host([fontWeight='bold']) ::slotted(*) {
    font-weight: 700;
  }

  ${(0, v.asCssProp)(g.typography.textAlignRules)}
  ${(0, v.asCssProp)(i.fillColoringRules)}
`
            }

            generateMediaQueries() {
                const {breakpointSizeMapping: k} = g.breakpoints, {asCssProp: F} = e.ZB, {simpleTextSizeMapping: _} = g.typography;
                return this.responsiveKind.length ? r.dy`
          <style>
            /* DEFINE RESPONSIVE SIZING */
            ${this.responsiveKind.map(({breakpoint: T, kind: y = "small"}) => r.iv`
                @media screen and (min-width: ${F(k[T])}) {
                  :host(.overWrite[kind='${F(this.kind)}']),
                  :host(.overWrite[kind='${F(this.kind)}']) ::slotted(*) {
                    font-size: ${F(_[y])} !important;
                    ${F("tag" !== y ? "bold" === this.fontWeight ? "font-weight: 700" : "font-weight: 400" : "")};
                    ${F("tag" === y ? C : "")};
                    ${F("help" === y ? "font-style: italic" : "")};
                  }
                }
              `)}
          </style>
        ` : null
            }

            render() {
                const {updateColoringVariables: k} = e.gt, {
                    fillColor: F,
                    fillGradient: _,
                    fillGradientTarget: T,
                    borderColor: y,
                    fillColorHover: O
                } = this;
                return k({
                    component: this,
                    fillColor: F,
                    fillColorHover: O,
                    fillGradient: _,
                    fillGradientTarget: T,
                    borderColor: y
                }), this.setAttribute("kind", this.kind), this.responsiveKind.length ? this.classList.add("overWrite") : this.classList.remove("overWrite"), r.dy`
      ${this.generateMediaQueries()} ${this.text ? this.text : ""}
      <slot></slot>
    `
            }
        }

        (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "kind", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "align", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "fontStyle", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "fontWeight", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "text", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "fillColor", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "fillColorHover", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "borderColor", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "fillGradient", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", String)], P.prototype, "fillGradientTarget", void 0), (0, p.gn)([(0, m.C)(), (0, p.w6)("design:type", Array)], P.prototype, "responsiveKind", void 0), customElements.define("gu-simple-text", P)
    }, 56302: (ee, R, n) => {
        "use strict";
        n.d(R, {X8: () => p, IU: () => g, Qo: () => t});
        var p = (() => {
            return (o = p || (p = {})).FETCH_USER_WALLET = "[Account] Fetch User Wallet", o.FETCH_USER_WALLET_SUCCESS = "[Account] Fetch User Wallet Success", o.FETCH_USER_WALLET_ERROR = "[Account] Fetch User Wallet Error", o.UPDATE_USER_ETH_BALANCE = "[Account] Update User Eth Balance", o.FETCH_USER_ACCOUNT = "[Account] Fetch User Account", o.FETCH_USER_ACCOUNT_SUCCESS = "[Account] Fetch User Account Success", o.FETCH_USER_ACCOUNT_ERROR = "[Account] Fetch User Account Error", p;
            var o
        })();

        class g {
            constructor() {
                this.type = p.FETCH_USER_WALLET
            }
        }

        class t {
            constructor(C) {
                this.payload = C, this.type = p.UPDATE_USER_ETH_BALANCE
            }
        }
    }, 43991: (ee, R, n) => {
        "use strict";
        n.d(R, {z: () => w});
        var p = n(40520), r = n(73307), m = n(61377), e = n(52909), g = n(591), v = n(30567), i = n(72986),
            t = n(24850), o = (() => {
                return (k = o || (o = {})).CARD = "card", k.DECK = "deck", k.PACKAGE = "package", k.TOME = "tome", k.CARD_BACK = "cardback", k.BOARD = "board", k.TRINKET = "trinket", k.EMOTE = "emote", k.ICON = "icon", o;
                var k
            })(), P = n(5e3);
        let w = (() => {
            class k {
                constructor(_, T, y, O) {
                    this.authService = _, this.marketplaceApiService = T, this.authHostService = y, this.guApiService = O, this.dataStore = {
                        usersSoldCards: [],
                        userHasNewSoldCards: !1
                    }, this._usersSoldCards = new g.X([]), this._userHasNewSoldCards = new g.X(!1), console.log("@Cerberus/AssetsService constructor")
                }

                get usersSoldCards$() {
                    return this._usersSoldCards.asObservable()
                }

                get userHasNewSoldCards$() {
                    return this._userHasNewSoldCards.asObservable()
                }

                getBoardsAndTrinkets() {
                    const _ = this.authService.getUserId();
                    return this.marketplaceApiService.get(`/user/${_}/asset?type=board&type=trinket`)
                }

                getAssetFilters(_) {
                    return this.marketplaceApiService.get("/property", {params: this.appendFilterParams(_)})
                }

                getAssetGroups(_, T) {
                    return this.marketplaceApiService.get("/assetgroup", {params: this.appendSearchParams(_, T)})
                }

                appendSearchParams(_, T) {
                    let y = new p.LE;
                    if (T.sortBy && (y = y.append("sort", T.sortBy)), T.orderBy && (y = y.append("order", T.orderBy)), T.groupBy) {
                        switch (y = y.append("group", T.groupBy), T.assetType) {
                            case o.CARD:
                                y = y.append("group", "quality_name"), y = y.append("group", "quality");
                                break;
                            case o.BOARD:
                                y = y.append("group", "level");
                                break;
                            case o.TRINKET:
                                y = y.append("group", "heads");
                                break;
                            default:
                                y = y.append("group", "quality_name"), y = y.append("group", "quality")
                        }
                        y = y.append("group", "proto")
                    }
                    return T.splitBy && (y = y.append("split", T.splitBy)), T.currentPage && (y = y.append("page", T.currentPage.toString())), T.perPage && (y = y.append("perPage", T.perPage.toString())), T.assetType && (y = y.append("asset_type", T.assetType)), _.owner && (y = y.append("owner", _.owner)), _.token_id && (y = y.append("token_id", _.token_id)), _.contract && (y = y.append("contract", _.contract)), _.properties && _.properties.length > 0 && (y = y.append("properties", this.stringifyMetaDataFilters(_.properties))), _.class_properties && _.class_properties.length > 0 && (y = y.append("class_properties", this.stringifyMetaDataFilters(_.class_properties))), y
                }

                appendFilterParams(_) {
                    let T = new p.LE;
                    return _.owner && (T = T.append("owner", _.owner)), _.asset_type && (T = T.append("asset_type", _.asset_type)), _.token_id && (T = T.append("token_id", _.token_id)), _.contract && (T = T.append("contract", _.contract)), _.properties && _.properties.length > 0 && (console.log("properties", this.stringifyMetaDataFilters(_.properties)), T = T.append("properties", this.stringifyMetaDataFilters(_.properties))), _.class_properties && _.class_properties.length > 0 && (T = T.append("class_properties", this.stringifyMetaDataFilters(_.class_properties))), T
                }

                stringifyMetaDataFilters(_) {
                    const T = JSON.stringify(_);
                    return encodeURI(T)
                }

                getSoldAssets({userId: _ = this.authService.getUserId(), showNotifications: T = !0} = {}) {
                    console.log("@Cerberus/AssetsService.getSoldAssets({ userId, showNotifications })", _, T), this.marketplaceApiService.get(`/user/${_}/sold`).pipe((0, i.q)(1)).subscribe(y => {
                        T && this.checkForNewCards(y) && (this.dataStore.userHasNewSoldCards = !0, this._userHasNewSoldCards.next(this.dataStore.userHasNewSoldCards)), this.dataStore.usersSoldCards = y, this._usersSoldCards.next([...this.dataStore.usersSoldCards])
                    })
                }

                checkForNewCards(_) {
                    return !(!_[0] || this.dataStore.usersSoldCards[0] && this.cardsAreTheSame(_[0], this.dataStore.usersSoldCards[0]))
                }

                cardsAreTheSame(_, T) {
                    return _.address === T.address && _.token_id === T.token_id
                }

                getProtoDetails(_) {
                    return this.guApiService.get(`/proto/${_}`)
                }

                clearNewSoldCards() {
                    this.dataStore.userHasNewSoldCards = !1, this._userHasNewSoldCards.next(this.dataStore.userHasNewSoldCards)
                }

                getSellingAssets$(_ = 1, T = 31, y = this.authService.getUserId()) {
                    return this.marketplaceApiService.get(`/user/${y}/selling?page=${_}&perPage=${T}`)
                }

                getUsernamesFromAddresses(_) {
                    const T = [];
                    for (let y = 0; y < _.length; y++) T.push(this.getUsernameFromAddress(_[y].owner).pipe((0, t.U)(O => O)));
                    return (0, v.D)(T)
                }

                getUsernameFromAddress(_) {
                    return this.authHostService.get(`/account/${_}/username`)
                }

                mapPriceHistory(_) {
                    return _ ? _.map(T => {
                        const O = new Date(0).setUTCSeconds(T.block_timestamp), E = e.O$.from(10).pow(18);
                        return {price: e.O$.from(T.taker_asset_amount).div(E).toNumber(), timestamp: O}
                    }) : []
                }

                getAssetGroupPriceHistory(_, T, y, O) {
                    console.log(T, y);
                    let E = {};
                    switch (O) {
                        case o.CARD:
                            E = JSON.stringify({proto: parseInt(T, 10), quality: parseInt(y, 10)});
                            break;
                        case o.TRINKET:
                            E = void 0 !== y && "undefined" !== y ? JSON.stringify({heads: parseInt(y, 10)}) : JSON.stringify({});
                            break;
                        case o.BOARD:
                            E = JSON.stringify({level: parseInt(y, 10)});
                            break;
                        default:
                            E = JSON.stringify({})
                    }
                    return this.marketplaceApiService.get(`/asset/${_}/price`, {
                        params: {
                            type: O,
                            asset_group: E
                        }
                    }).pipe((0, t.U)(u => this.mapPriceHistory(u)))
                }

                getAssetPriceHistory(_, T) {
                    return this.marketplaceApiService.get(`/asset/${_}/${T}/price`).pipe((0, t.U)(y => this.mapPriceHistory(y)))
                }

                getOwnedAssets$(_ = 1, T = 31, y = this.authService.getUserId()) {
                    return this.marketplaceApiService.get(`/user/${y}/asset/ethereumgroup?page=${_}&perPage=${T}`)
                }

                getOwnedAssets(_, T, y = this.authService.getUserId()) {
                    return this.marketplaceApiService.get(`/user/${y}/asset/ethereumgroup`, {params: this.appendSearchParams(_, T)})
                }

                getOwnedAssetFilters(_, T = this.authService.getUserId()) {
                    return this.marketplaceApiService.get(`/user/${T}/asset/ethereum/property`, {params: this.appendFilterParams(_)})
                }
            }

            return k.\u0275fac = function (_) {
                return new (_ || k)(P.LFG(r.mI), P.LFG(m._q), P.LFG(r.LI), P.LFG(m.Ho))
            }, k.\u0275prov = P.Yz7({token: k, factory: k.\u0275fac}), k
        })()
    }, 40886: (ee, R, n) => {
        "use strict";
        n.d(R, {Y: () => p, t: () => r});
        const p = 3, r = 1
    }, 72224: (ee, R, n) => {
        "use strict";
        n.d(R, {v: () => p});
        const p = 2147483647
    }, 69181: (ee, R, n) => {
        "use strict";
        n.d(R, {$: () => p});
        const p = [{name: "twitter", link: "https://twitter.com/GodsUnchained"}, {
            name: "reddit",
            link: "https://www.reddit.com/r/GodsUnchained/"
        }, {name: "facebook", link: "https://www.facebook.com/godsunchained/"}, {
            name: "instagram",
            link: "https://www.instagram.com/godsunchained/?hl=en"
        }, {name: "discord", link: "https://discordapp.com/invite/godsunchained"}, {
            name: "youtube",
            link: "https://www.youtube.com/channel/UCGQ1oWpKFfjsLYiTYALAlSA"
        }, {name: "twitch", link: "https://www.twitch.tv/godsunchained/videos"}]
    }, 94057: (ee, R, n) => {
        "use strict";
        n.d(R, {gv: () => m, zy: () => p, CF: () => r});
        var p = {};
        n.r(p), n.d(p, {Y: () => e});
        var r = {};
        n.r(r), n.d(r, {J: () => Ce, Y: () => qe});
        var m = {};
        n.r(m), n.d(m, {routeContent: () => Ye, userMenuItemsContent: () => ct});
        const e = [{
            name: "lysander",
            title: "Lysander: Champion of Light",
            description: "Lysander of Parthon was a respected Olympian military leader, a father, and a man of faith. All that changed the day he was confronted by an overwhelming enemy force led by a daemonic entity.",
            byline: "Wield the might of Lysander's cards by collecting Trial of the Gods packs.",
            link: "https://blog.godsunchained.com/2020/01/29/chapter-2-lysanders-origin-broken/",
            protoId: 824
        }, {
            name: "neferu",
            title: "Neferu: Champion of Death",
            description: "Neferu served with distinction in the Anubian army, fighting to reclaim ancestral land from the hated Olympians. She thought she was the embodiment of death herself, until she met her fate on the Mukhnod fields.",
            byline: "Unearth the fury of Neferu's cards by collecting Trial of the Gods packs.",
            link: "https://blog.godsunchained.com/2020/02/04/chapter-3-neferus-origin-blessed-rest/",
            protoId: 828
        }, {
            name: "pallas",
            title: "Pallas: Champion of Magic",
            description: "Growing up in a commune of mages, Pallas always seemed to defy categorization: style of magic, philosophy, even gender. This made Evaluation at the Academy of Mystical Arts more complicated than even they expected.",
            byline: "Channel the power of Pallas' cards by collecting Trial of the Gods packs.",
            link: "https://blog.godsunchained.com/2020/02/13/chapter-4-pallas-origin-all-is-magic/",
            protoId: 825
        }, {
            name: "orfeo",
            title: "Orfeo: Champion of Deception",
            description: "Orphaned at a young age, Orfeo quickly learned that one face wasn't enough to survive on the streets of Ronella. But managing multiple lives was never going to be easy, especially when it\u2019s uncertain who is really pulling the strings.",
            byline: "Unveil the skill behind Orfeo's cards by collecting Trial of the Gods packs.",
            link: "https://blog.godsunchained.com/2020/03/05/chapter-5-orfeos-origin-masks/",
            protoId: 829
        }, {
            name: "selena",
            title: "Selena: Champion of Nature",
            description: "As a child, many of the Amazons of Agrodor saw Selena a frail young boy... but she knew better. She was a warrior at heart and \u2013 even though she was less athletic than her peers \u2013 she was determined to prove her skills.",
            byline: "Discover the strength of Selena's cards by collecting Trial of the Gods packs.",
            link: "https://blog.godsunchained.com/2020/03/19/chapter-6-selenas-origin-truth-is-told-by-moonlight/",
            protoId: 826
        }, {
            name: "valka",
            title: "Valka: Champion of War",
            description: "Battle-hardened and proud, Valka endured devastating adversity before she was selected by Auros to become the Champion of War.",
            byline: "Unleash the wrath of Valka's cards by collecting Trial of the Gods packs.",
            link: "https://blog.godsunchained.com/2020/04/02/chapter-7-valkas-origin-a-traitors-blood/",
            protoId: 827
        }];
        n(69181), n(94417), n(40520), n(591), n(8929), n(36053), n(21086), n(61737), n(24850), n(2994), n(72986), n(61709), n(27221), n(61377);
        var O = n(73175);
        n(73307), n(5e3), new O.N0, n(40886), n(52909), n(67806), n(26959), n(74323), n(47760), n(18499), n(45425), n(5254), n(68896), n(56498), n(92198), n(56302), n(96727), n(11735), n(43991);
        var Le = n(1025);
        const Ce = {
            home: {
                shortName: "home",
                path: "",
                icon: "nav_arena",
                pageTitle: "Gods Unchained",
                keywords: "Gods Unchained,Godsunchained,TCG,Trading Card Game,CCG,card game,lore,strategy game,blockchain game,crypto game, free to play, play to earn",
                description: "The ultimate digital trading card game that gives players true ownership of their collection. Play for free, play for keeps, or trade on open marketplaces. Download now. "
            },
            expansions: {
                shortName: "expansions",
                path: "expansions",
                icon: "set_order",
                children: {
                    trial: {
                        shortName: "trial of the gods",
                        path: "expansions/trial-of-the-gods",
                        pageTitle: "Trial of the Gods"
                    },
                    divineOrder: {shortName: "divine order", path: "expansions/divine-order", pageTitle: "Divine Order"}
                }
            },
            buyPacks: {
                shortName: "buy packs",
                path: "buy-packs",
                icon: "trader_package",
                pageTitle: "Buy new card packs"
            },
            market: {
                shortName: "market",
                path: "market_trader",
                icon: "nav_market",
                children: {
                    imxMarketplace: {
                        shortName: "Buy & Sell",
                        url: "https://market.ropsten.x.immutable.com/assets?collection=0xc6185055ea9891d5d9020c927ff65229baebdef2",
                        _target: "_blank"
                    }, starStore: {shortName: "star store", path: "star-store", pageTitle: "Star Store"}
                }
            },
            learn: {
                shortName: "learn", path: "learn", icon: "nav_library", children: {
                    cards: {
                        shortName: "cards",
                        path: "learn/cards",
                        angularRouterPath: "cards",
                        pageTitle: "Learn: Explore the cards",
                        keywords: "Gods Unchained,Godsunchained,TCG,Trading Card Game, CCG,card game,lore,strategy game,blockchain game,crypto game, free to play, play to earn, gu cards, gods unchained cards, card info",
                        description: "A complete list of collectable cards in Gods Unchained. Build your deck, trade and play using core and Genesis cards."
                    },
                    faq: {
                        shortName: "faq",
                        path: "learn/faq",
                        angularRouterPath: "faq",
                        pageTitle: "Learn: Frequently asked questions",
                        keywords: "Gods Unchained,Godsunchained,TCG,Trading Card Game, CCG,card game,lore,strategy game,blockchain game,crypto game, free to play, play to earn, faq, frequently asked questions",
                        description: "What is Gods Unchained? How do I play? Is it free-to-play? Can I play on mobile? When is the World Championship? Everything you need to know about Gods Unchained. "
                    },
                    lore: {shortName: "lore", url: "//blog.godsunchained.com/category/lore", _target: "_blank"},
                    blog: {shortName: "blog", url: "//blog.godsunchained.com", _target: "_blank"},
                    guide: {shortName: "guide", url: "//blog.godsunchained.com/learn-to-play", _target: "_blank"},
                    spgp: {
                        shortName: "Stay. Play. Get Paid.",
                        path: "learn/spgp",
                        angularRouterPath: "spgp",
                        pageTitle: "Learn: Stay Play Get Paid",
                        keywords: "",
                        description: "",
                        featureFlag: Le.v.spgpEnabled
                    },
                    referrals: {
                        shortName: "Referrals",
                        path: "learn/referrals",
                        angularRouterPath: "referrals",
                        pageTitle: "Learn: Referrals",
                        keywords: "",
                        description: "",
                        featureFlag: Le.v.referralsEnabled
                    }
                }
            },
            collections: {
                shortName: "collections",
                path: "collections",
                icon: "nav_inventory",
                pageTitle: "Collections: Your collections",
                keywords: "Gods Unchained,Godsunchained,TCG,Trading Card Game, CCG,card game,lore,strategy game,blockchain game,crypto game, free to play, play to earn, gu inventory, gods unchained inventory",
                description: "View your Gods Unchained collection."
            },
            openPacks: {
                shortName: "open packs",
                path: "open-packs",
                icon: "nav_temple",
                pageTitle: "Open Gods Unchained card packs you've purchased.",
                keywords: "Gods Unchained,Godsunchained,TCG,Trading Card Game, CCG,card game,lore,strategy game,blockchain game,crypto game, free to play, play to earn, temple, gods unchained temple, gu card packs, open card packs, gu temple",
                description: "Open Gods Unchained card packs you've purchased."
            },
            token: {
                shortName: "$GODS token",
                path: "token",
                icon: "GUToken",
                children: {
                    about: {
                        shortName: "About",
                        path: "token/about",
                        pageTitle: "Learn about GODS token",
                        featureFlag: Le.v.tokenEnabled
                    },
                    airdrop: {
                        shortName: "Claim",
                        path: "token/claim",
                        pageTitle: "Claim GODS token",
                        featureFlag: Le.v.claimAirdropEnabled
                    },
                    staking: {
                        shortName: "Staking",
                        path: "token/staking",
                        pageTitle: "Staking $GODS token",
                        featureFlag: Le.v.stakingEnabled
                    }
                }
            }
        }, qe = {
            manageWallets: {
                shortName: "Manage Wallets",
                path: "manage-wallets",
                pageTitle: "Connect a wallet to your GodsUnchained user account",
                visible: !0
            }, logOut: {shortName: "Log Out", visible: !0}
        }, Ye = Ue => ({
            home: {
                shortName: "arena",
                path: "game/gu/game-modes",
                icon: "nav_arena",
                pageTitle: "Gods Unchained homepage"
            },
            market: {
                shortName: "market",
                path: "market_trader",
                icon: "nav_market",
                children: {
                    imxMarketplace: {
                        shortName: "Buy & Sell",
                        url: `${Ue.immutableXMarketplaceUrlGUCollection}`,
                        _target: "_blank"
                    }, starStore: {shortName: "star store", path: "game/gu/star-store", pageTitle: "Star Store"}
                }
            },
            collections: {
                shortName: "collections",
                path: "game/gu/inventory",
                icon: "nav_inventory",
                pageTitle: "Collections: Your collections"
            },
            workshop: {shortName: "workshop", path: "game/gu/my-decks", icon: "nav_workshop"},
            forge: {path: "game/gu/forge", icon: "nav_forge", shortName: "forge", featureFlag: Le.v.forgeEnabled},
            openPacks: {shortName: "open packs", path: "game/gu/temple", icon: "nav_temple"},
            learn: {
                shortName: "learn",
                icon: "nav_library",
                path: "learn",
                children: {
                    cards: {shortName: "cards", url: `${Ue.guWebsite}/${Ce.learn.children.cards.path}`},
                    faq: {shortName: "faq", url: `${Ue.guWebsite}/${Ce.learn.children.faq.path}`},
                    lore: {shortName: "lore", url: "//blog.godsunchained.com/category/lore"},
                    blog: {shortName: "blog", url: "//blog.godsunchained.com"},
                    guide: {shortName: "guide", url: "//blog.godsunchained.com/learn-to-play"},
                    spgp: {shortName: "Stay. Play. Get Paid.", path: "game/gu/spgp"},
                    referrals: {shortName: "Referrals", path: "game/gu/referrals"}
                }
            },
            buyPacks: {
                shortName: "buy packs",
                icon: "trader_package",
                url: `${Ue.guWebsite}/${Ce.buyPacks.path}`,
                external: !0
            }
        }), ct = Ue => ({
            manageWallets: {
                shortName: "Manage Wallets",
                url: `${Ue.guWebsite}/${qe.manageWallets.path}`,
                pageTitle: "Connect a wallet to your GodsUnchained user account",
                visible: !0
            }, logOut: {shortName: "Log Out", visible: !0}
        })
    }, 52886: (ee, R, n) => {
        "use strict";
        n.d(R, {Zb: () => m, nE: () => P, nJ: () => p, Xl: () => r, PE: () => w});
        var p = (() => {
            return (y = p || (p = {}))[y.DIAMOND = 1] = "DIAMOND", y[y.GOLD = 2] = "GOLD", y[y.SHADOW = 3] = "SHADOW", y[y.METEORITE = 4] = "METEORITE", y[y.PLAIN = 5] = "PLAIN", p;
            var y
        })();
        const r = {
            [p.DIAMOND]: "diamond",
            [p.GOLD]: "gold",
            [p.SHADOW]: "shadow",
            [p.METEORITE]: "meteorite",
            [p.PLAIN]: "plain"
        };

        class m {
            constructor(O, E, u, x, s) {
                this.id = O, this.proto = E, this.quality = u, this.protoCard = x, this.status = s
            }
        }

        var P = (() => {
            return (y = P || (P = {}))[y.All = -1] = "All", y[y.Owned = 0] = "Owned", y[y.Unowned = 1] = "Unowned", y[y.Processing = 2] = "Processing", P;
            var y
        })(), w = (() => {
            return (y = w || (w = {}))[y.AscID = 0] = "AscID", y[y.DescID = 1] = "DescID", y[y.AscQuality = 2] = "AscQuality", y[y.DescQuality = 3] = "DescQuality", y[y.AscMana = 4] = "AscMana", y[y.DescMana = 5] = "DescMana", y[y.AscScarcity = 6] = "AscScarcity", y[y.AscHealth = 7] = "AscHealth", y[y.DescHealth = 8] = "DescHealth", y[y.AscAttack = 9] = "AscAttack", y[y.DescAttack = 10] = "DescAttack", y[y.AscTribe = 11] = "AscTribe", y[y.DescTribe = 12] = "DescTribe", y[y.AscRarity = 13] = "AscRarity", y[y.DescRarity = 14] = "DescRarity", y[y.AscType = 15] = "AscType", y[y.DescType = 16] = "DescType", y[y.AscGod = 17] = "AscGod", y[y.DescGod = 18] = "DescGod", y[y.AscSet = 19] = "AscSet", y[y.DescSet = 20] = "DescSet", w;
            var y
        })()
    }, 28510: (ee, R, n) => {
        "use strict";
        n.d(R, {mX: () => m.mX, Qz: () => p.Q, Zd: () => e});
        var p = n(55943), r = n(5e3), m = n(46688);
        let e = (() => {
            class g {
            }

            return g.\u0275fac = function (i) {
                return new (i || g)
            }, g.\u0275mod = r.oAB({type: g}), g.\u0275inj = r.cJS({providers: [p.Q]}), g
        })()
    }, 46688: (ee, R, n) => {
        "use strict";
        n.d(R, {m3: () => p, mX: () => r, x0: () => m});

        class p {
            constructor(g, v, i) {
                this.nodes = g, this.viewRef = v, this.componentRef = i
            }
        }

        class r {
            close(g) {
            }

            dismiss(g) {
            }
        }

        class m {
            constructor(g, v, i, t) {
                this.windowComponentRef = g, this.contentRef = v, this.backdropComponentRef = i, this._beforeDismiss = t, g.instance.dismissEvent.subscribe(o => {
                    this.dismiss(o)
                }), this.result = new Promise((o, C) => {
                    this.resolve = o, this.reject = C
                }), this.result.then(null, () => {
                })
            }

            get componentInstance() {
                if (this.contentRef && this.contentRef.componentRef) return this.contentRef.componentRef.instance
            }

            close(g) {
                this.windowComponentRef && (this.resolve(g), this.removeModalElements())
            }

            dismissModal(g) {
                this.reject(g), this.removeModalElements()
            }

            dismiss(g) {
                if (this.windowComponentRef) if (this._beforeDismiss) {
                    const v = this._beforeDismiss();
                    v && v.then ? v.then(i => {
                        !1 !== i && this.dismissModal(g)
                    }, () => {
                    }) : !1 !== v && this.dismissModal(g)
                } else this.dismissModal(g)
            }

            removeModalElements() {
                const g = this.windowComponentRef.location.nativeElement;
                if (g.parentNode.removeChild(g), this.windowComponentRef.destroy(), this.backdropComponentRef) {
                    const v = this.backdropComponentRef.location.nativeElement;
                    v.parentNode.removeChild(v), this.backdropComponentRef.destroy()
                }
                this.contentRef && this.contentRef.viewRef && this.contentRef.viewRef.destroy(), this.windowComponentRef = null, this.backdropComponentRef = null, this.contentRef = null
            }
        }
    }, 55943: (ee, R, n) => {
        "use strict";
        n.d(R, {Q: () => De});
        var p = n(69808), r = n(5e3), m = n(8929), e = n(23753), g = n(7625), v = n(24850), i = n(92198), t = n(87168),
            o = (() => {
                return (Y = o || (o = {}))[Y.Tab = 9] = "Tab", Y[Y.Enter = 13] = "Enter", Y[Y.Escape = 27] = "Escape", Y[Y.Space = 32] = "Space", Y[Y.PageUp = 33] = "PageUp", Y[Y.PageDown = 34] = "PageDown", Y[Y.End = 35] = "End", Y[Y.Home = 36] = "Home", Y[Y.ArrowLeft = 37] = "ArrowLeft", Y[Y.ArrowUp = 38] = "ArrowUp", Y[Y.ArrowRight = 39] = "ArrowRight", Y[Y.ArrowDown = 40] = "ArrowDown", o;
                var Y
            })();
        const C = ["a[href]", "button:not([disabled])", 'input:not([disabled]):not([type="hidden"])', "select:not([disabled])", "textarea:not([disabled])", "[contenteditable]", '[tabindex]:not([tabindex="-1"])'].join(", ");

        function f(Y) {
            const ne = Array.from(Y.querySelectorAll(C)).filter(Q => -1 !== Q.tabIndex);
            return [ne[0], ne[ne.length - 1]]
        }

        var w = n(46688);

        function E(Y) {
            return null != Y
        }

        "undefined" != typeof Element && !Element.prototype.closest && (Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector), Element.prototype.closest = function (Y) {
            let ne = this;
            if (!document.documentElement.contains(ne)) return null;
            do {
                if (ne.matches(Y)) return ne;
                ne = ne.parentElement || ne.parentNode
            } while (null !== ne && 1 === ne.nodeType);
            return null
        });
        var X = n(73307);
        let me = (() => {
            class Y {
                constructor(Q) {
                    this._environment = Q
                }

                ngOnInit() {
                    this.modalEnviornment = this._environment.clientType
                }
            }

            return Y.\u0275fac = function (Q) {
                return new (Q || Y)(r.Y36(X.Ho))
            }, Y.\u0275cmp = r.Xpm({
                type: Y,
                selectors: [["cerberus-modal-backdrop"]],
                hostVars: 2,
                hostBindings: function (Q, te) {
                    2 & Q && r.Tol("cerberusModal__backdrop" + (te.backdropClass ? " " + te.backdropClass : ""))
                },
                inputs: {backdropClass: "backdropClass"},
                decls: 0,
                vars: 0,
                template: function (Q, te) {
                },
                encapsulation: 2
            }), Y
        })();
        var ue = n(2994), we = n(87545), N = n(72986), V = (() => {
            return (Y = V || (V = {}))[Y.BACKDROP_CLICK = 0] = "BACKDROP_CLICK", Y[Y.ESC = 1] = "ESC", V;
            var Y
        })();
        const ae = ["dialog"], ve = ["*"];
        let be = (() => {
            class Y {
                constructor(Q, te, ce, ge) {
                    this.environment = Q, this.document = te, this.elRef = ce, this.zone = ge, this.closed$ = new m.xQ, this.backdrop = !0, this.keyboard = !0, this.defaultStylings = !0, this.dismissEvent = new r.vpe
                }

                dismiss(Q) {
                    this.dismissEvent.emit(Q)
                }

                ngOnInit() {
                    this.elWithFocus = this.document.activeElement, this.modalEnviornment = this.environment.clientType
                }

                ngAfterViewInit() {
                    const {nativeElement: Q} = this.elRef;
                    if (this.zone.runOutsideAngular(() => {
                        (0, e.R)(Q, "keydown").pipe((0, g.R)(this.closed$), (0, i.h)(ce => ce.which === o.Escape && this.keyboard)).subscribe(ce => requestAnimationFrame(() => {
                            ce.defaultPrevented || this.zone.run(() => this.dismiss(V.ESC))
                        }));
                        let te = !1;
                        (0, e.R)(this._dialogEl.nativeElement, "mousedown").pipe((0, g.R)(this.closed$), (0, ue.b)(() => te = !1), (0, we.w)(() => (0, e.R)(Q, "mouseup").pipe((0, g.R)(this.closed$), (0, N.q)(1))), (0, i.h)(({target: ce}) => Q === ce)).subscribe(() => {
                            te = !0
                        }), (0, e.R)(Q, "click").pipe((0, g.R)(this.closed$)).subscribe(({target: ce}) => {
                            !0 === this.backdrop && Q === ce && !te && this.zone.run(() => this.dismiss(V.BACKDROP_CLICK)), te = !1
                        })
                    }), !Q.contains(document.activeElement)) {
                        const te = Q.querySelector("[ngbAutofocus]"), ce = f(Q)[0];
                        (te || ce || Q).focus()
                    }
                }

                ngOnDestroy() {
                    const Q = this.document.body, te = this.elWithFocus;
                    let ce;
                    ce = te && te.focus && Q.contains(te) ? te : Q, this.zone.runOutsideAngular(() => {
                        setTimeout(() => ce.focus()), this.elWithFocus = null
                    }), this.closed$.next()
                }
            }

            return Y.\u0275fac = function (Q) {
                return new (Q || Y)(r.Y36(X.Ho), r.Y36(p.K0), r.Y36(r.SBq), r.Y36(r.R0b))
            }, Y.\u0275cmp = r.Xpm({
                type: Y,
                selectors: [["cerberus-modal-window"]],
                viewQuery: function (Q, te) {
                    if (1 & Q && r.Gf(ae, 7), 2 & Q) {
                        let ce;
                        r.iGM(ce = r.CRH()) && (te._dialogEl = ce.first)
                    }
                },
                hostAttrs: ["role", "dialog", "tabindex", "-1"],
                hostVars: 4,
                hostBindings: function (Q, te) {
                    2 & Q && (r.uIk("aria-modal", !0)("aria-labelledby", te.ariaLabelledBy), r.Tol("cerberusModal" + (te.windowClass ? " " + te.windowClass : "")))
                },
                inputs: {
                    ariaLabelledBy: "ariaLabelledBy",
                    backdrop: "backdrop",
                    centered: "centered",
                    keyboard: "keyboard",
                    scrollable: "scrollable",
                    size: "size",
                    windowClass: "windowClass",
                    defaultStylings: "defaultStylings"
                },
                outputs: {dismissEvent: "dismiss"},
                ngContentSelectors: ve,
                decls: 4,
                vars: 4,
                consts: [["role", "document"], ["dialog", ""]],
                template: function (Q, te) {
                    1 & Q && (r.F$t(), r.TgZ(0, "div", 0, 1), r.TgZ(2, "div"), r.Hsn(3), r.qZA(), r.qZA()), 2 & Q && (r.Tol("cerberusModal__dialog" + (te.size ? " cerberus-modal-" + te.size : "") + (te.defaultStylings ? " cerberusModal__dialog--defaultStylings" : "") + (te.centered ? " cerberusModal__dialog--centered" : "") + (te.scrollable ? " cerberusModal__dialog--scrollable" : "") + (te.modalEnviornment ? " cerberusModal__dialog--" + te.modalEnviornment : "")), r.xp6(2), r.Tol("cerberusModal__content" + (te.defaultStylings ? " cerberusModal__content--defaultStylings" : "")))
                },
                styles: ['.cerberusModal__open{overflow:hidden;height:100vh;width:100vw;user-select:none;pointer-events:none}.cerberusModal__open .cerberusModal{overflow-x:hidden;overflow-y:auto;-webkit-overflow-scrolling:touch;user-select:auto;pointer-events:auto}.cerberusModal{position:fixed;top:0;left:0;z-index:22;width:100%;height:100%;overflow:hidden;outline:0;display:flex;justify-content:center;align-items:flex-start}.cerberusModal__dialog{position:relative;width:auto;pointer-events:none;justify-content:center;display:flex}.cerberusModal__dialog--scrollable{display:flex;max-height:calc(100% - 16px)}.cerberusModal__dialog--scrollable .cerberusModal__content{max-height:calc(100vh - 16px);overflow:hidden}.cerberusModal__dialog--scrollable .cerberusModal__header .cerberusModal__footer{flex-shrink:0}.cerberusModal__dialog--scrollable .cerberusModal__body{overflow-y:auto}.cerberusModal__dialog--defaultStylings{margin:8px}.cerberusModal__dialog--centered{display:flex;align-items:center;min-height:calc(100% - 16px);align-self:center}.cerberusModal__dialog--centered:before{display:block;height:calc(100vh - 16px);height:min-content;content:""}.cerberusModal__dialog--centered.cerberusModal__dialog--scrollable{flex-direction:column;justify-content:center;height:100%}.cerberusModal__dialog--centered.cerberusModal__dialog--scrollable .cerberusModal__content{max-height:none}.cerberusModal__dialog--centered.cerberusModal__dialog--scrollable:before{content:none}.cerberusModal__content{position:relative;flex-direction:column;display:flex;width:100%;pointer-events:auto;background-clip:padding-box;outline:0}.cerberusModal__content--defaultStylings{border:2px solid white;border:1px solid rgba(0,0,0,.2);background-color:#fff}.cerberusModal__backdrop{position:fixed;top:0;left:0;z-index:22;width:100vw;height:100vh;background-color:#000;opacity:.5}.cerberusModal__header{display:flex;align-items:flex-start;justify-content:space-between;padding:16px;border-bottom:1px solid #dee2e6}.cerberusModal__header .close{padding:16px;margin:-16px -16px -16px auto}.cerberusModal__title{margin-bottom:0;line-height:1.5}.cerberusModal__body{position:relative;flex:1 1 auto;padding:16px}.cerberusModal__footer{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-end;padding:12px;border-top:1px solid #dee2e6}.cerberusModal__footer>*{margin:4px}.cerberusModal__scrollbarMeasure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}\n', "cerberus-modal-window .component-host-scrollable{display:flex;flex-direction:column;overflow:hidden}.cerberusModal__dialog--defaultStylings.cerberusModal__dialog--website{top:96px}.cerberusModal__dialog--defaultStylings.cerberusModal__dialog--desktop{top:calc(var(--vh) * 9)}\n"],
                encapsulation: 2
            }), Y
        })();
        const B = () => {
        };
        let pe = (() => {
            class Y {
                constructor(Q) {
                    this._document = Q
                }

                compensate() {
                    const Q = this._getWidth();
                    return this._isPresent(Q) ? this._adjustBody(Q) : B
                }

                _adjustBody(Q) {
                    const te = this._document.body, ce = te.style.paddingRight,
                        ge = parseFloat(window.getComputedStyle(te)["padding-right"]);
                    return te.style["padding-right"] = `${ge + Q}px`, () => te.style["padding-right"] = ce
                }

                _isPresent(Q) {
                    const te = this._document.body.getBoundingClientRect();
                    return window.innerWidth - (te.left + te.right) >= Q - .1 * Q
                }

                _getWidth() {
                    const Q = this._document.createElement("div");
                    Q.className = "cerberusModal__scrollbarMeasure";
                    const te = this._document.body;
                    te.appendChild(Q);
                    const ce = Q.getBoundingClientRect().width - Q.clientWidth;
                    return te.removeChild(Q), ce
                }
            }

            return Y.\u0275fac = function (Q) {
                return new (Q || Y)(r.LFG(p.K0))
            }, Y.\u0275prov = r.Yz7({token: Y, factory: Y.\u0275fac, providedIn: "root"}), Y
        })(), re = (() => {
            class Y {
                constructor(Q, te, ce, ge, Le, Ce) {
                    this.applicationRef = Q, this.injector = te, this.document = ce, this.scrollBar = ge, this.rendererFactory = Le, this.ngZone = Ce, this.activeWindowComponentHasChanged = new m.xQ, this.ariaHiddenValues = new Map, this.backdropAttributes = ["backdropClass"], this.modalRefs = [], this.windowAttributes = ["ariaLabelledBy", "backdrop", "centered", "keyboard", "scrollable", "size", "windowClass", "defaultStylings"], this.windowComponents = [], this.activeWindowComponentHasChanged.subscribe(() => {
                        if (this.windowComponents.length) {
                            const qe = this.windowComponents[this.windowComponents.length - 1];
                            ((Y, ne, Q, te = !1) => {
                                this.ngZone.runOutsideAngular(() => {
                                    const ce = (0, e.R)(ne, "focusin").pipe((0, g.R)(Q), (0, v.U)(ge => ge.target));
                                    (0, e.R)(ne, "keydown").pipe((0, g.R)(Q), (0, i.h)(ge => ge.which === o.Tab), (0, t.M)(ce)).subscribe(([ge, Le]) => {
                                        const [Ce, qe] = f(ne);
                                        (Le === Ce || Le === ne) && ge.shiftKey && (qe.focus(), ge.preventDefault()), Le === qe && !ge.shiftKey && (Ce.focus(), ge.preventDefault())
                                    }), te && (0, e.R)(ne, "click").pipe((0, g.R)(Q), (0, t.M)(ce), (0, v.U)(ge => ge[1])).subscribe(ge => ge.focus())
                                })
                            })(0, qe.location.nativeElement, this.activeWindowComponentHasChanged), this.revertAriaHidden(), this.setAriaHidden(qe.location.nativeElement)
                        }
                    })
                }

                open(Q, te, ce, ge) {
                    const Le = ge.container instanceof HTMLElement ? ge.container : E(ge.container) ? this.document.querySelector(ge.container) : this.document.body,
                        Ce = this.rendererFactory.createRenderer(null, null), qe = this.scrollBar.compensate(),
                        Ye = () => {
                            this.modalRefs.length || (Ce.removeClass(this.document.querySelector("html"), "cerberusModal__open"), this.revertAriaHidden())
                        };
                    if (!Le) throw new Error(`The specified modal container "${ge.container || "body"}" was not found in the DOM.`);
                    const ct = new w.mX, ut = this.getContentRef(Q, ge.injector || te, ce, ct, ge);
                    let Ue = !1 !== ge.backdrop ? this.attachBackdrop(Q, Le) : null,
                        Te = this.attachWindowComponent(Q, Le, ut), D = new w.x0(Te, ut, Ue, ge.beforeDismiss);
                    return this.registerModalRef(D), this.registerWindowComponent(Te), D.result.then(qe, qe), D.result.then(Ye, Ye), ct.close = J => {
                        D.close(J)
                    }, ct.dismiss = J => {
                        D.dismiss(J)
                    }, this.applyWindowOptions(Te.instance, ge), 1 === this.modalRefs.length && Ce.addClass(this.document.querySelector("html"), "cerberusModal__open"), Ue && Ue.instance && this.applyBackdropOptions(Ue.instance, ge), D
                }

                dismissAll(Q) {
                    this.modalRefs.forEach(te => te.dismiss(Q))
                }

                hasOpenModals() {
                    return this.modalRefs.length > 0
                }

                attachBackdrop(Q, te) {
                    let ge = Q.resolveComponentFactory(me).create(this.injector);
                    return this.applicationRef.attachView(ge.hostView), te.appendChild(ge.location.nativeElement), ge
                }

                attachWindowComponent(Q, te, ce) {
                    let Le = Q.resolveComponentFactory(be).create(this.injector, ce.nodes);
                    return this.applicationRef.attachView(Le.hostView), te.appendChild(Le.location.nativeElement), Le
                }

                applyWindowOptions(Q, te) {
                    this.windowAttributes.forEach(ce => {
                        E(te[ce]) && (Q[ce] = te[ce])
                    })
                }

                applyBackdropOptions(Q, te) {
                    this.backdropAttributes.forEach(ce => {
                        E(te[ce]) && (Q[ce] = te[ce])
                    })
                }

                getContentRef(Q, te, ce, ge, Le) {
                    return ce ? ce instanceof r.Rgc ? this.createFromTemplateRef(ce, ge) : function (Y) {
                        return "string" == typeof Y
                    }(ce) ? this.createFromString(ce) : this.createFromComponent(Q, te, ce, ge, Le) : new w.m3([])
                }

                createFromTemplateRef(Q, te) {
                    const ge = Q.createEmbeddedView({
                        $implicit: te, close(Le) {
                            te.close(Le)
                        }, dismiss(Le) {
                            te.dismiss(Le)
                        }
                    });
                    return this.applicationRef.attachView(ge), new w.m3([ge.rootNodes], ge)
                }

                createFromString(Q) {
                    const te = this.document.createTextNode(`${Q}`);
                    return new w.m3([[te]])
                }

                createFromComponent(Q, te, ce, ge, Le) {
                    const Ce = Q.resolveComponentFactory(ce),
                        qe = r.zs3.create({providers: [{provide: w.mX, useValue: ge}], parent: te}), Ye = Ce.create(qe),
                        ct = Ye.location.nativeElement;
                    return Le.scrollable && ct.classList.add("component-host-scrollable"), this.applicationRef.attachView(Ye.hostView), new w.m3([[ct]], Ye.hostView, Ye)
                }

                setAriaHidden(Q) {
                    const te = Q.parentElement;
                    te && Q !== this.document.body && (Array.from(te.children).forEach(ce => {
                        ce !== Q && "SCRIPT" !== ce.nodeName && (this.ariaHiddenValues.set(ce, ce.getAttribute("aria-hidden")), ce.setAttribute("aria-hidden", "true"))
                    }), this.setAriaHidden(te))
                }

                revertAriaHidden() {
                    this.ariaHiddenValues.forEach((Q, te) => {
                        Q ? te.setAttribute("aria-hidden", Q) : te.removeAttribute("aria-hidden")
                    }), this.ariaHiddenValues.clear()
                }

                registerModalRef(Q) {
                    const te = () => {
                        const ce = this.modalRefs.indexOf(Q);
                        ce > -1 && this.modalRefs.splice(ce, 1)
                    };
                    this.modalRefs.push(Q), Q.result.then(te, te)
                }

                registerWindowComponent(Q) {
                    this.windowComponents.push(Q), this.activeWindowComponentHasChanged.next(), Q.onDestroy(() => {
                        const te = this.windowComponents.indexOf(Q);
                        te > -1 && (this.windowComponents.splice(te, 1), this.activeWindowComponentHasChanged.next())
                    })
                }
            }

            return Y.\u0275fac = function (Q) {
                return new (Q || Y)(r.LFG(r.z2F), r.LFG(r.zs3), r.LFG(p.K0), r.LFG(pe), r.LFG(r.FYo), r.LFG(r.R0b))
            }, Y.\u0275prov = r.Yz7({token: Y, factory: Y.\u0275fac, providedIn: "root"}), Y
        })(), Be = (() => {
            class Y {
                constructor() {
                    this.backdrop = !0, this.keyboard = !0
                }
            }

            return Y.\u0275fac = function (Q) {
                return new (Q || Y)
            }, Y.\u0275prov = r.Yz7({token: Y, factory: Y.\u0275fac, providedIn: "root"}), Y
        })(), De = (() => {
            class Y {
                constructor(Q, te, ce, ge) {
                    this.moduleCFR = Q, this.injector = te, this.modalStack = ce, this.config = ge
                }

                open(Q, te = {}) {
                    const ce = Object.assign({}, this.config, te);
                    return this.modalStack.open(this.moduleCFR, this.injector, Q, ce)
                }

                dismissAll(Q) {
                    this.modalStack.dismissAll(Q)
                }

                hasOpenModals() {
                    return this.modalStack.hasOpenModals()
                }
            }

            return Y.\u0275fac = function (Q) {
                return new (Q || Y)(r.LFG(r._Vd), r.LFG(r.zs3), r.LFG(re), r.LFG(Be))
            }, Y.\u0275prov = r.Yz7({token: Y, factory: Y.\u0275fac, providedIn: "root"}), Y
        })()
    }, 51395: (ee, R, n) => {
        "use strict";
        n.d(R, {W: () => me, F: () => k});
        var p = n(73307), r = n(61377), m = n(591), e = n(21086), g = n(36053), v = n(72986), i = n(24850), t = n(2994),
            o = n(87545), C = n(92198), f = n(61709), P = n(27221), w = n(5e3);
        let k = (() => {
            class ue {
                constructor(N, V, ae, ve, be, B) {
                    this.authService = N, this.gameApi = V, this.guApi = ae, this.ethService = ve, this.cardsService = be, this.filterService = B, this._unopenedPacks$ = new m.X([]), this._currentRaffleTicketTotal$ = new m.X(0), this.dataStore = {
                        unopenedPacks: [],
                        currentRaffleTicketTotal: 0
                    }
                }

                get unopenedPacks$() {
                    return this._unopenedPacks$.asObservable()
                }

                get currentRaffleTicketTotal$() {
                    return this._currentRaffleTicketTotal$.asObservable()
                }

                fetchUnopenedPacks() {
                    this.fetchUnopenedPacksById().pipe((0, v.q)(1)).subscribe()
                }

                fetchUnopenedPacksById() {
                    const N = this.authService.getUserId();
                    return N ? this.gameApi.get(`/user/${N}/allpacks`).pipe((0, v.q)(1), (0, i.U)(V => this.formatPacks(V, !0)), (0, i.U)(V => this.fixGodAlignments(V)), (0, t.b)(V => {
                        this.dataStore.unopenedPacks = V, this._unopenedPacks$.next([...this.dataStore.unopenedPacks])
                    })) : (0, e.of)([])
                }

                fetchUnopenedPacksByAddress() {
                    return this.ethService.getAccount().pipe((0, o.w)(N => this.guApi.get(`/user/${N}/allpacks`)), (0, v.q)(1), (0, i.U)(N => this.formatPacks(N, !1)), (0, t.b)(N => {
                        this.dataStore.unopenedPacks = N, this._unopenedPacks$.next([...this.dataStore.unopenedPacks])
                    }))
                }

                fetchCurrentTotalRaffleTickets({userId: N, wallet: V}) {
                    return N || V ? this.gameApi.get(`/user/${N || V}/tickets`).pipe((0, v.q)(1)).subscribe(ae => {
                        this.dataStore.currentRaffleTicketTotal = ae, this._currentRaffleTicketTotal$.next(ae)
                    }) : console.error("no wallet or userId supplied")
                }

                formatPacks(N, V = !1) {
                    return N.map(ae => Object.assign(Object.assign({}, ae), {
                        rarity: this.updateRarity(ae),
                        raffleTickets: this.updatePackRaffleTickets(ae),
                        requiresAuthentication: V
                    }))
                }

                updateScarcityAndRarity$(N) {
                    return (0, g.aj)([this.cardsService.protoCards$, this.cardsService.qualityCounts$]).pipe((0, C.h)(([V, ae]) => V && V.size > 0 && ae && ae.size > 0), (0, v.q)(1), (0, i.U)(([V, ae]) => N.map(ve => Object.assign(Object.assign({}, ve), {cards: this.updateScarcityAndRarity(ve.cards, V, ae)}))))
                }

                fixGodAlignments(N) {
                    return N.map(V => Object.assign(Object.assign({}, V), {god: "all" === V.god || "core" === V.god ? "neutral" : V.god}))
                }

                updatePackRaffleTickets(N) {
                    if (N && N.extra) {
                        const V = N.extra.find(ae => "tickets" === ae.name);
                        return V ? V.value : void 0
                    }
                }

                updateRarity(N) {
                    return "shiny" === N.rarity ? "shiny-legendary" : N.rarity
                }

                updateScarcityAndRarity(N, V, ae) {
                    const ve = ["epic", "legendary", "mythic"];
                    return N.map(be => {
                        const B = V.get(be.proto);
                        return !B || (be.rarity = B.rarity, "core" === B.set) || ("mythic" === be.rarity ? be.scarcity = 1 : (ve.includes(be.rarity) || be.quality < 5) && (be.scarcity = this.filterService.calcScarcity(be.proto, be.quality, ae))), be
                    })
                }

                openPackAuthenticated$(N, V = !0) {
                    const ae = this.authService.getUserId();
                    return this.authService.fetchSession().pipe((0, v.q)(1), (0, f.VS)(ve => this.gameApi.put(`/user/${ae}/allpacks?session=${ve}`, N)), (0, t.b)(ve => {
                        this.dataStore.unopenedPacks = this.dataStore.unopenedPacks.filter(B => B.pack_id !== N.pack_id), this._unopenedPacks$.next([...this.dataStore.unopenedPacks]);
                        const be = this.packToInventoryCardsMap(N);
                        this.cardsService.addCardsToInventory(be)
                    }), (0, P.K)(ve => 401 === ve.status && V ? this.authService.refreshToken().pipe((0, f.VS)(be => this.openPackAuthenticated$(N, !1))) : (0, e.of)(ve)))
                }

                dummyOpenPack(N) {
                    return this.dataStore.unopenedPacks = this.dataStore.unopenedPacks.filter(V => V.pack_id !== N.pack_id), this._unopenedPacks$.next([...this.dataStore.unopenedPacks]), (0, e.of)(!0)
                }

                openPackUnauthenticated$(N) {
                    return this.ethService.getAccount().pipe((0, v.q)(1), (0, o.w)(V => this.gameApi.put(`/user/${V}/allpacks`, N)), (0, t.b)(V => {
                        this.dataStore.unopenedPacks = this.dataStore.unopenedPacks.filter(ae => ae.pack_id !== N.pack_id), this._unopenedPacks$.next([...this.dataStore.unopenedPacks])
                    }))
                }

                openPack$(N) {
                    return N.requiresAuthentication ? this.openPackAuthenticated$(N) : this.openPackUnauthenticated$(N)
                }

                packToInventoryCardsMap(N) {
                    const V = {};
                    return N.cards.forEach(ae => {
                        const ve = {q: ae.quality, id: ae.id};
                        V[ae.proto] ? V[ae.proto].push(ve) : V[ae.proto] = [ve]
                    }), V
                }

                generateRandomDummyPacks(N) {
                    return Array.from({length: N}, (V, ae) => ({
                        cards: this.generateRandomDummyCards(5),
                        god: this.chooseRandomGod(),
                        set: "core",
                        rarity: "rare",
                        pack_id: 234423 + ae,
                        pack_source: "reward",
                        raffleTickets: Math.abs(Math.floor(5e4 * Math.random()))
                    }))
                }

                generateRandomDummyCards(N) {
                    return Array.from({length: N}, (V, ae) => ({
                        proto: this.generateCardProto(),
                        id: ae + 1,
                        rarity: this.chooseRandomCardRarity(),
                        quality: Math.ceil(5 * Math.random()),
                        scarcity: Math.ceil(2e3 * Math.random())
                    }))
                }

                chooseRandomPackRarity() {
                    const N = ["rare", "legendary"];
                    return N[Math.ceil(Math.random() * N.length - 1)]
                }

                chooseRandomCardRarity() {
                    const N = ["common", "rare", "epic", "legendary"];
                    return N[Math.ceil(Math.random() * N.length - 1)]
                }

                chooseRandomGod() {
                    const N = ["nature", "death", "nature", "war", "neutral", "deception", "light", "magic"];
                    return N[Math.ceil(Math.random() * N.length - 1)]
                }

                generateCardProto() {
                    const N = Math.ceil(384 * Math.random());
                    return [382, 383, 384, 378, 379].includes(N) ? this.generateCardProto() : N
                }
            }

            return ue.\u0275fac = function (N) {
                return new (N || ue)(w.LFG(p.mI), w.LFG(r.Ft), w.LFG(r.Ho), w.LFG(p.ux), w.LFG(r.dK), w.LFG(r.iZ))
            }, ue.\u0275prov = w.Yz7({token: ue, factory: ue.\u0275fac, providedIn: "root"}), ue
        })();
        var F = n(40886), _ = (() => {
            return (ue = _ || (_ = {}))[ue.RARE_GENESIS = 0] = "RARE_GENESIS", ue[ue.RARE_TRIAL = 1] = "RARE_TRIAL", ue[ue.LEGENDARY_GENESIS = 2] = "LEGENDARY_GENESIS", ue[ue.LEGENDARY_TRIAL = 3] = "LEGENDARY_TRIAL", _;
            var ue
        })(), T = n(52909), y = n(18499), O = n(13989), E = n(45425), u = n(5254), x = n(61737), s = n(7203);
        const Z = n(45861), X = n(92916);
        let me = (() => {
            class ue {
                constructor(N, V) {
                    if (this.environment = N, this.ethService = V, this._chests$ = new m.X([]), console.log("ChestService->constructor()"), "desktop" !== this.environment.clientType) {
                        try {
                            this.setupGenesis()
                        } catch (ae) {
                            console.log("ChestService->constructor() error setting up genesis chests", ae)
                        }
                        try {
                            this.setupTrial()
                        } catch (ae) {
                            console.log("ChestService->constructor() error setting up trial chests", ae)
                        }
                        this.dataStore = {chests: this.chestData()}, this._chests$.next([...this.dataStore.chests])
                    }
                }

                get chests$() {
                    return this._chests$.asObservable()
                }

                setupGenesis() {
                    this.RareGenesis = this.ethService.artifactsToContract(Z, "0xEE85966b4974d3C6F71A2779cC3B6F53aFbc2B68"), this.LegendaryGenesis = this.ethService.artifactsToContract(Z, "0x20D4Cec36528e1C4563c1BFbE3De06aBa70b22B4"), this.Vault = this.ethService.artifactsToContract(X, X.networks[1]), this.VaultInfura = this.ethService.infuraContract(X, X.networks[1]), this.LegendaryGenesisInfura = this.ethService.infuraContract(Z, "0x20D4Cec36528e1C4563c1BFbE3De06aBa70b22B4")
                }

                setupTrial() {
                    const N = this.environment.production ? s.np.Production : s.np.Staging,
                        V = this.environment.production ? "https://eth-mainnet.alchemyapi.io/v2/ICJe8nw_i-gl_3E6V6I942RRJ3PMs5vB" : "https://eth-ropsten.alchemyapi.io/v2/ICJe8nw_i-gl_3E6V6I942RRJ3PMs5vB",
                        ae = this.environment.production ? F.t : F.Y, ve = (0, y.getGodsUnchainedAddresses)(ae, N),
                        B = ((0, y.getGodsUnchainedAddresses)(ae, N), (0, y.getGodsUnchainedAddresses)(ae, N).seasonOne.capAddress);
                    if (window.ethereum) {
                        const re = new O.Qg(window.ethereum).getSigner();
                        console.log("ChestService->setup() signer", re), this.RareTrial = y.Chest.at(re, ve.seasonOne.rareChestAddress), console.log("ChestService->setup() RareTrial", this.RareTrial), this.LegendaryTrial = y.Chest.at(re, ve.seasonOne.legendaryChestAddress), console.log("ChestService->setup() LegendaryTrial", this.LegendaryTrial), this.S1Cap = y.S1Cap.at(re, B), console.log("ChestService->setup() S1Cap", this.S1Cap)
                    }
                    const pe = new O.r6(V, ae);
                    this.RareTrialAlchemy = y.Chest.at(pe, ve.seasonOne.rareChestAddress), this.LegendaryTrialAlchemy = y.Chest.at(pe, ve.seasonOne.legendaryChestAddress), this.S1CapAlchemy = y.S1Cap.at(pe, B)
                }

                s1CapCap() {
                    return (0, u.D)(this.S1Cap.cap()).pipe((0, P.K)(N => (0, u.D)(this.S1CapAlchemy.cap())))
                }

                s1CapCurrent() {
                    return (0, u.D)(this.S1Cap.current()).pipe((0, P.K)(N => (0, u.D)(this.S1CapAlchemy.current())))
                }

                s1CapProgressPercentage() {
                    return (0, g.aj)([this.s1CapCurrent(), this.s1CapCap()]).pipe((0, v.q)(1), (0, i.U)(([N, V]) => {
                        try {
                            const ae = N.toNumber(), ve = V.toNumber();
                            return (ve - ae) / ve * 100
                        } catch (ae) {
                            return 100
                        }
                    }))
                }

                soldTrial(N) {
                    return (0, u.D)(this.getContractTrial(N).sold()).pipe((0, P.K)(V => (0, u.D)(this.getContractTrialAlchemy(N).sold())))
                }

                capTrial(N) {
                    return (0, u.D)(this.getContractTrial(N).productCap()).pipe((0, P.K)(V => (0, u.D)(this.getContractTrialAlchemy(N).productCap())))
                }

                balanceOfTrial(N, V) {
                    const ae = this.getContractTrial(N);
                    return (0, g.aj)([ae.balanceOf(V), (0, u.D)(ae.decimals())]).pipe((0, i.U)(([ve, be]) => {
                        const B = new E.ethers.utils.BigNumber(10).pow(be);
                        return ve.div(B)
                    }))
                }

                getContractTrial(N) {
                    switch (N) {
                        case _.RARE_TRIAL:
                            return this.RareTrial;
                        case _.LEGENDARY_TRIAL:
                            return this.LegendaryTrial
                    }
                }

                getContractTrialAlchemy(N) {
                    switch (N) {
                        case _.RARE_TRIAL:
                            return this.RareTrialAlchemy;
                        case _.LEGENDARY_TRIAL:
                            return this.LegendaryTrialAlchemy
                    }
                }

                fetchChests() {
                    this.ethService.getAccount().pipe((0, v.q)(1), (0, f.VS)(N => (0, g.aj)([this.balanceOf(_.RARE_GENESIS, N), this.balanceOf(_.LEGENDARY_GENESIS, N), this.balanceOfTrial(_.RARE_TRIAL, N), this.balanceOfTrial(_.LEGENDARY_TRIAL, N)]))).subscribe(([N, V, ae, ve]) => {
                        console.log("fetched Num Bundles rare leg", N, V), this.dataStore.chests = this.chestData(N.toNumber(), V.toNumber(), Math.floor(ae.toNumber()), Math.floor(ve.toNumber())), this._chests$.next([...this.dataStore.chests])
                    })
                }

                percentageSold(N) {
                    return (0, g.aj)([this.soldTrial(N), this.capTrial(N)]).pipe((0, i.U)(([V, ae]) => this.progressPercentage(V, ae)))
                }

                progressPercentage(N, V) {
                    try {
                        const ae = N.toNumber(), ve = V.toNumber();
                        return (ve - ae) / ve * 100
                    } catch (ae) {
                        return 100
                    }
                }

                balanceOf(N, V) {
                    return this.getContract(N).pipe((0, f.VS)(ae => ae.balanceOf(V)), (0, i.U)(ae => ae), (0, t.b)(ae => {
                        console.log("ChestService->balanceOf() BALANCE", N, ae)
                    }), (0, P.K)(ae => (console.log("error getting balanceOf ", N, ae), (0, e.of)(T.O$.from(0)))))
                }

                open(N, V) {
                    return this.getContract(N).pipe((0, f.VS)(ae => ae.open(V)), (0, t.b)(ae => {
                        this.dataStore.chests.find(be => be.type === N).amount -= V, this._chests$.next([...this.dataStore.chests])
                    }))
                }

                cap(N) {
                    return this.getContract(N).pipe((0, f.VS)(V => V.productCap()), (0, i.U)(V => V))
                }

                sold(N) {
                    return this.getContract(N).pipe((0, f.VS)(V => V.sold()), (0, i.U)(V => V), (0, P.K)(V => this.soldInfura(N)))
                }

                soldInfura(N) {
                    return this.getContractInfura(N).pipe((0, f.VS)(V => V.sold()), (0, i.U)(V => V))
                }

                vaultBalance() {
                    return (0, u.D)(this.Vault.deployed()).pipe((0, f.VS)(N => N.total()), (0, i.U)(N => N), (0, P.K)(N => this.vaultBalanceInfura()))
                }

                vaultBalanceInfura() {
                    return (0, u.D)(this.VaultInfura.deployed()).pipe((0, f.VS)(N => N.total()), (0, i.U)(N => N))
                }

                vaultCap() {
                    return (0, e.of)(T.O$.from("33333000000000000000000"))
                }

                getContract(N) {
                    switch (N) {
                        case _.RARE_GENESIS:
                            return (0, u.D)(this.RareGenesis.deployed());
                        case _.LEGENDARY_GENESIS:
                            return (0, u.D)(this.LegendaryGenesis.deployed());
                        case _.RARE_TRIAL:
                            return (0, e.of)(this.RareTrial);
                        case _.LEGENDARY_TRIAL:
                            return (0, e.of)(this.LegendaryTrial)
                    }
                    return (0, x._)("invalid bundle pack type")
                }

                getContractInfura(N) {
                    return N === _.LEGENDARY_GENESIS ? (0, u.D)(this.LegendaryGenesisInfura.deployed()) : (0, x._)("invalid bundle pack type")
                }

                chestData(N = 0, V = 0, ae = 0, ve = 0) {
                    return [{
                        type: _.RARE_GENESIS,
                        set: "genesis",
                        rarity: "rare",
                        amount: N
                    }, {type: _.LEGENDARY_GENESIS, set: "genesis", rarity: "legendary", amount: V}, {
                        type: _.RARE_TRIAL,
                        set: "trial",
                        rarity: "rare",
                        amount: ae
                    }, {type: _.LEGENDARY_TRIAL, set: "trial", rarity: "legendary", amount: ve}]
                }
            }

            return ue.\u0275fac = function (N) {
                return new (N || ue)(w.LFG(p.Ho), w.LFG(p.ux))
            }, ue.\u0275prov = w.Yz7({token: ue, factory: ue.\u0275fac, providedIn: "root"}), ue
        })()
    }, 61377: (ee, R, n) => {
        "use strict";
        n.d(R, {
            jt: () => we,
            yD: () => be,
            QF: () => Q,
            f1: () => ct,
            dK: () => ut.d,
            tX: () => Ue,
            ai: () => qe.a,
            iZ: () => D,
            vU: () => qe.v,
            TJ: () => xe,
            pH: () => Ct,
            Ho: () => Fe,
            Of: () => B,
            Ft: () => ie.F,
            pO: () => rt,
            n2: () => ne,
            _q: () => Oe._,
            LE: () => Ye.L,
            fY: () => Qe.f,
            C_: () => gt,
            xd: () => it,
            $c: () => de,
            cM: () => Ne,
            $: () => Ie.$
        });
        var p = n(52408), r = n(21086), m = n(52886), e = n(7203);
        const v = {
            request_id: "request_id",
            catalog_item: "forge-common",
            user_id: 1077441,
            address: "address",
            flux_amount: 10,
            token_amount: "200000000000000000",
            status: e.Og.FLUX_PAID,
            source_assets: [{
                id: 1688181,
                proto: 1e3,
                quality: m.nJ.SHADOW,
                owner: "1124932",
                rarity: "rare",
                set: "core",
                name: "Dryder Sailweaver"
            }, {
                id: 1688182,
                proto: 1e3,
                quality: m.nJ.SHADOW,
                owner: "1124932",
                rarity: "rare",
                set: "core",
                name: "Dryder Sailweaver"
            }],
            target_assets: [{
                id: 0,
                proto: 1e3,
                quality: m.nJ.METEORITE,
                owner: "0x06debe71584bcdc776bace99abc87b48db4f29d8",
                rarity: "rare",
                set: "core",
                name: "Dryder Sailweaver"
            }],
            created_at: "2021-10-10T00:00:00Z",
            modified_at: "2021-10-10T00:00:00Z",
            imx_tx_id: 0,
            token_contract: "token_contract",
            token_payment_address: "token_payment_address"
        };
        Object.assign(Object.assign({}, v), {imx_tx_id: 123, status: e.Og.TOKENS_PAID});
        Object.assign(Object.assign({}, v), {
            imx_tx_id: 125,
            status: e.Og.COMPLETED
        }), Object.assign(Object.assign({}, v), {
            imx_tx_id: 125,
            status: e.Og.COMPLETED
        }), Object.assign(Object.assign({}, v), {imx_tx_id: 0, status: e.Og.CARDS_DELETED});
        var y = n(85111), O = n(69808), E = n(5e3), u = n(73307), s = n(60870);
        let we = (() => {
            class W {
                constructor(a, h, I, oe) {
                    this.deviceDetectorService = a, this.environment = h, this.authService = I, this.storage = oe, this.brand = "godsunchained", this.appVersion = "0.13.3", this.initAnalyticsProperties(), this.initDeviceProperties(), this.initSessionProperties(), this.initUserProperties()
                }

                initAnalyticsProperties() {
                    this.appName = "website" === this.environment.clientType ? "com.immutable.guweb" : "com.immutable.gudesktop", this.appPlatform = this.environment.clientType, "desktop" === this.environment.clientType && (this.branch = this.storage.get(["game", "1", "branch"]) || "beta")
                }

                initDeviceProperties() {
                    const h = this.getDeviceId();
                    this.deviceProperties = {
                        device_id: h && /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(h) ? h : n(66926)(),
                        os_name: this.deviceDetectorService.os,
                        os_version: this.deviceDetectorService.os_version,
                        app_platform: window.navigator.platform
                    }, this.storage.set(["device_id"], h)
                }

                getDeviceId() {
                    return this.storage.get(["device_id"])
                }

                initSessionProperties() {
                    this.sessionProperties = {session_id: +new Date}
                }

                initUserProperties() {
                    this.userId = this.authService.getUserId(), this.isUserSignedIn = !!this.userId, this.authService.account$.subscribe(a => {
                        this.isUserSignedIn = !!a, this.userId = this.isUserSignedIn ? `${this.authService.getUserId()}` : ""
                    })
                }

                get producer() {
                    return "website" === this.environment.clientType ? "web" : "client"
                }

                sendEvent(a) {
                    try {
                        window.akuma(a)
                    } catch (h) {
                        console.error(h)
                    }
                }

                postScreenEvent(a, h, I, oe, Pe, at) {
                    const Bt = this.buildEvent("Screen", `${a}${h}${I}_${oe}`, this.isUserSignedIn ? `${this.userId}` : `${at}`, Pe);
                    this.sendEvent(Bt)
                }

                postControlEvent(a, h, I, oe, Pe, at, nt, Kt) {
                    const ht = this.buildEvent("Control", `${a}${h}${I}_${oe}${Pe}_${at}`, this.isUserSignedIn ? `${this.userId}` : `${Kt}`, nt);
                    this.sendEvent(ht)
                }

                postFlowEvent(a, h, I, oe) {
                    const nt = this.buildEvent("Flow", `_${a}_${h}`, this.isUserSignedIn ? `${this.userId}` : `${oe}`, I);
                    this.sendEvent(nt)
                }

                buildEvent(a, h, I, oe) {
                    return {
                        appBrand: this.brand,
                        appName: this.appName,
                        appPlatform: this.appPlatform,
                        appVersion: this.appVersion,
                        deviceProperties: this.deviceProperties,
                        eventProperties: oe,
                        eventName: h,
                        eventType: a,
                        sessionProperties: this.sessionProperties,
                        userId: I,
                        userProperties: this.userProperties,
                        realm: this.branch
                    }
                }

                postEvent(a, h, I, oe) {
                    const at = this.buildEvent(a, h, this.isUserSignedIn ? `${this.userId}` : `${oe}`, I);
                    this.sendEvent(at)
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(s.x0), E.LFG(u.Ho), E.LFG(u.mI), E.LFG(u.qy))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var N = n(40520), V = n(59633);
        const ae = "website";
        let be = (() => {
            class W {
                constructor(a, h, I, oe) {
                    this.deviceDetectorService = a, this.httpClient = h, this.environment = I, this.storage = oe, this.headers = new N.WM({"X-Chaff": this.environment.production ? "" : "test"});
                    const Pe = this.getDeviceId();
                    this.brand = "gods_unchained", this.device_id = Pe && /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(Pe) ? Pe : n(66926)(), this.event_id = 0, this.native = this.environment.clientType !== ae, this.platform = window.navigator.platform, this.producer = this.deviceDetectorService.isDesktop() ? "desktop" : "mobile", this.os_name = this.deviceDetectorService.os, this.os_version = this.deviceDetectorService.os_version, this.service = this.environment.clientType === ae ? ae : "launcher", this.session_id = this.generateSessionId(), this.storage.set(["device_id"], this.device_id)
                }

                generateSessionId() {
                    return +new Date
                }

                getUserId() {
                    return this.storage.get(["user_id"])
                }

                getUTM() {
                    return {
                        ad_id: this.storage.get(["ad_id"]),
                        utm_campaign: this.storage.get(["utm_campaign"]),
                        utm_content: this.storage.get(["utm_content"]),
                        utm_hash: this.storage.get(["utm_hash"]),
                        utm_medium: this.storage.get(["utm_medium"]),
                        utm_source: this.storage.get(["utm_source"])
                    }
                }

                getDeviceId() {
                    return this.storage.get(["device_id"])
                }

                postEvent(a, h) {
                    const oe = new V.Event({
                        brand: this.brand,
                        device_id: this.device_id,
                        event_id: this.event_id = this.event_id + 1,
                        event_properties: a,
                        native: this.native,
                        os_name: this.os_name,
                        os_version: this.os_version,
                        platform: this.platform,
                        producer: this.producer,
                        service: this.service,
                        session_id: this.session_id,
                        user_id: parseInt(this.getUserId(), 10),
                        user_properties: h
                    }).toObject();
                    return Object.assign(oe.event_properties, this.getUTM()), this.httpClient.post(this.environment.analyticsHost, JSON.stringify(oe), {headers: this.headers}).toPromise()
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(s.x0), E.LFG(N.eN), E.LFG(u.Ho), E.LFG(u.qy))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac, providedIn: "root"}), W
        })(), B = (() => {
            class W {
                constructor() {
                }

                setCurrentProvider(a) {
                    try {
                        ga("set", "dimension1", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setAccount(a) {
                    try {
                        ga("set", "dimension2", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setReferrer(a) {
                    try {
                        ga("set", "dimension3", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setClientId(a) {
                    try {
                        ga("set", "dimension4", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setSessionId(a) {
                    try {
                        ga("set", "dimension5", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setUserId(a) {
                    try {
                        ga("set", "dimension6", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setHitTimestamp(a) {
                    try {
                        ga("set", "dimension7", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                setAbVersion(a) {
                    try {
                        ga("set", "dimension8", a)
                    } catch (h) {
                        console.log(h)
                    }
                }

                triggerOutboundLinkEvent(a, h) {
                    try {
                        let I = "";
                        I = I.split("?")[0], ga("send", "event", "Outbound Link", "click", I, a)
                    } catch (I) {
                        console.log("could not track ga", I)
                    }
                }

                triggerButtonClickEvent(a, h) {
                    try {
                        let I = "";
                        I = I.split("?")[0], ga("send", "event", "Button", "click", I, a)
                    } catch (I) {
                        console.log("could not track ga", I)
                    }
                }

                triggerPageDeferLoadEvent(a, h) {
                    try {
                        let I = "";
                        I = I.split("?")[0], ga("send", "event", "Page", "defer load", I, a)
                    } catch (I) {
                        console.log("could not track ga", I)
                    }
                }

                sendEvent(a, h, I, oe, Pe) {
                    try {
                        console.log(`GA Event: send, event, ${a}, ${h}, ${I}, ${oe}, ${Pe}`), ga("send", "event", a, h, I, oe, Pe)
                    } catch (at) {
                        console.log("Error tracking GA", at)
                    }
                }

                buyPackBanneCountry() {
                    this.sendEvent("buy", "pack", "banned_country")
                }

                buyPackType(a) {
                    this.sendEvent("buy", "pack_type", a)
                }

                buyPackTypeNumber(a, h, I) {
                    this.sendEvent("buy", `${a}_number`, h, I)
                }

                buyPurchase(a, h) {
                    this.sendEvent("buy", "purchase", a, h)
                }

                buyConfirmation(a, h) {
                    this.sendEvent("buy", "confirmation", a, h)
                }

                buyStatus(a) {
                    this.sendEvent("buy", "status", a)
                }

                templeOpenPacks() {
                    this.sendEvent("temple", "open_packs")
                }

                templePurchase(a, h) {
                    this.sendEvent("temple", "purchase", a, h)
                }

                templeShareDiscord() {
                    this.sendEvent("temple", "share", "discord")
                }

                inventoryInventoryType(a) {
                    this.sendEvent("inventory", "inventory_type", a)
                }

                inventory(a, h, I) {
                    this.sendEvent("inventory", a, h, I)
                }

                inventorySearchStart() {
                    this.sendEvent("inventory", "search_start")
                }

                inventorySearchEnd(a, h) {
                    this.sendEvent("inventory", "search_end", a, h)
                }

                inventoryPageUp(a, h) {
                    this.sendEvent("inventory", "page_up", a, h)
                }

                inventoryPageDown(a, h) {
                    this.sendEvent("inventory", "page_down", a, h)
                }

                inventoryPageSelect(a, h) {
                    this.sendEvent("inventory", "page_select", a, h)
                }

                inventoryViewCard(a, h) {
                    this.sendEvent("inventory", "view_card", a + "", h)
                }

                inventoryViewCollectable(a, h) {
                    this.sendEvent("inventory", "view_collectable", a, h)
                }

                navigateHeader(a) {
                    this.sendEvent("navigate", "header", a)
                }

                navigate(a, h) {
                    this.sendEvent("navigate", a, h)
                }

                outbound(a, h) {
                    this.sendEvent("outbound", a, h)
                }

                navigateExit(a) {
                    this.sendEvent("navigate", "exit", a)
                }

                helpOpenHelp() {
                    this.sendEvent("help", "open_help")
                }

                helpEndHelp() {
                    this.sendEvent("help", "end_help")
                }

                helpSearchStart() {
                    this.sendEvent("help", "search_start")
                }

                helpSearchEnd(a) {
                    this.sendEvent("help", "search_end", a)
                }

                helpSelectFaq(a) {
                    this.sendEvent("help", "select_faq", a)
                }

                cryptokittiesPurchaseRareRandom() {
                    this.sendEvent("cryptokitties", "purchase", "rare_random")
                }

                cryptokittiesPurchaseRare(a) {
                    this.sendEvent("cryptokitties", "purchase", "rare", a)
                }

                cryptokittiesInventoryType(a) {
                    this.sendEvent("cryptokitties", "inventory_type", a)
                }

                cryptokittiesSearchStartStart() {
                    this.sendEvent("cryptokitties", "search_start", "start")
                }

                cryptokittiesSearchEnd(a) {
                    this.sendEvent("cryptokitties", "search_end", a)
                }

                cryptokittiesPageUp(a) {
                    this.sendEvent("cryptokitties", "page_up", a)
                }

                cryptokittiesPageDown(a) {
                    this.sendEvent("cryptokitties", "page_down", a)
                }

                cryptokittiesPageSelect(a) {
                    this.sendEvent("cryptokitties", "page_select", a)
                }

                cryptokittiesSelect(a) {
                    this.sendEvent("cryptokitties", "select", a)
                }

                cryptokittiesDeselect(a) {
                    this.sendEvent("etherbots", "deselect", a)
                }

                etherbotsPurchaseRareRandom() {
                    this.sendEvent("etherbots", "purchase", "rare_random")
                }

                etherbotsPurchaseRare(a) {
                    this.sendEvent("etherbots", "purchase", "rare", a)
                }

                etherbotsInventoryType(a) {
                    this.sendEvent("etherbots", "inventory_type", a)
                }

                etherbotsSearchStartStart() {
                    this.sendEvent("etherbots", "search_start", "start")
                }

                etherbotsSearchEnd(a) {
                    this.sendEvent("etherbots", "search_end", a)
                }

                etherbotsPageUp(a) {
                    this.sendEvent("etherbots", "page_up", a)
                }

                etherbotsPageDown(a) {
                    this.sendEvent("etherbots", "page_down", a)
                }

                etherbotsPageSelect(a) {
                    this.sendEvent("etherbots", "page_select", a)
                }

                etherbotsSelect(a) {
                    this.sendEvent("etherbots", "select", a)
                }

                etherbotsDeselect(a) {
                    this.sendEvent("etherbots", "deselect", a)
                }

                inventoryViewStatue(a) {
                    this.sendEvent("inventory", "view_statue", a)
                }

                walletConnect(a, h) {
                    this.sendEvent("wallet", "connect", a, h)
                }

                videoPlay(a) {
                    this.sendEvent("video", "play", a)
                }

                videoPause(a, h) {
                    this.sendEvent("video", "pause", a, h)
                }

                videoComplete25(a) {
                    this.sendEvent("video", "complete_25", a)
                }

                videoComplete50(a) {
                    this.sendEvent("video", "complete_50", a)
                }

                videoComplete75(a) {
                    this.sendEvent("video", "complete_75", a)
                }

                videoComplete100(a) {
                    this.sendEvent("video", "complete_100", a)
                }

                videoWatchLater(a) {
                    this.sendEvent("video", "watch_later", a)
                }

                videoShare(a, h) {
                    this.sendEvent("video", `share_${a}`, h)
                }

                apolloRegisterBegin(a) {
                    this.sendEvent("apollo_register", `${a}_onboard`)
                }

                apolloRegisterFieldStart(a) {
                    this.sendEvent("apollo_register", `${a}_start`)
                }

                apolloRegisterFieldComplete(a, h) {
                    this.sendEvent("apollo_register", `${a}_complete`, void 0, h)
                }

                apolloRegisterStagesTime(a, h) {
                    this.sendEvent("apollo_register", `${a}_time`, void 0, h)
                }

                apolloRegisterComplete() {
                    this.sendEvent("apollo_register", "register", "register_complete")
                }

                apolloLoginComplete() {
                    this.sendEvent("apollo_register", "login", "login_complete")
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var pe = n(61737), re = n(27221);
        let Be = (() => {
            class W {
                constructor() {
                }

                autoRetryApiOnFail(a, h = 1) {
                    return a.pipe((0, re.K)(I => h > 0 && I.status >= 400 && I.status < 600 ? this.autoRetryApiOnFail(a, h - 1) : (0, pe._)(I)))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var De = n(591), Y = n(46461);
        let ne = (() => {
            class W {
                constructor() {
                    this._storage = window.localStorage
                }

                set(a, h) {
                    return this._storage.setItem(a.join("."), h)
                }

                get(a) {
                    return this._storage.getItem(a.join("."))
                }

                delete(a) {
                    return this._storage.removeItem(a.join("."))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })(), Q = (() => {
            class W {
                constructor(a) {
                    this.storage = a, this.arenaCancel = this.loadHowl("desktop/Launcher_Arena_Cancel.ogg"), this.arenaClickStart = this.loadHowl("desktop/Launcher_Arena_Click_Start.ogg"), this.arenaCycleMode = this.loadHowl("desktop/Launcher_Arena_CycleMode.ogg"), this.arenaHoverStart = this.loadHowl("desktop/Launcher_Arena_Hover_Start.ogg"), this.returnToLauncher = this.loadHowl("desktop/Launcher_Return.ogg"), this.loginToLauncher = this.loadHowl("desktop/Launcher_Login.ogg"), this.clickItemV1 = this.loadHowl("desktop/Launcher_Click_Item_V1.ogg"), this.clickItemV2 = this.loadHowl("desktop/Launcher_Click_Item_V2.ogg"), this.clickMediumV1 = this.loadHowl("desktop/Launcher_Click_Medium_V1.ogg"), this.clickMediumV2 = this.loadHowl("desktop/Launcher_Click_Medium_V2.ogg"), this.clickTinyV1 = this.loadHowl("desktop/Launcher_Click_Tiny_V1.ogg"), this.clickTinyV2 = this.loadHowl("desktop/Launcher_Click_Tiny_V2.ogg"), this.hoverHex = this.loadHowl("desktop/Launcher_Hover_Hexagon.ogg"), this.hoverItem = this.loadHowl("desktop/Launcher_Hover_Item.ogg"), this.transitionWorkshop = this.loadHowl("desktop/Launcher_Transition_Workshop.ogg"), this.workshopCustomize = this.loadHowl("desktop/Launcher_Workshop_Customize.ogg"), this.workshopDelete = this.loadHowl("desktop/Launcher_Workshop_Delete.ogg"), this.forgeAmbience = this.loadHowl("desktop/Launcher_Forge_Ambience.ogg", {loop: !0}), this.forgeHeatingUp = this.loadHowl("desktop/Launcher_Forge_HeatingUp.ogg"), this.forgeSelectCard = this.loadHowl("desktop/Launcher_Forge_SelectCard.ogg"), this.ForgeFuseAnvil1 = this.loadHowl("desktop/Launcher_Forge_Fuse_Anvil_1.ogg"), this.ForgeFuseAnvil2 = this.loadHowl("desktop/Launcher_Forge_Fuse_Anvil_2.ogg"), this.ForgeFuseAnvil3 = this.loadHowl("desktop/Launcher_Forge_Fuse_Anvil_3.ogg"), this.ForgeFuseAnvil4 = this.loadHowl("desktop/Launcher_Forge_Fuse_Anvil_4.ogg"), this.ForgeFuseAnvil5 = this.loadHowl("desktop/Launcher_Forge_Fuse_Anvil_5.ogg"), this.ForgeFuseShimmer = this.loadHowl("desktop/Launcher_Forge_Fuse_Shimmer.ogg"), this.ForgeFuseContinue = this.loadHowl("desktop/Launcher_Forge_Fuse_Continue.ogg"), this._currentVolume$ = new De.X(null), console.log("@cerberus/AudioService constructor"), this.setInitialVolume()
                }

                get currentVolume$() {
                    return this._currentVolume$.asObservable()
                }

                setGlobalVolume(a) {
                    Y.Howler.volume(a), this._currentVolume$.next(a), this.storage.set(["gu-audioVolume"], a)
                }

                setInitialVolume() {
                    this.initialVolume = parseFloat(this.storage.get(["gu-audioVolume"])), isNaN(this.initialVolume) && (this.initialVolume = .9), this.setGlobalVolume(this.initialVolume)
                }

                loadHowl(a, h) {
                    return h || (h = {}), h.src = `/assets/audio/${a}`, new Y.Howl(h)
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(ne))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var te = n(8929), ce = n(87168), ge = n(24850), Le = n(7625), Ce = n(87545), qe = n(1025), Ye = n(77535);
        let ct = (() => {
            class W {
                constructor(a, h, I) {
                    this.http = a, this.destroyed$ = new te.xQ, this.apolloEndpoint$ = h.loadConfigurations().pipe((0, ce.M)(I.get(qe.v.newEnvironmentAuthLegacyApi)), (0, ge.U)(([oe, Pe]) => Pe ? oe.legacyAuthHost : oe.authHost), (0, Le.R)(this.destroyed$))
                }

                get(a, h, I) {
                    return this.apolloEndpoint$.pipe((0, Ce.w)(oe => this.http.get(oe + a, {headers: I, params: h})))
                }

                put(a, h, I, oe) {
                    return this.apolloEndpoint$.pipe((0, Ce.w)(Pe => this.http.put(Pe + a, h, {
                        headers: oe,
                        params: I
                    })))
                }

                post(a, h, I) {
                    return this.apolloEndpoint$.pipe((0, Ce.w)(oe => this.http.post(oe + a, h, {headers: I})))
                }

                delete(a) {
                    return this.apolloEndpoint$.pipe((0, Ce.w)(h => this.http.delete(h + a)))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(N.eN), E.LFG(Ye.L), E.LFG(qe.a))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var ut = n(69439);
        let Ue = (() => {
            class W {
                constructor() {
                }

                copyText(a) {
                    const h = document.createElement("input");
                    document.body.appendChild(h), h.value = a, h.select(), document.execCommand("copy"), document.body.removeChild(h)
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac, providedIn: "root"}), W
        })();
        var Te = n(61709);

        class D {
            constructor(j) {
                this.cardsService = j, this.typeOrder = ["spell", "creature", "weapon"], this.godOrder = ["death", "deception", "light", "magic", "nature", "war", "neutral"], this.rarityOrder = ["legendary", "epic", "rare", "common", "mythic"]
            }

            static displayable(...j) {
                return j.map(a => {
                    const h = "All" === a ? "" : a.toLowerCase();
                    return {display: a, value: h}
                })
            }

            static enumerated(...j) {
                return j.map((a, h) => ({display: a, value: h - 1}))
            }

            static standardProtoFilters(j, a, h) {
                return {mana: -1, rarity: "", tribe: "", god: "", name: "", sort: a, ownership: j, type: "", set: h}
            }

            static standardCardFilters(j, a, h, I = "") {
                return {
                    mana: -1,
                    rarity: "",
                    tribe: "",
                    god: I,
                    name: "",
                    sort: a,
                    ownership: j,
                    type: "",
                    set: h,
                    quality: ""
                }
            }

            calcScarcity(j, a, h) {
                let I = 1;
                try {
                    const oe = h.get(j)[a];
                    I = void 0 === oe ? 1 : Number(oe)
                } catch (oe) {
                }
                return I
            }

            getSort(j, a) {
                switch (j) {
                    case m.PE.AscID:
                        return (h, I) => h.proto - I.proto;
                    case m.PE.DescID:
                        return (h, I) => I.proto - h.proto;
                    case m.PE.AscQuality:
                        return (h, I) => h.quality - I.quality;
                    case m.PE.DescQuality:
                        return (h, I) => I.quality - h.quality;
                    case m.PE.AscMana:
                        return (h, I) => Number(h.protoCard.mana) - Number(I.protoCard.mana);
                    case m.PE.DescMana:
                        return (h, I) => Number(I.protoCard.mana) - Number(h.protoCard.mana);
                    case m.PE.AscHealth:
                        return (h, I) => Number(h.protoCard.health) - Number(I.protoCard.health);
                    case m.PE.DescHealth:
                        return (h, I) => Number(I.protoCard.health) - Number(h.protoCard.health);
                    case m.PE.AscAttack:
                        return (h, I) => Number(h.protoCard.attack) - Number(I.protoCard.attack);
                    case m.PE.DescAttack:
                        return (h, I) => Number(I.protoCard.attack) - Number(h.protoCard.attack);
                    case m.PE.AscTribe:
                        return (h, I) => h.protoCard.tribe < I.protoCard.tribe ? -1 : 1;
                    case m.PE.DescTribe:
                        return (h, I) => h.protoCard.tribe > I.protoCard.tribe ? -1 : 1;
                    case m.PE.AscRarity:
                        return (h, I) => this.getRarityId(h.rarity) < this.getRarityId(I.rarity) ? -1 : 1;
                    case m.PE.DescRarity:
                        return (h, I) => this.getRarityId(h.rarity) > this.getRarityId(I.rarity) ? -1 : 1;
                    case m.PE.AscScarcity:
                        return (h, I) => {
                            if (!a) throw new Error("qualityCounts required for scarcity search");
                            const at = this.calcScarcity(h.proto, h.quality, a) - this.calcScarcity(I.proto, I.quality, a);
                            return 0 === at ? I.quality - h.quality : at
                        }
                }
                return (h, I) => 0
            }

            sortLegacy(j, a, h) {
                return j ? j.sort(this.getSort(a, h)) : []
            }

            sort(j, a, h) {
                return j ? j.sort(this.tiebreak(this.getSort(a, h))) : []
            }

            tiebreak(j) {
                return (a, h) => {
                    const I = j(a, h);
                    return 0 === I ? this.tiebreakProtoType(a.protoCard, h.protoCard) : I
                }
            }

            getSortProtos(j, a) {
                switch (j) {
                    case m.PE.AscID:
                        return (h, I) => h.proto - I.proto;
                    case m.PE.DescID:
                        return (h, I) => I.proto - h.proto;
                    case m.PE.AscQuality:
                        return (h, I) => h.quality - I.quality;
                    case m.PE.DescQuality:
                        return (h, I) => I.quality - h.quality;
                    case m.PE.AscMana:
                        return (h, I) => Number(h.mana) - Number(I.mana);
                    case m.PE.DescMana:
                        return (h, I) => Number(I.mana) - Number(h.mana);
                    case m.PE.AscHealth:
                        return (h, I) => Number(h.health) - Number(I.health);
                    case m.PE.DescHealth:
                        return (h, I) => Number(I.health) - Number(h.health);
                    case m.PE.AscAttack:
                        return (h, I) => Number(h.attack) - Number(I.attack);
                    case m.PE.DescAttack:
                        return (h, I) => Number(I.attack) - Number(h.attack);
                    case m.PE.AscTribe:
                        return (h, I) => h.tribe < I.tribe ? -1 : 1;
                    case m.PE.DescTribe:
                        return (h, I) => h.tribe > I.tribe ? -1 : 1;
                    case m.PE.AscRarity:
                        return (h, I) => this.getRarityId(h.rarity) < this.getRarityId(I.rarity) ? -1 : 1;
                    case m.PE.DescRarity:
                        return (h, I) => this.getRarityId(h.rarity) > this.getRarityId(I.rarity) ? -1 : 1;
                    case m.PE.AscType:
                        return (h, I) => h.type < I.type ? -1 : 1;
                    case m.PE.DescType:
                        return (h, I) => h.type > I.type ? -1 : 1;
                    case m.PE.AscGod:
                        return (h, I) => h.god < I.god ? -1 : 1;
                    case m.PE.DescGod:
                        return (h, I) => h.god > I.god ? -1 : 1;
                    case m.PE.AscSet:
                        return (h, I) => h.set < I.set ? -1 : 1;
                    case m.PE.DescSet:
                        return (h, I) => h.set > I.set ? -1 : 1
                }
                return (h, I) => 0
            }

            sortProtos(j, a, h) {
                return j ? j.sort(this.tiebreakProto(this.getSortProtos(a, h))) : []
            }

            tiebreakProto(j) {
                return (a, h) => {
                    const I = j(a, h);
                    return 0 === I ? this.tiebreakProtoType(a, h) : I
                }
            }

            tiebreakProtoType(j, a) {
                const h = this.typeOrder.indexOf(j.type) - this.typeOrder.indexOf(a.type);
                return 0 === h ? this.tiebreakProtoGod(j, a) : h
            }

            tiebreakProtoGod(j, a) {
                const h = this.godOrder.indexOf(j.god) - this.godOrder.indexOf(a.god);
                return 0 === h ? this.tiebreakProtoRarity(j, a) : h
            }

            tiebreakProtoRarity(j, a) {
                const h = this.rarityOrder.indexOf(j.rarity) - this.rarityOrder.indexOf(a.rarity);
                return 0 === h ? this.tiebreakProtoHealth(j, a) : h
            }

            tiebreakProtoHealth(j, a) {
                const h = Number(j.health) - Number(a.health);
                return 0 === h ? this.tiebreakProtoAttack(j, a) : h
            }

            tiebreakProtoAttack(j, a) {
                const h = Number(j.attack) - Number(a.attack);
                return 0 === h ? this.tiebreakProtoName(j, a) : h
            }

            tiebreakProtoName(j, a) {
                return j.name < a.name ? -1 : 1
            }

            filter(j, a) {
                return j ? j.filter(h => this.matches(a, h)) : []
            }

            matches(j, a) {
                if (null == j) return !0;
                if (null == a || "" !== j.rarity && j.rarity !== a.rarity || "" !== j.set && j.set !== a.set || "" !== j.god && j.god !== a.god || "" !== j.tribe && ("none" === j.tribe && a.tribe || "none" !== j.tribe && j.tribe !== a.tribe)) return !1;
                if (-1 != +j.mana) if (10 == +j.mana) {
                    if (a.mana < 10) return !1
                } else if (+j.mana !== a.mana) return !1;
                if (j.name.length > 0) {
                    const h = j.name.toLowerCase().trim();
                    if (-1 === a.name.toLowerCase().indexOf(h)) return !1
                }
                return !0
            }

            isMythic(j) {
                return 378 === j || 379 === j || 383 === j
            }

            getRarityId(j) {
                switch (j) {
                    case"common":
                    default:
                        return 0;
                    case"rare":
                        return 1;
                    case"epic":
                        return 2;
                    case"legendary":
                        return 3;
                    case"mythic":
                        return 4
                }
            }

            cardsMatch(j, a, h) {
                return null == j || !(this.filterQualities(h.qualities, j.quality) || +j.ownership === m.nE.Owned && !h.owned || +j.ownership === m.nE.Unowned && h.owned || +j.ownership === m.nE.Processing && "escrow" !== h.status || !this.matches(j, a))
            }

            filterCards(j, a) {
                return null == j ? (0, r.of)(null) : this.cardsService.protoCards$.pipe((0, Te.VS)(h => {
                    const I = j.filter(oe => this.cardsMatch(a, h.get(oe.proto), oe));
                    return (0, r.of)(I)
                }))
            }

            filterQualities(j, a) {
                const h = this.getQualityByName(a);
                return -1 !== h && 0 === j[h]
            }

            getQualityByName(j) {
                switch (j.toLowerCase()) {
                    case"plain":
                        return m.nJ.PLAIN;
                    case"meteorite":
                        return m.nJ.METEORITE;
                    case"shadow":
                        return m.nJ.SHADOW;
                    case"gold":
                        return m.nJ.GOLD;
                    case"diamond":
                        return m.nJ.DIAMOND;
                    default:
                        return -1
                }
            }
        }

        D.rarityOptions = D.displayable("All", "Common", "Rare", "Epic", "Legendary", "Mythic"), D.qualityOptions = D.displayable("All", "Plain", "Meteorite", "Shadow", "Gold", "Diamond"), D.godOptions = D.displayable("All", "Neutral", "Nature", "War", "Death", "Light", "Magic", "Deception"), D.manaOptions = D.enumerated("All", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10+"), D.tribeOptions = D.displayable("All", "None", "Viking", "Amazon", "Anubian", "Aether", "Nether", "Atlantean", "Olympian", "Dragon", "Guild", "Mystic", "Structure", "Wild"), D.ownershipOptions = D.enumerated("All", "Owned", "Not Owned", "Processing"), D.setOptions = D.displayable("All", "Genesis", "Core", "Etherbots", "Promo", "Mythic", "Trial", "Welcome", "Order"), D.defaultFilters = [{
            name: "Ownership",
            options: D.ownershipOptions
        }, {name: "Quality", options: D.qualityOptions}, {name: "Rarity", options: D.rarityOptions}, {
            name: "Tribe",
            options: D.tribeOptions
        }, {name: "Mana", options: D.manaOptions}, {name: "God", options: D.godOptions}, {
            name: "Set",
            options: D.setOptions
        }], D.\u0275fac = function (j) {
            return new (j || D)(E.LFG(ut.d))
        }, D.\u0275prov = E.Yz7({token: D, factory: D.\u0275fac, providedIn: "root"});
        var J = n(72986), ie = n(43834);
        let xe = (() => {
            class W {
                constructor(a, h) {
                    this.gameApi = a, this.authService = h, this.unsubscribe = new te.xQ, this.dataStore = {fluxInfo: null}, this._fluxInfo$ = new De.X(null)
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                get fluxInfo$() {
                    return this._fluxInfo$.asObservable()
                }

                fetchFluxInfo() {
                    const a = this.authService.getUserId();
                    a ? this.gameApi.get(`/user/${a}/flux`).pipe((0, J.q)(1)).subscribe(h => {
                        this.emitFluxInfo(h)
                    }, h => {
                        this.emitFluxInfo()
                    }) : this.emitFluxInfo()
                }

                emitFluxInfo(a = {flux_available: 0, flux_spent: 0, locked: !1}) {
                    this.dataStore.fluxInfo = a, this._fluxInfo$.next(Object.assign({}, this.dataStore.fluxInfo))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(ie.F), E.LFG(u.mI))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })(), Ct = (() => {
            class W {
                constructor(a, h) {
                    this.moduleConfigService = a, this.http = h, this.moduleConfig$ = this.moduleConfigService.loadConfigurations()
                }

                getFusingRequest(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(({fusingHost: h}) => this.http.get(`${h}/forge`, {params: {request_id: a}})))
                }

                getFusingLatestsRequests(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(({fusingHost: h}) => this.http.get(`${h}/forge/latest`, {params: {user_id: a}})))
                }

                fusingValidator(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(({fusingHost: h}) => this.http.post(`${h}/forge/validation`, a)))
                }

                fusingInitiator(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(({fusingHost: h}) => this.http.post(`${h}/forge`, a)))
                }

                fusingTokensPaid(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(({fusingHost: h}) => this.http.post(`${h}/forge/paid`, a)))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(Ye.L), E.LFG(N.eN))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var Ze = n(70655);
        let pt = (() => {
            class W {
                constructor(a, h) {
                    this.moduleConfigService = a, this.http = h, this.moduleConfig$ = this.moduleConfigService.loadConfigurations()
                }

                getRegisteredUserStarkKeys(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(({imxApiHost: h}) => this.http.get(`${h}/users/${a}`)))
                }

                getUserListOfBalance(a, h = "GODS") {
                    return this.moduleConfig$.pipe((0, Ce.w)(({imxApiHostV2: I}) => this.http.get(`${I}/balances/${a}`, {params: {symbols: h}})))
                }

                setLinkIframeOptions(a) {
                    this.linkIframeOptions = a
                }

                getLink() {
                    return this.moduleConfig$.pipe((0, ge.U)(({imxLinkHost: a}) => new p.rUS(a, this.linkIframeOptions)))
                }

                connect() {
                    return (0, Ze.mG)(this, void 0, void 0, function* () {
                        const {address: a} = yield this.getLink().pipe((0, ge.U)(h => h.setup({}))).toPromise();
                        return a.toLowerCase()
                    })
                }

                transfer(a, h) {
                    return (0, Ze.mG)(this, void 0, void 0, function* () {
                        return this.getLink().pipe((0, ge.U)(I => I.transfer([{
                            type: p.S9Z.ETH,
                            amount: `${a}`,
                            toAddress: h
                        }]))).toPromise()
                    })
                }

                transferByArray(a) {
                    return (0, Ze.mG)(this, void 0, void 0, function* () {
                        return this.getLink().pipe((0, ge.U)(h => h.transfer(a))).toPromise()
                    })
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(Ye.L), E.LFG(N.eN))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })(), rt = (() => {
            class W {
                constructor(a) {
                    this.imxService = a, this.dataStore = {godsInfo: null}, this._godsInfo$ = new De.X(null)
                }

                get godsInfo$() {
                    return this._godsInfo$.asObservable()
                }

                fetchGodsInfo(a) {
                    this.imxService.getUserListOfBalance(a).pipe((0, J.q)(1)).subscribe(h => {
                        const {result: [I]} = h;
                        this.emitGodsInfo(I)
                    }, () => {
                        this.emitGodsInfo()
                    })
                }

                emitGodsInfo(a = {symbol: "GODS", balance: "0", preparing_withdrawal: "0", withdrawable: "0"}) {
                    this.dataStore.godsInfo = a, this._godsInfo$.next(Object.assign({}, this.dataStore.godsInfo))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(pt))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })(), Fe = (() => {
            class W {
                constructor(a, h) {
                    this.http = a, this.moduleConfigService = h, this.moduleConfig$ = this.moduleConfigService.loadConfigurations()
                }

                get(a, h) {
                    return this.moduleConfig$.pipe((0, Ce.w)(I => this.http.get(`${I.guHost}${a}`, h)))
                }

                put(a, h) {
                    return this.moduleConfig$.pipe((0, Ce.w)(I => this.http.put(`${I.guHost}${a}`, h)))
                }

                post(a, h) {
                    return this.moduleConfig$.pipe((0, Ce.w)(I => this.http.post(`${I.guHost}${a}`, h)))
                }

                delete(a) {
                    return this.moduleConfig$.pipe((0, Ce.w)(h => this.http.delete(`${h.guHost}${a}`)))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(N.eN), E.LFG(Ye.L))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var Ie = n(90868);
        let We = (() => {
            class W {
                constructor(a, h, I) {
                    this.httpClient = a, this.moduleConfigService = h, this.tokenRefreshService = I
                }

                get(a, h, I) {
                    return this.moduleConfigService.loadConfigurations().pipe((0, Ce.w)(oe => this.tokenRefreshService.autoRefreshToken(this.httpClient.get(`${oe.guAuthHost}${a}`, {
                        headers: I,
                        params: h
                    }))))
                }

                put(a, h, I, oe) {
                    return this.moduleConfigService.loadConfigurations().pipe((0, Ce.w)(Pe => this.tokenRefreshService.autoRefreshToken(this.httpClient.put(`${Pe.guAuthHost}${a}`, h, {
                        headers: oe,
                        params: I
                    }))))
                }

                post(a, h, I) {
                    return this.moduleConfigService.loadConfigurations().pipe((0, Ce.w)(oe => this.tokenRefreshService.autoRefreshToken(this.httpClient.post(`${oe.guAuthHost}${a}`, h, {headers: I}))))
                }

                delete(a) {
                    return this.moduleConfigService.loadConfigurations().pipe((0, Ce.w)(h => this.tokenRefreshService.autoRefreshToken(this.httpClient.delete(`${h.guAuthHost}${a}`))))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(N.eN), E.LFG(Ye.L), E.LFG(Ie.$))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac, providedIn: "root"}), W
        })(), Me = (() => {
            class W {
                constructor(a, h, I) {
                    this.http = a, this.dds = h, this.authService = I, this._downloadUrl$ = new De.X(null)
                }

                get downloadUrl$() {
                    return this._downloadUrl$.asObservable()
                }

                fetchLauncherURL() {
                    return this.fetchLauncherURLAsync().pipe((0, J.q)(1)).subscribe(a => {
                        this.downloadUrl = a, this._downloadUrl$.next(a)
                    })
                }

                fetchLauncherURLAsync() {
                    const a = this.dds.getDeviceInfo(), h = this.authService.getUserId();
                    return "mac" !== a.os.toLowerCase() && "windows" !== a.os.toLowerCase() ? (0, pe._)("linux") : this.http.get(`https://util.apollo.gg/launcher?os=${a.os}&user_id=${h}`)
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(N.eN), E.LFG(s.x0), E.LFG(u.mI))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        var Oe = n(29840), Qe = n(78812);
        let gt = (() => {
            class W {
                constructor(a) {
                    this.authHost = a
                }

                getUserReferralsStatus(a) {
                    return this.authHost.get(`/campaign/${a}/referral`)
                }

                getReferralCode(a) {
                    return this.authHost.get(`/account/${a}/code/referral`)
                }

                createReferralCode(a) {
                    return this.authHost.post(`/account/${a}/code/referral`, {}).pipe((0, Ce.w)(h => this.getReferralCode(a)), (0, re.K)(h => {
                        if ("already created" === h.error.error) return this.getReferralCode(a)
                    }))
                }

                updatePayoutAddress(a, h) {
                    return this.authHost.put(`/account/${a}/code/referral`, {referral_payout_address: h})
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(ct))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac, providedIn: "root"}), W
        })();
        var q = n(19444);
        let de = (() => {
            class W {
                constructor(a, h, I) {
                    this.environment = a, this.authService = h, this.moduleConfigService = I, this.RETRY_SECONDS = 4e3, this.PING_PONG_INTERVAL_DURATION = 6e3, this.MAX_UNANSWERED_PING_COUNT = 2, this.unsubscribe = new te.xQ, this.connections = {}, this._connectionEstablished$ = new te.xQ, this.moduleConfigService.loadConfigurations().subscribe(oe => {
                        this.socketEndpoints = {
                            marketplaceCart: Pe => `${oe.marketplaceSocketBaseURL}/${Pe}/socket`,
                            chatAndFriends: Pe => `${oe.chatAndFriendsSocketBaseUrl}/${Pe}/chat`,
                            forge: Pe => `${oe.marketplaceSocketBaseURL}/${Pe}/socket`
                        }
                    })
                }

                get connectionEstablished$() {
                    return this._connectionEstablished$.asObservable()
                }

                connect({socketName: a, url: h}) {
                    return new Promise((I, oe) => {
                        console.log("SOCKET CONNECTING: ", a), this.connections[a] = this.createConnection(h), this.connectListeners(a, I, oe)
                    })
                }

                getOpenedConnection(a) {
                    if (this.connections[a] && this.connections[a].isAlive) return this.connections[a]
                }

                ngOnDestroy() {
                    this.disconnectAllSockets(), this.unsubscribe.next(), this.unsubscribe.complete()
                }

                onConnect(a, h) {
                    console.log("SOCKET CONNECTED:", h), this.connections[h].isAlive = !0, this.checkToStartPingPongInterval(), this.killReconnectTimer(h)
                }

                onClose(a, h) {
                    console.log("SOCKET CLOSED:", h, a), this.connections[h].isAlive = !1, a.wasClean || this.reconnectSocket(h)
                }

                onError(a, h) {
                    console.log("SOCKET ERRORED:", h, a), this.connections[h].isAlive = !1, console.log("tokenIsExpired: ", this.authService.tokenIsExpired()), this.authService.tokenIsExpired() ? this.authService.refreshToken().pipe((0, J.q)(1)).subscribe(() => this.reconnectSocket(h)) : this.reconnectSocket(h)
                }

                onMessage(a, h) {
                    const I = JSON.parse(a.data);
                    console.log("socket onMessage!", h, I), "HEARTBEAT_PONG" === I.text ? this.onPongMessage(h, I) : this.connections[h].messages.next(I)
                }

                connectListeners(a, h, I) {
                    const oe = this.connections[a];
                    oe.eventHandlers.open = Pe => {
                        this.onConnect(Pe, a), h && h(oe.messages)
                    }, oe.eventHandlers.error = Pe => {
                        this.onError(Pe, a), I && I(oe.messages)
                    }, oe.eventHandlers.close = Pe => {
                        this.onClose(Pe, a)
                    }, oe.eventHandlers.message = Pe => {
                        this.onMessage(Pe, a)
                    }, oe.socket.addEventListener("open", oe.eventHandlers.open), oe.socket.addEventListener("close", oe.eventHandlers.close), oe.socket.addEventListener("error", oe.eventHandlers.error), oe.socket.addEventListener("message", oe.eventHandlers.message)
                }

                disconnectListeners(a) {
                    const h = this.connections[a];
                    h.socket.removeEventListener("open", h.eventHandlers.open), h.socket.removeEventListener("close", h.eventHandlers.close), h.socket.removeEventListener("error", h.eventHandlers.error), h.socket.removeEventListener("message", h.eventHandlers.message)
                }

                checkToStartPingPongInterval() {
                    this.pingPongInterval || (this.pingPongInterval = window.setInterval(() => {
                        console.log("PING PONG INTERVAL FIRING"), Object.keys(this.connections).forEach(a => this.checkPingList(a))
                    }, this.PING_PONG_INTERVAL_DURATION))
                }

                killPingPongInterval() {
                    clearInterval(this.pingPongInterval), this.pingPongInterval = null
                }

                killReconnectTimer(a) {
                    clearTimeout(this.connections[a].reconnectTimer), this.connections[a].reconnectTimer = null
                }

                killAllReconnectTimers() {
                    Object.keys(this.connections).forEach(a => this.killReconnectTimer(a))
                }

                checkToKillPingPongInterval() {
                    0 === Object.keys(this.connections).length ? this.killPingPongInterval() : Object.keys(this.connections).find(h => this.connections[h].isAlive) || this.killPingPongInterval()
                }

                createConnection(a) {
                    const h = "desktop" === this.environment.clientType ? window.bridge.authAccess : this.authService.getAuthToken().access;
                    return {
                        url: a,
                        messages: new te.xQ,
                        socket: new WebSocket(`${a}?token=${h}`),
                        pingList: [],
                        isAlive: !1,
                        reconnectTimer: null,
                        disconnectPromise: null,
                        eventHandlers: {
                            open: () => {
                            }, close: () => {
                            }, error: () => {
                            }, message: () => {
                            }
                        }
                    }
                }

                reconnectSocket(a) {
                    const h = this.connections[a], I = () => {
                        const oe = this.createConnection(h.url);
                        this.connections[a].isAlive = oe.isAlive, this.connections[a].pingList = oe.pingList, this.connections[a].socket = oe.socket, this.connections[a].url = oe.url, this.connections[a].eventHandlers = oe.eventHandlers, this.connectListeners(a)
                    };
                    switch (this.killReconnectTimer(a), this.checkToKillPingPongInterval(), h.socket.readyState) {
                        case WebSocket.CONNECTING:
                        case WebSocket.CLOSING:
                            console.log("SKIPPING RECONNECT TIMER:", a, "connection ready state:", h.socket.readyState);
                            break;
                        case WebSocket.OPEN:
                            h.disconnectPromise = this.disconnect({
                                socketName: a,
                                cleanup: !1
                            }), h.reconnectTimer = window.setTimeout(() => {
                                h.disconnectPromise.then(() => {
                                    console.log("SOCKET DISCONNECTED, NOW RECONNECTING SOCKET"), I()
                                })
                            }, this.RETRY_SECONDS);
                            break;
                        case WebSocket.CLOSED:
                            h.reconnectTimer = window.setTimeout(() => {
                                I()
                            }, this.RETRY_SECONDS)
                    }
                }

                sendMessage(a, h) {
                    this.connections[a] && this.connections[a].socket.send(JSON.stringify(h))
                }

                sendPing(a) {
                    console.log("SOCKET PING:", a);
                    const h = {text: "HEARTBEAT_PING", user_id: this.authService.getUserId(), msg_id: (0, q.v4)()};
                    this.connections[a].pingList.push(h), this.sendMessage(a, h)
                }

                onPongMessage(a, h) {
                    console.log("SOCKET PONG:", a);
                    const I = this.connections[a], oe = I.pingList.findIndex(Pe => Pe.msg_id === h.msg_id);
                    -1 !== oe && I.pingList.splice(oe, 1)
                }

                checkPingList(a) {
                    this.connections[a].pingList.length >= this.MAX_UNANSWERED_PING_COUNT ? this.reconnectSocket(a) : this.sendPing(a)
                }

                disconnect({socketName: a, cleanup: h = !0}) {
                    const I = this.connections[a], oe = () => {
                        I && this.disconnectListeners(a), h && delete this.connections[a]
                    };
                    return new Promise(Pe => {
                        if (!I) return this.checkToKillPingPongInterval(), oe(), Pe();
                        this.killReconnectTimer(a), I.isAlive ? (I.socket.addEventListener("close", () => {
                            oe(), this.checkToKillPingPongInterval(), Pe()
                        }), I.socket.close()) : (console.log("SOCKET IS IN A TRANSITION STATE, BUT TRY AND CLOSE ANYWAY"), I.socket && I.socket.close(), oe(), Pe())
                    })
                }

                disconnectAllSockets() {
                    return this.killAllReconnectTimers(), Promise.all(Object.keys(this.connections).map(a => this.disconnect({socketName: a})))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(u.Ho), E.LFG(u.mI), E.LFG(Ye.L))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac, providedIn: "root"}), W
        })();
        var Se = n(2994);
        let Ne = (() => {
            class W {
                constructor(a, h, I, oe) {
                    this.gameApiService = a, this.authService = h, this.cardsService = I, this.environment = oe, this.storeItems = [], this.dataStore = {userStarsTotal: 0}, this._userStarTotal$ = new De.X(0), console.log("@cerberus/StarService constructor")
                }

                get userStarTotal$() {
                    return this._userStarTotal$.asObservable()
                }

                fetchUserStarsRewards(a) {
                    return this.gameApiService.get(`/game/${a}/rewards/${this.authService.getUserId()}`)
                }

                fetchUserStarsTotal() {
                    const a = this.authService.getUserId();
                    !a || this.gameApiService.get(`/user/${a}/stars`).pipe((0, J.q)(1)).subscribe(h => {
                        this.dataStore.userStarsTotal = h, this._userStarTotal$.next(this.dataStore.userStarsTotal)
                    }, h => {
                        this.dataStore.userStarsTotal = 0, this._userStarTotal$.next(this.dataStore.userStarsTotal)
                    })
                }

                purchaseItem$(a, h, I = !0) {
                    return this.authService.fetchSession().pipe((0, J.q)(1), (0, Te.VS)(oe => this.gameApiService.post(`/user/${this.authService.getUserId()}/shop?session=${oe}`, {asset_group: a})), (0, re.K)(oe => 401 === oe.status && I ? this.authService.refreshToken().pipe((0, Te.VS)(Pe => this.purchaseItem$(a, h, !1))) : (0, r.of)(oe)), (0, Se.b)(oe => {
                        (!oe || !oe.error) && this.handlePurchaseSuccess()
                    }))
                }

                handlePurchaseSuccess() {
                    this.fetchUserStarsTotal(), "desktop" === this.environment.clientType && this.cardsService.fetchInventory()
                }

                addEpochTimestamp(a) {
                    return Object.assign(Object.assign({}, a), {
                        start_timestamp_epoch: new Date(a.start_timestamp).getTime(),
                        end_timestamp_epoch: new Date(a.end_timestamp).getTime()
                    })
                }

                getScreenOrder(a) {
                    const I = this.storeItems.filter(oe => this.isCurrentItem(oe)).indexOf(a);
                    return Object.assign(Object.assign({}, a), {screen_order: I})
                }

                isCurrentItem(a) {
                    const h = (new Date).getTime();
                    return a.end_timestamp_epoch > h && a.start_timestamp_epoch < h
                }

                fetchStarStoreItems$() {
                    return this.gameApiService.get(`/user/${this.authService.getUserId()}/shop`).pipe((0, J.q)(1), (0, ge.U)(a => a.map(h => this.addEpochTimestamp(h))), (0, Se.b)(a => this.storeItems = a))
                }
            }

            return W.\u0275fac = function (a) {
                return new (a || W)(E.LFG(ie.F), E.LFG(u.mI), E.LFG(ut.d), E.LFG(u.Ho))
            }, W.\u0275prov = E.Yz7({token: W, factory: W.\u0275fac}), W
        })();
        const dt = (W, j) => () => Promise.all([W.loadConfigurations().toPromise(), j.waitUntilReady()]);
        let it = (() => {
            class W {
            }

            return W.\u0275fac = function (a) {
                return new (a || W)
            }, W.\u0275mod = E.oAB({type: W}), W.\u0275inj = E.cJS({
                providers: [Ye.L, {
                    provide: u.Hd,
                    deps: [u.Ho],
                    useFactory: j => (0, y.j2)(j.launchDarklyKey, {anonymous: !0, key: "anonymous"})
                }, {
                    provide: E.ip1,
                    useFactory: dt,
                    multi: !0,
                    deps: [Ye.L, u.Hd]
                }, we, Be, ct, qe.a, xe, Ct, B, rt, Fe, We, pt, Me, ne, Oe._, de, Ne, Ie.$], imports: [[O.ez]]
            }), W
        })()
    }, 69439: (ee, R, n) => {
        "use strict";
        n.d(R, {d: () => O});
        var p = n(8929), r = n(591), m = n(36053), e = n(7625), g = n(92198), v = n(75613), i = n(24850), t = n(87545),
            o = n(72986), C = n(2994), f = n(27221), P = n(73307), w = n(52886), k = n(1025), F = n(43834),
            _ = n(29840), T = n(90868), y = n(5e3);
        let O = (() => {
            class E {
                constructor(x, s, Z, X, me, ue) {
                    this.environment = x, this.authService = s, this.gameApiService = Z, this.marketplaceApiService = X, this.tokenRefreshService = me, this.featureFlagsService = ue, this.unsubscribe = new p.xQ, this.dataStore = {
                        protoCards: new Map,
                        inventory: {},
                        inventoryCards: [],
                        qualityCounts: new Map,
                        newInventoryCardCount: 0
                    }, this._protoCards = new r.X(new Map), this._inventory = new r.X({}), this._qualityCounts = new r.X(new Map), this._inventoryCards = new r.X([]), this._newInventoryCardCount = new r.X(0), this.watchForLogout(), console.log("@Cerberus/CardsService constructor")
                }

                watchForLogout() {
                    "desktop" === this.environment.clientType && this.authService.account$.pipe((0, e.R)(this.unsubscribe), (0, g.h)(x => null === x)).subscribe(x => {
                        this.dataStore.inventory = {}, this._inventory.next(Object.assign({}, this.dataStore).inventory), this.dataStore.qualityCounts = new Map, this._qualityCounts.next(Object.assign({}, this.dataStore).qualityCounts), this.dataStore.inventoryCards = [], this._inventoryCards.next(Object.assign({}, this.dataStore).inventoryCards), this.dataStore.newInventoryCardCount = 0, this._newInventoryCardCount.next(Object.assign({}, this.dataStore).newInventoryCardCount)
                    })
                }

                get protoCards$() {
                    return this._protoCards.asObservable()
                }

                get inventory$() {
                    return this._inventory.asObservable()
                }

                get qualityCounts$() {
                    return this._qualityCounts.asObservable()
                }

                get inventoryCards$() {
                    return this._inventoryCards.asObservable()
                }

                get newInventoryCardCount$() {
                    return this._newInventoryCardCount.asObservable()
                }

                getProtoCard(x) {
                    return this.protoCards$.pipe((0, v.sE)(s => s.has(x)), (0, i.U)(s => s.get(x)))
                }

                fetchProtoCardsApi() {
                    const x = this.authService.getUserId();
                    return this.authService.fetchSession().pipe((0, t.w)(s => this.gameApiService.get(`/user/${x || 1}/proto?format=flat${s ? `&session=${s}` : ""}`)), (0, o.q)(1), (0, i.U)(s => this.dictionaryToMap(s)), (0, i.U)(s => (s.forEach((Z, X) => {
                        Z.proto = X
                    }), s)))
                }

                getProtoCards$() {
                    return this.tokenRefreshService.autoRefreshToken(this.fetchProtoCardsApi())
                }

                fetchProtoCards() {
                    this.getProtoCards$().subscribe(x => {
                        this.handleProtoCardsSuccess(x)
                    })
                }

                handleProtoCardsSuccess(x) {
                    this.dataStore.protoCards = x, this._protoCards.next(Object.assign({}, this.dataStore).protoCards)
                }

                fetchInventory() {
                    const x = this.authService.getUserId();
                    return this.fetchInventoryCardsMap(x).pipe((0, o.q)(1), (0, C.b)(s => {
                        this.dataStore.inventory = s, this._inventory.next(Object.assign({}, this.dataStore).inventory)
                    })).subscribe()
                }

                addCardsToInventory(x) {
                    let s = 0;
                    Object.entries(x).forEach(([Z, X]) => {
                        if (this.dataStore.inventory[Z]) {
                            const me = X.filter(ue => !this.dataStore.inventory[Z].some(we => we.id === ue.id));
                            this.dataStore.inventory[Z] = [...this.dataStore.inventory[Z], ...me], s += me.length
                        } else this.dataStore.inventory[Z] = X, s += X.length
                    }), this._inventory.next(Object.assign({}, this.dataStore.inventory)), this.dataStore.newInventoryCardCount = s, this._newInventoryCardCount.next(s)
                }

                fetchQualityCount() {
                    return this.gameApiService.get("/quality_count").pipe((0, o.q)(1), (0, C.b)(x => {
                        this.dataStore.qualityCounts = this.dictionaryToMap(x), this._qualityCounts.next(Object.assign({}, this.dataStore).qualityCounts)
                    }), (0, f.K)(x => x)).subscribe()
                }

                loadInventoryCards() {
                    return (0, m.aj)([this.protoCards$, this.inventory$]).pipe((0, C.b)(([x, s]) => {
                        this.dataStore.inventoryCards = this.convertToCards(x, s), this._inventoryCards.next(Object.assign({}, this.dataStore).inventoryCards)
                    }))
                }

                convertToCards(x, s) {
                    const Z = [];
                    return x.forEach((X, me) => {
                        if (s[me]) for (const ue of s[me]) {
                            const we = new w.Zb(ue.id, me, ue.q, X, ue.status);
                            Z.push(we)
                        }
                    }), Z
                }

                forgeUpdate(x, s, Z) {
                    this.forgeRemoveIds(x, s), this._inventory.next(Object.assign({}, this.dataStore.inventory)), this.dataStore.newInventoryCardCount = 1, this._newInventoryCardCount.next(1)
                }

                forgeRemoveIds(x, s) {
                    this.dataStore.inventory[s] = this.dataStore.inventory[s].filter(Z => !x.some(X => Z.id === X))
                }

                setNewInventoryCardCount(x) {
                    this.dataStore.newInventoryCardCount = x, this._newInventoryCardCount.next(x)
                }

                dictionaryToMap(x) {
                    return Object.entries(x).map(([s, Z]) => ({
                        key: s,
                        val: Z
                    })).reduce((s, Z) => s.set(Number(Z.key), Z.val), new Map)
                }

                fetchInventoryCardsMapV2(x, s) {
                    const Z = s ? `&owner=${s}` : "";
                    return this.marketplaceApiService.get(`/v2/asset?type=card${Z}${Z ? "" : `&user_id=${x}`}`)
                }

                inventoryCardsMapV2ToV1(x) {
                    const s = {};
                    return Object.entries(x.protos).forEach(([Z, X]) => {
                        const me = X.assets.map(ue => ({
                            id: ue.id,
                            q: ue.properties.quality,
                            status: ue.minting_status
                        }));
                        s[Z] = me
                    }), s
                }

                fetchInventoryCardsMap(x) {
                    return this.gameApiService.get(`/user/${x}/card?caller=${"desktop" === this.environment.clientType ? "client" : "website"}`)
                }

                checkToRefreshInventory() {
                    this.featureFlagsService.get(k.v.refetchInventoryEnabled).pipe((0, o.q)(1)).subscribe(x => {
                        x && this.fetchInventory()
                    })
                }
            }

            return E.\u0275fac = function (x) {
                return new (x || E)(y.LFG(P.Ho), y.LFG(P.mI), y.LFG(F.F), y.LFG(_._), y.LFG(T.$), y.LFG(k.a))
            }, E.\u0275prov = y.Yz7({token: E, factory: E.\u0275fac, providedIn: "root"}), E
        })()
    }, 1025: (ee, R, n) => {
        "use strict";
        n.d(R, {v: () => i, a: () => o});
        var p = n(36053), r = n(21086), m = n(591), e = n(87545), g = n(73307), v = n(5e3), i = (() => {
            return (C = i || (i = {})).buyPagePaused = "buy-page-paused", C.claimAirdropButtonEnabled = "temp-claim-airdrop-button-enabled", C.claimAirdropEnabled = "temp-claim-airdrop-enabled", C.claimFluxEnabled = "temp-claim-flux-enabled", C.coinbasePaused = "temp-coinbase-paused", C.controllableBannerData = "controllable-banner-data", C.deckCodesEnabled = "temp-deck-codes-enabled", C.defaultWalletEnabled = "temp-default-wallet-enabled", C.forgeEnabled = "temp-forge-enabled", C.fusingNextStepEnabled = "temp-fusing-next-step-enabled", C.godsTokenBlocked = "gods-token-blocked", C.outageBannerEnabled = "temp-outage-banner-enabled", C.rankedWeekendCancelledBannerEnabled = "temp-ranked-weekend-cancelled-banner-enabled", C.referralsEnabled = "temp-referrals-enabled", C.refetchInventoryEnabled = "refetch-inventory-enabled", C.showControllableBanner = "show-controllable-banner", C.spgpBannerEnabled = "temp-spgp-banner-enabled", C.spgpEnabled = "temp-spgp-enabled", C.spgpPaused = "temp-spgp-paused", C.stakingEnabled = "temp-staking-enabled", C.tokenEnabled = "temp-token-enabled", C.x2BuyPageEnabled = "temp-x-2-buy-page-enabled", C.newEnvironmentMarketplaceLegacyApi = "temp-new-env-marketplace-legacy-api-enabled", C.newEnvironmentGameLegacyApi = "temp-new-env-game-legacy-api-enabled", C.newEnvironmentAuthLegacyApi = "temp-new-env-auth-legacy-api-enabled", C.noWalletWarningRankedGame = "temp-no-wallet-warning-ranked-game", C.playToEarnEnabled = "temp-play-to-earn-enabled", i;
            var C
        })();
        const t = Object.seal({
            [i.buyPagePaused]: !1,
            [i.claimAirdropButtonEnabled]: !1,
            [i.claimAirdropEnabled]: !1,
            [i.claimFluxEnabled]: !1,
            [i.coinbasePaused]: !1,
            [i.controllableBannerData]: {},
            [i.deckCodesEnabled]: !1,
            [i.defaultWalletEnabled]: !1,
            [i.fusingNextStepEnabled]: !1,
            [i.godsTokenBlocked]: !0,
            [i.outageBannerEnabled]: !1,
            [i.rankedWeekendCancelledBannerEnabled]: !1,
            [i.referralsEnabled]: !1,
            [i.refetchInventoryEnabled]: !1,
            [i.showControllableBanner]: !1,
            [i.spgpBannerEnabled]: !1,
            [i.spgpEnabled]: !1,
            [i.spgpPaused]: !1,
            [i.stakingEnabled]: !1,
            [i.tokenEnabled]: !1,
            [i.x2BuyPageEnabled]: !1,
            [i.newEnvironmentMarketplaceLegacyApi]: !1,
            [i.newEnvironmentGameLegacyApi]: !1,
            [i.newEnvironmentAuthLegacyApi]: !1,
            [i.noWalletWarningRankedGame]: !1,
            [i.playToEarnEnabled]: !1
        });
        let o = (() => {
            class C {
                constructor(P, w) {
                    this.ldClient = P, this.environment = w, this.flags = {}, this.flagChange = {}, this.flags = Object.assign({}, t), this.ldClient.on("change", k => {
                        for (const F in k) this.set(F, k[F].current)
                    }), this.ldClient.waitUntilReady().then(() => {
                        const k = this.ldClient.allFlags();
                        for (const F in k) this.set(F, k[F])
                    })
                }

                getMany(P) {
                    const w = [];
                    return P.forEach(k => {
                        w.push(this.get(k))
                    }), (0, p.aj)(w).pipe((0, e.w)(k => {
                        const F = {};
                        return P.forEach((_, T) => {
                            F[_] = k[T]
                        }), (0, r.of)(F)
                    }))
                }

                get(P) {
                    return this.flagChange[P] = this.flagChange[P] || new m.X(this.flags[P]), this.flagChange[P].asObservable()
                }

                setContext(P) {
                    this.ldClient.identify({
                        key: !0 === P.anonymous ? "anonymous" : P.userID,
                        email: P.email,
                        name: P.name,
                        anonymous: P.anonymous,
                        country: P.country,
                        custom: {clientType: this.environment.clientType}
                    })
                }

                set(P, w) {
                    this.flags[P] = w, this.flagChange[P] && this.flagChange[P].next(w)
                }
            }

            return C.\u0275fac = function (P) {
                return new (P || C)(v.LFG(g.Hd), v.LFG(g.Ho))
            }, C.\u0275prov = v.Yz7({token: C, factory: C.\u0275fac}), C
        })()
    }, 43834: (ee, R, n) => {
        "use strict";
        n.d(R, {F: () => C});
        var p = n(8929), r = n(87168), m = n(24850), e = n(7625), g = n(87545), v = n(1025), i = n(77535), t = n(5e3),
            o = n(40520);
        let C = (() => {
            class f {
                constructor(w, k, F) {
                    this.http = w, this.moduleConfigService = k, this.featureFlagService = F, this.destroyed$ = new p.xQ, this.gameEndpoint$ = this.moduleConfigService.loadConfigurations().pipe((0, r.M)(this.featureFlagService.get(v.v.newEnvironmentGameLegacyApi)), (0, m.U)(([_, T]) => T ? _.legacyGameHost : _.gameHost), (0, e.R)(this.destroyed$))
                }

                ngOnDestroy() {
                    this.destroyed$.next(), this.destroyed$.complete()
                }

                get(w, k) {
                    return this.gameEndpoint$.pipe((0, g.w)(F => this.http.get(F + w, k)))
                }

                put(w, k) {
                    return this.gameEndpoint$.pipe((0, g.w)(F => this.http.put(F + w, k)))
                }

                post(w, k) {
                    return this.gameEndpoint$.pipe((0, g.w)(F => this.http.post(F + w, k)))
                }

                delete(w) {
                    return this.gameEndpoint$.pipe((0, g.w)(k => this.http.delete(k + w)))
                }
            }

            return f.\u0275fac = function (w) {
                return new (w || f)(t.LFG(o.eN), t.LFG(i.L), t.LFG(v.a))
            }, f.\u0275prov = t.Yz7({token: f, factory: f.\u0275fac, providedIn: "root"}), f
        })()
    }, 29840: (ee, R, n) => {
        "use strict";
        n.d(R, {_: () => C});
        var p = n(8929), r = n(87168), m = n(24850), e = n(7625), g = n(87545), v = n(1025), i = n(77535), t = n(5e3),
            o = n(40520);
        let C = (() => {
            class f {
                constructor(w, k, F) {
                    this.http = w, this.moduleConfigService = k, this.featureFlagService = F, this.destroyed$ = new p.xQ, this.marketplaceEndpoint$ = this.moduleConfigService.loadConfigurations().pipe((0, r.M)(this.featureFlagService.get(v.v.newEnvironmentMarketplaceLegacyApi)), (0, m.U)(([_, T]) => T ? _.legacyMarketplaceHost : _.marketplaceHost), (0, e.R)(this.destroyed$))
                }

                ngOnDestroy() {
                    this.destroyed$.next(), this.destroyed$.complete()
                }

                get(w, k) {
                    return this.marketplaceEndpoint$.pipe((0, g.w)(F => this.http.get(`${F}${w}`, k)))
                }

                put(w, k) {
                    return this.marketplaceEndpoint$.pipe((0, g.w)(F => this.http.put(`${F}${w}`, k)))
                }

                post(w, k) {
                    return this.marketplaceEndpoint$.pipe((0, g.w)(F => this.http.post(`${F}${w}`, k)))
                }

                delete(w) {
                    return this.marketplaceEndpoint$.pipe((0, g.w)(k => this.http.delete(`${k}${w}`)))
                }
            }

            return f.\u0275fac = function (w) {
                return new (w || f)(t.LFG(o.eN), t.LFG(i.L), t.LFG(v.a))
            }, f.\u0275prov = t.Yz7({token: f, factory: f.\u0275fac}), f
        })()
    }, 77535: (ee, R, n) => {
        "use strict";
        n.d(R, {L: () => v});
        var p = n(2994), r = n(5154), m = n(73307), e = n(5e3), g = n(40520);
        let v = (() => {
            class i {
                constructor(o, C, f) {
                    this.http = o, this.environment = C, this.storageService = f, this.configURL = this.environment.appConfig, "desktop" === this.environment.clientType && this.useDevApis() && (this.configURL = this.environment.appConfigDev)
                }

                useDevApis() {
                    const o = this.storageService.get(["game", "1", "branch"]), C = RegExp(/beta/);
                    return o && !C.test(o)
                }

                loadConfigurations() {
                    return this.configuration$ || (this.configuration$ = this.http.get(`${this.configURL}`, {headers: {"cache-control": ["no-cache", "no-store"]}}).pipe((0, p.b)(o => this.configData = o), (0, r.d)(1))), this.configuration$
                }

                getConfig() {
                    return this.configData ? this.configData : null
                }
            }

            return i.\u0275fac = function (o) {
                return new (o || i)(e.LFG(g.eN), e.LFG(m.Ho), e.LFG(m.qy))
            }, i.\u0275prov = e.Yz7({token: i, factory: i.\u0275fac}), i
        })()
    }, 78812: (ee, R, n) => {
        "use strict";
        n.d(R, {f: () => i});
        var p = n(1025), r = n(8929), m = n(591), e = n(7625), g = n(49219), v = n(5e3);
        let i = (() => {
            class t {
                constructor(C) {
                    this.featureFlagService = C, this.dataStore = {
                        navigationItems: null,
                        userMenuItems: null,
                        userEthAccount: null,
                        activeHeaderAlertBar: null,
                        headerAreaHeight: g.standardHeaderHeight
                    }, this.unsubscribe = new r.xQ, this._navigationItems$ = new m.X(null), this._userMenuItems$ = new m.X(null), this._activeHeaderAlertBar$ = new m.X(null), this.checkFeatureFlagToEnableAlertHeaderBar()
                }

                get navigationItems$() {
                    return this._navigationItems$.asObservable()
                }

                get userMenuItems$() {
                    return this._userMenuItems$.asObservable()
                }

                get activeHeaderAlertBar$() {
                    return this._activeHeaderAlertBar$.asObservable()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                storeNavigationItems(C) {
                    this.dataStore.navigationItems = C, this.emitNavItems(this.dataStore.navigationItems)
                }

                storeUserMenuItems(C) {
                    this.dataStore.userMenuItems = C, this.emitUserMenuItems(this.dataStore.userMenuItems)
                }

                emitNavItems(C) {
                    this._navigationItems$.next(Object.assign({}, C))
                }

                emitUserMenuItems(C) {
                    this._userMenuItems$.next(Object.assign({}, C))
                }

                toggleNotifyCollections(C) {
                    const f = Object.assign({}, this.dataStore.navigationItems);
                    f.collections.showNotificationBubble = !!C, this.emitNavItems(f)
                }

                toggleNotifyOpenPacks(C) {
                    const f = Object.assign({}, this.dataStore.navigationItems);
                    f.openPacks.showNotificationBubble = !!C, this.emitNavItems(f)
                }

                toggleNotifyMarketSell(C) {
                    const f = Object.assign({}, this.dataStore.navigationItems);
                    f.market.children.sell.showNotificationBubble = !!C, this.emitNavItems(f)
                }

                toggleNotifyMarketBuy(C) {
                    const f = Object.assign({}, this.dataStore.navigationItems);
                    f.market.children.buy.showNotificationBubble = !!C, this.emitNavItems(f)
                }

                connectedWalletState() {
                    const C = this.dataStore.userMenuItems;
                    C.connectWallet.visible = !1, C.disconnectWallet.visible = !0, this.emitUserMenuItems(C)
                }

                disconnectedWalletState() {
                    const C = this.dataStore.userMenuItems;
                    C.connectWallet.visible = !0, C.disconnectWallet.visible = !1, this.emitUserMenuItems(C)
                }

                checkFeatureFlagToEnableAlertHeaderBar() {
                    this.featureFlagService.get(p.v.spgpBannerEnabled).pipe((0, e.R)(this.unsubscribe)).subscribe(C => {
                        this.dataStore.activeHeaderAlertBar = C || null, this._activeHeaderAlertBar$.next(this.dataStore.activeHeaderAlertBar)
                    })
                }
            }

            return t.\u0275fac = function (C) {
                return new (C || t)(v.LFG(p.a))
            }, t.\u0275prov = v.Yz7({token: t, factory: t.\u0275fac, providedIn: "root"}), t
        })()
    }, 90868: (ee, R, n) => {
        "use strict";
        n.d(R, {$: () => i});
        var p = n(73307), r = n(61737), m = n(27221), e = n(72986), g = n(61709), v = n(5e3);
        let i = (() => {
            class t {
                constructor(C) {
                    this.authService = C
                }

                autoRefreshToken(C, f = 1) {
                    return C.pipe((0, m.K)(P => 401 === P.status && f > 0 ? this.authService.refreshToken().pipe((0, e.q)(1), (0, g.zg)(() => this.autoRefreshToken(C, f - 1))) : (0, r._)(P)))
                }
            }

            return t.\u0275fac = function (C) {
                return new (C || t)(v.LFG(p.mI))
            }, t.\u0275prov = v.Yz7({token: t, factory: t.\u0275fac}), t
        })()
    }, 7203: (ee, R, n) => {
        "use strict";
        n.d(R, {np: () => t, Og: () => v, oS: () => i, Se: () => r, PW: () => g});
        const r = "X-Skip-Interceptor", g = ["diamond", "gold", "shadow", "meteorite", "plain"];
        var v = (() => {
            return (o = v || (v = {})).INITIATED = "initiated", o.FLUX_PAID = "flux_paid", o.CARDS_DELETED = "cards_deleted", o.TOKENS_PAID = "tokens_paid", o.VALIDATING_PAYMENT = "validating_payment", o.COMPLETED = "completed", v;
            var o
        })();
        const i = {
            [v.INITIATED]: "Pending",
            [v.FLUX_PAID]: "Pending",
            [v.CARDS_DELETED]: "Pending",
            [v.TOKENS_PAID]: "Pending",
            [v.VALIDATING_PAYMENT]: "Validating",
            [v.COMPLETED]: "completed"
        };
        var t = (() => {
            return (o = t || (t = {})).Development = "development", o.Staging = "staging", o.Production = "production", t;
            var o
        })()
    }, 98590: (ee, R, n) => {
        "use strict";
        n.d(R, {I: () => t});
        var p = n(67876), r = n(28510), m = n(5e3), e = n(69808), g = n(87745);

        function v(o, C) {
            if (1 & o && (m.TgZ(0, "gu-vertical-space", 7), m._UZ(1, "gu-icon", 8), m.qZA()), 2 & o) {
                const f = m.oxw();
                m.xp6(1), m.Q6J("fillColor", f.iconFillColor)("iconLigature", f.iconLigature)
            }
        }

        function i(o, C) {
            if (1 & o) {
                const f = m.EpF();
                m.ynx(0), m.TgZ(1, "gu-secondary-hex-button", 9), m.NdJ("click", function () {
                    return m.CHM(f), m.oxw().ctaClick()
                }), m.qZA(), m.BQk()
            }
            if (2 & o) {
                const f = m.oxw();
                m.xp6(1), m.Q6J("text", f.ctaText)
            }
        }

        let t = (() => {
            class o {
                constructor(f) {
                    this.activeModal = f, this.onCtaClick = p.Z
                }

                ctaClick() {
                    this.onCtaClick(), this.activeModal.close()
                }
            }

            return o.\u0275fac = function (f) {
                return new (f || o)(m.Y36(r.mX))
            }, o.\u0275cmp = m.Xpm({
                type: o,
                selectors: [["cerberus-alert-modal"]],
                inputs: {
                    title: "title",
                    text: "text",
                    iconLigature: "iconLigature",
                    iconFillColor: "iconFillColor",
                    ctaText: "ctaText",
                    onCtaClick: "onCtaClick"
                },
                decls: 10,
                vars: 7,
                consts: [["goldBorder", "top"], ["top", "4x-large", 4, "ngIf"], ["top", "large"], ["align", "center", "kind", "large", "fontWeight", "bold", "fillColor", "colors.light.100", 1, "heading"], ["align", "center", "kind", "large", "fillColor", "colors.light.100", 1, "text", 3, "innerHTML"], ["top", "2x-large", "bottom", "4x-large"], [4, "ngIf"], ["top", "4x-large"], [1, "alertIcon", 3, "fillColor", "iconLigature"], ["size", "large", 1, "cta", 3, "text", "click"]],
                template: function (f, P) {
                    1 & f && (m._UZ(0, "gu-modal-background", 0), m.YNc(1, v, 2, 2, "gu-vertical-space", 1), m.TgZ(2, "gu-vertical-space", 2), m.TgZ(3, "gu-paragraph-text", 3), m._uU(4), m.qZA(), m.qZA(), m.TgZ(5, "gu-vertical-space", 2), m._UZ(6, "gu-paragraph-text", 4), m.ALo(7, "safe"), m.qZA(), m.TgZ(8, "gu-vertical-space", 5), m.YNc(9, i, 2, 1, "ng-container", 6), m.qZA()), 2 & f && (m.xp6(1), m.Q6J("ngIf", P.iconLigature), m.xp6(3), m.hij(" ", P.title, " "), m.xp6(2), m.Q6J("innerHTML", m.xi3(7, 4, P.text, "html"), m.oJD), m.xp6(3), m.Q6J("ngIf", P.ctaText))
                },
                directives: [e.O5],
                pipes: [g.y],
                styles: ["[_nghost-%COMP%]{position:relative;display:flex;flex-direction:column;padding:0 60px;align-items:center;max-width:100vw;width:640px}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.alertIcon[_ngcontent-%COMP%]{font-size:80px}.heading[_ngcontent-%COMP%]{text-transform:uppercase}"]
            }), o
        })()
    }, 53161: (ee, R, n) => {
        "use strict";
        n.d(R, {j: () => r});
        var p = n(5e3);
        let r = (() => {
            class m {
            }

            return m.\u0275fac = function (g) {
                return new (g || m)
            }, m.\u0275mod = p.oAB({type: m}), m.\u0275inj = p.cJS({}), m
        })()
    }, 39765: (ee, R, n) => {
        "use strict";
        n.d(R, {w: () => i}), n(61377);
        var r = n(8929), m = n(7625), e = n(24850), g = n(73307), v = n(5e3);
        let i = (() => {
            class t {
                constructor(C, f, P) {
                    this.templateRef = C, this.viewContainer = f, this.featureFlagsService = P, this.unsubscribe = new r.xQ
                }

                set featureFlagIf(C) {
                    this.featureFlagsService.get(C).pipe((0, m.R)(this.unsubscribe), (0, e.U)(f => !!f)).subscribe(f => {
                        f ? this.viewContainer.createEmbeddedView(this.templateRef) : this.viewContainer.clear()
                    })
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }
            }

            return t.\u0275fac = function (C) {
                return new (C || t)(v.Y36(v.Rgc), v.Y36(v.s_b), v.Y36(g.B3))
            }, t.\u0275dir = v.lG2({
                type: t,
                selectors: [["", "featureFlagIf", ""]],
                inputs: {featureFlagIf: "featureFlagIf"}
            }), t
        })()
    }, 37371: (ee, R, n) => {
        "use strict";
        n.d(R, {M: () => y});
        var p = n(28510), m = (n(89534), n(70655)), e = n(32830), g = n(56418), v = n(38872), i = n(80102),
            t = n(26532), o = n(65281);

        class C extends e.oi {
            constructor() {
                super(...arguments), this.type = "none", this.promise = new Promise(E => {
                    this.finished = E
                })
            }

            static get styles() {
                return e.iv`
      :host {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        box-shadow: 0px 2px 16px rgba(0, 0, 0, 0.5);
      }

      .modal-dialog__panel {
        min-height: 240px;
        height: 100%;
        width: 520px;
        background: ${(0, t.asCssProp)(o.gradients.gunmetal.mirror("left"))};
        border: 2px solid ${(0, t.asCssProp)(o.colors.gunmetal[500])};
        display: flex;
        flex-direction: column;
        place-content: stretch center;
        place-items: center;
        padding: 40px;
        box-sizing: border-box;
      }

      ${(0, t.asCssProp)((0, t.fadeReveal)(":host .modal-dialog__panel", ":host(.open) .modal-dialog__panel", "100%", .3, 16))}

      .modal-dialog__border {
        height: 4px;
        display: block;
        position: absolute;
        width: calc(100% + 4px);
        left: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
        top: ${(0, t.asCssProp)((0, i.gridUnits)(-.5))};
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        background: ${(0, t.asCssProp)(o.gradients.gold.mirror("right"))};
      }

      .modal-dialog__border--type-info {
        background: ${(0, t.asCssProp)(o.gradients.gold.mirror("right"))};
      }

      .modal-dialog__border--type-error {
        background: linear-gradient(270deg, #d73333 0%, #ff8b01 50%, #d73333 100%);
      }

      .modal-dialog__border--type-success {
        background: ${(0, t.asCssProp)(o.gradients.apocyan.mirror("right"))};
      }

      .modal-dialog__icon {
        position: absolute;
        left: 50%;
        top: 0;
        color: white;
        width: 72px;
        height: 64px;
        transform: translate(-50%, -50%);
      }
    `
            }

            notifyState(E) {
                const u = {modal: this, closed: this.promise};
                "modalOpened" === E && (u.close = () => this.close()), this.dispatchEvent(new CustomEvent(E, {
                    detail: u,
                    bubbles: !0,
                    composed: !1
                }))
            }

            close() {
                return requestAnimationFrame(() => requestAnimationFrame(() => {
                    this.panel.addEventListener("transitionend", () => {
                        this.notifyState("modalClosed"), this.finished()
                    }), this.classList.remove("open")
                })), this.promise
            }

            firstUpdated(E) {
                super.firstUpdated(E), this.notifyState("modalOpened"), requestAnimationFrame(() => requestAnimationFrame(() => this.classList.add("open")))
            }

            renderIcon() {
                const E = {
                    info: e.YP`<path d="M53.4917 55.817C52.4717 55.613 51.8087 55.4218 51.5027 55.2433C51.0947 55.0138 50.8907 54.797 50.8907 54.593V39.5H49.125H46.875C46.875 39.5 44.316 39.4235 43.5 39.5L43.4702 41.3203C44.3117 41.4478 44.8217 41.5498 45.0002 41.6263C45.3317 41.6518 45.6122 41.8175 45.8417 42.1235C45.9692 42.3275 46.033 42.6462 46.033 43.0798V54.593C46.033 54.848 45.829 55.0648 45.421 55.2433C44.9365 55.4473 44.2862 55.6385 43.4702 55.817V57.5H53.4917V55.817ZM51.235 32.408C51.235 32.051 51.184 31.7578 51.082 31.5283C50.98 31.2988 50.776 31.082 50.47 30.878C50.2405 30.725 49.96 30.6103 49.6285 30.5337C49.297 30.4573 48.94 30.4063 48.5575 30.3807C48.0475 30.3552 47.6267 30.4062 47.2952 30.5337C47.0147 30.6357 46.6705 30.8398 46.2625 31.1458C45.9055 31.5028 45.6887 31.7833 45.6122 31.9872C45.4847 32.3442 45.3955 32.714 45.3445 33.0965C45.319 33.4025 45.3955 33.7085 45.574 34.0145C45.7015 34.244 45.9055 34.4608 46.186 34.6648C46.4665 34.8688 46.7597 34.9963 47.0657 35.0473C47.4737 35.1237 47.8052 35.1492 48.0602 35.1237C48.5192 35.1237 48.9272 35.06 49.2842 34.9325C49.6667 34.805 50.011 34.6265 50.317 34.397C50.6485 34.142 50.8907 33.8615 51.0437 33.5555C51.1712 33.275 51.235 32.8925 51.235 32.408Z" fill="#EBC98B"></path>`,
                    error: e.YP`<path fill-rule="evenodd" clip-rule="evenodd" d="M46.375 49.4999L43 31.4999H52L48.625 49.4999H46.375ZM45.1212 57.5037C45.7854 58.1679 46.5783 58.4999 47.5 58.4999C48.4217 58.4999 49.2146 58.1679 49.8788 57.5037C50.5429 56.8395 50.875 56.0466 50.875 55.1249C50.875 54.2032 50.5429 53.4103 49.8788 52.7462C49.2146 52.082 48.4217 51.7499 47.5 51.7499C46.5783 51.7499 45.7854 52.082 45.1212 52.7462C44.4571 53.4103 44.125 54.2032 44.125 55.1249C44.125 56.0466 44.4571 56.8395 45.1212 57.5037Z" fill="#FF8B01"></path>`,
                    success: e.YP`<path d="M43.3389 49.5082L37.1517 43.3211L34.5001 45.9727L43.3389 54.8115L59.2488 38.9016L56.5971 36.25L43.3389 49.5082Z" fill="#8BE1E0"></path>`
                };
                return E[this.type] ? e.YP`
      <svg width="95" height="80" viewBox="0 0 95 80" fill="none" xmlns="http://www.w3.org/2000/svg" class="modal-dialog__icon">
        <path d="M47.5 10.7472L82.3727 66H12.6273L47.5 10.7472Z" stroke="url(#${this.type}_gradient)" stroke-width="4" style="stroke-linecap: round; stroke-linejoin: round;" fill="#1D2F41" filter="url(#drop_shadow)"></path>
        ${E[this.type]}
        <defs>
          <filter id="drop_shadow" x="0.624023" y="0.747192" width="93.7518" height="79.2528" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
            <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
            <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></feColorMatrix>
            <feOffset dy="2"></feOffset>
            <feGaussianBlur stdDeviation="5"></feGaussianBlur>
            <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.85 0"></feColorMatrix>
            <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"></feBlend>
            <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"></feBlend>
          </filter>
          <linearGradient id="info_gradient" x1="9" y1="7" x2="9" y2="68" gradientUnits="userSpaceOnUse">
            <stop stop-color="#FFF2D8"></stop>
            <stop offset="0.5034" stop-color="#EBC98B"></stop>
            <stop offset="1" stop-color="#C6A052"></stop>
          </linearGradient>
          <linearGradient id="error_gradient" x1="47.6608" y1="90.0638" x2="47.6617" y2="7.01299" gradientUnits="userSpaceOnUse">
            <stop stop-color="#D73333"></stop>
            <stop offset="1" stop-color="#FF8B01"></stop>
          </linearGradient>
          <linearGradient id="success_gradient" x1="9" y1="7" x2="9" y2="68" gradientUnits="userSpaceOnUse">
            <stop stop-color="#AFFAED"></stop>
            <stop offset="0.5034" stop-color="#8BE1E0"></stop>
            <stop offset="1" stop-color="#54BBCD"></stop>
          </linearGradient>
        </defs>
      </svg>
    ` : e.dy``
            }

            render() {
                return e.dy`
      <div class="modal-dialog__panel" data-test-id="modal-dialog-panel">
        <div class="modal-dialog__border modal-dialog__border--type-${this.type}"></div>
        ${this.renderIcon()}
        <slot></slot>
      </div>
    `
            }
        }

        (0, m.gn)([(0, g.C)(), (0, m.w6)("design:type", Object)], C.prototype, "type", void 0), (0, m.gn)([(0, v.I)(".modal-dialog__panel"), (0, m.w6)("design:type", HTMLElement)], C.prototype, "panel", void 0), customElements.define("gu-modal-dialog", C), n(51256), n(11015);
        var w = n(5e3), k = n(69808), F = n(87745);

        function _(O, E) {
            if (1 & O) {
                const u = w.EpF();
                w.TgZ(0, "gu-hex-button", 8), w.NdJ("click", function () {
                    w.CHM(u);
                    const s = w.oxw();
                    return s.buttonClick(s.secondaryButton)
                }), w._uU(1), w.qZA()
            }
            if (2 & O) {
                const u = w.oxw();
                w.xp6(1), w.hij(" ", u.secondaryButton.text, " ")
            }
        }

        function T(O, E) {
            if (1 & O) {
                const u = w.EpF();
                w.TgZ(0, "gu-hex-button", 9), w.NdJ("click", function () {
                    w.CHM(u);
                    const s = w.oxw();
                    return s.buttonClick(s.primaryButton)
                }), w.ALo(1, "safe"), w.qZA()
            }
            if (2 & O) {
                const u = w.oxw();
                w.Q6J("innerHTML", w.xi3(1, 1, u.primaryButton.text, "html"), w.oJD)
            }
        }

        let y = (() => {
            class O {
                constructor(u) {
                    this.activeModal = u
                }

                buttonClick(u) {
                    u.onClick && "function" == typeof u.onClick && u.onClick(), u.closeOnClick && this.activeModal.close()
                }
            }

            return O.\u0275fac = function (u) {
                return new (u || O)(w.Y36(p.mX))
            }, O.\u0275cmp = w.Xpm({
                type: O,
                selectors: [["cerberus-modal-dialog-control"]],
                inputs: {
                    title: "title",
                    content: "content",
                    type: "type",
                    secondaryButton: "secondaryButton",
                    primaryButton: "primaryButton"
                },
                decls: 10,
                vars: 8,
                consts: [[3, "type"], [1, "modalDialogContent"], ["data-test-id", "modal-dialog-control-title", "kind", "large", "fontWeight", "bold", "fillColor", "colors.light.100", "align", "center"], ["top", "small", "bottom", "x-large"], ["data-test-id", "modal-dialog-control-content", "fillColor", "colors.light.100", "align", "center", 3, "innerHTML"], [1, "modalDialogContent__buttons"], ["type", "secondary", "size", "large", "data-test-id", "modal-dialog-control-secondary-button", 3, "click", 4, "ngIf"], ["type", "primary", "size", "large", "data-test-id", "modal-dialog-control-primary-button", 3, "innerHTML", "click", 4, "ngIf"], ["type", "secondary", "size", "large", "data-test-id", "modal-dialog-control-secondary-button", 3, "click"], ["type", "primary", "size", "large", "data-test-id", "modal-dialog-control-primary-button", 3, "innerHTML", "click"]],
                template: function (u, x) {
                    1 & u && (w.TgZ(0, "gu-modal-dialog", 0), w.TgZ(1, "div", 1), w.TgZ(2, "gu-paragraph-text", 2), w._uU(3), w.qZA(), w.TgZ(4, "gu-vertical-space", 3), w._UZ(5, "gu-paragraph-text", 4), w.ALo(6, "safe"), w.qZA(), w.TgZ(7, "gu-vertical-space", 5), w.YNc(8, _, 2, 1, "gu-hex-button", 6), w.YNc(9, T, 2, 4, "gu-hex-button", 7), w.qZA(), w.qZA(), w.qZA()), 2 & u && (w.Q6J("type", x.type), w.xp6(3), w.Oqu(x.title), w.xp6(2), w.Q6J("innerHTML", w.xi3(6, 5, x.content, "html"), w.oJD), w.xp6(3), w.Q6J("ngIf", x.secondaryButton), w.xp6(1), w.Q6J("ngIf", x.primaryButton))
                },
                directives: [k.O5],
                pipes: [F.y],
                styles: [".modalDialogContent[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;padding:0 8px;align-items:center;max-width:100vw}.modalDialogContent[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.modalDialogContent__buttons[_ngcontent-%COMP%]{display:flex;width:100%;justify-content:center}.modalDialogContent__buttons[_ngcontent-%COMP%]   gu-hex-button[_ngcontent-%COMP%]{max-width:50%;flex:1 1 0px}.modalDialogContent__buttons[_ngcontent-%COMP%]   gu-hex-button[_ngcontent-%COMP%]:not(:last-child){margin-right:16px}"]
            }), O
        })()
    }, 87745: (ee, R, n) => {
        "use strict";
        n.d(R, {y: () => m});
        var p = n(5e3), r = n(22313);
        let m = (() => {
            class e {
                constructor(v) {
                    this.sanitizer = v
                }

                transform(v, i) {
                    switch (i) {
                        case"html":
                            return this.sanitizer.bypassSecurityTrustHtml(v);
                        case"style":
                            return this.sanitizer.bypassSecurityTrustStyle(v);
                        case"script":
                            return this.sanitizer.bypassSecurityTrustScript(v);
                        case"url":
                            return this.sanitizer.bypassSecurityTrustUrl(v);
                        case"resourceUrl":
                            return this.sanitizer.bypassSecurityTrustResourceUrl(v);
                        default:
                            throw new Error(`Invalid safe type specified: ${i}`)
                    }
                }
            }

            return e.\u0275fac = function (v) {
                return new (v || e)(p.Y36(r.H7, 16))
            }, e.\u0275pipe = p.Yjl({name: "safe", type: e, pure: !0}), e
        })()
    }, 17268: (ee, R, n) => {
        "use strict";
        n.d(R, {K: () => g});
        var p = n(5e3), r = n(69808);
        const m = function (v, i, t, o, C) {
            return {
                "tooltipBubble--top": v,
                "tooltipBubble--left": i,
                "tooltipBubble--right": t,
                "tooltipBubble--bottom": o,
                "tooltipBubble--large": C
            }
        }, e = ["*"];
        let g = (() => {
            class v {
                constructor() {
                    this.position = "top", this.size = "small", this.autoClose = !0
                }

                get getClass() {
                    return !this.autoClose
                }

                ngOnInit() {
                }
            }

            return v.\u0275fac = function (t) {
                return new (t || v)
            }, v.\u0275cmp = p.Xpm({
                type: v,
                selectors: [["app-tooltip"]],
                hostVars: 2,
                hostBindings: function (t, o) {
                    2 & t && p.ekj("openTooltip", o.getClass)
                },
                inputs: {title: "title", position: "position", size: "size", autoClose: "autoClose"},
                ngContentSelectors: e,
                decls: 3,
                vars: 9,
                consts: [["fillColor", "colors.gunmetal.300", 1, "tooltipBubble", 3, "kind", "ngClass", "innerHTML"], ["tooltipBubble", ""]],
                template: function (t, o) {
                    1 & t && (p.F$t(), p.Hsn(0), p._UZ(1, "gu-paragraph-text", 0, 1)), 2 & t && (p.xp6(1), p.Q6J("kind", "large" === o.size ? "small" : "x-small")("ngClass", p.qbA(3, m, "top" === o.position, "left" === o.position, "right" === o.position, "bottom" === o.position, "large" === o.size))("innerHTML", o.title, p.oJD))
                },
                directives: [r.mk],
                styles: ['.tooltipBubble[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}@keyframes upAndDown2{0%{transform:translateY(-2%)}50%{transform:translateY(2%)}to{transform:translateY(-2%)}}@keyframes shine2{0%{filter:brightness(.96) hue-rotate(0deg)}50%{filter:brightness(1.12) hue-rotate(-10deg)}to{filter:brightness(.96) hue-rotate(0deg)}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}[_nghost-%COMP%]{display:block;position:relative}[_nghost-%COMP%]:hover   .tooltipBubble[_ngcontent-%COMP%]{opacity:1}[_nghost-%COMP%]:hover   .tooltipBubble.tooltipBubble--top[_ngcontent-%COMP%]{transform:translate(-50%,calc(-100% + (calc(var(--vh) * 1.7) * .5)))}[_nghost-%COMP%]:hover   .tooltipBubble.tooltipBubble--bottom[_ngcontent-%COMP%]{transform:translate(-50%,calc(100% - (calc(var(--vh) * 1.7) * .5)))}[_nghost-%COMP%]:hover   .tooltipBubble.tooltipBubble--left[_ngcontent-%COMP%]{transform:translate(calc(-100% - (calc(var(--vw) * .5) * .5) * .5),-50%)}[_nghost-%COMP%]:hover   .tooltipBubble.tooltipBubble--right[_ngcontent-%COMP%]{transform:translate(calc(0% + (calc(var(--vw) * .5) * .5) * .5),-50%)}.openTooltip[_nghost-%COMP%]   .tooltipBubble[_ngcontent-%COMP%]{opacity:1}.openTooltip[_nghost-%COMP%]   .tooltipBubble.tooltipBubble--top[_ngcontent-%COMP%]{transform:translate(-50%,calc(-100% + (calc(var(--vh) * 1.7) * .5)))}.openTooltip[_nghost-%COMP%]   .tooltipBubble.tooltipBubble--bottom[_ngcontent-%COMP%]{transform:translate(-50%,calc(100% - (calc(var(--vh) * 1.7) * .5)))}.openTooltip[_nghost-%COMP%]   .tooltipBubble.tooltipBubble--left[_ngcontent-%COMP%]{transform:translate(calc(-100% - (calc(var(--vw) * .5) * .5) * .5),-50%)}.openTooltip[_nghost-%COMP%]   .tooltipBubble.tooltipBubble--right[_ngcontent-%COMP%]{transform:translate(calc(0% + (calc(var(--vw) * .5) * .5) * .5),-50%)}.tooltipBubble[_ngcontent-%COMP%]{z-index:1;text-transform:capitalize;padding:calc(var(--vh) * 1.3);padding-top:calc(var(--vh) * .8);padding-bottom:calc(var(--vh) * .8);font-weight:600;user-select:none;pointer-events:none;position:absolute;background:#0f1b27;border:calc(var(--vh) * .15) solid #3d5a74;color:#92abc2;white-space:nowrap;border-radius:calc(var(--vh) * .4);opacity:0;left:50%;text-align:center}.tooltipBubble[_ngcontent-%COMP%]:before{content:"";position:absolute;left:50%;border:calc(var(--vh) * .7) solid transparent;transform:translate(-50%)}.tooltipBubble--large[_ngcontent-%COMP%]{font-weight:400;font-size:16px;padding:16px;text-transform:none}.tooltipBubble--top[_ngcontent-%COMP%]{top:0;transform:translate(-50%,-100%);margin-top:calc(calc(var(--vh) * 1.7) * -1)}.tooltipBubble--top[_ngcontent-%COMP%]:before{border-top-color:#3d5a74;bottom:calc(calc(calc(var(--vh) * .7) * -2) - calc(var(--vh) * .15))}.tooltipBubble--bottom[_ngcontent-%COMP%]{bottom:0;transform:translate(-50%,100%);margin-top:calc(var(--vh) * 1.7)}.tooltipBubble--bottom[_ngcontent-%COMP%]:before{border-bottom-color:#3d5a74;top:calc(calc(calc(var(--vh) * .7) * -2) - calc(var(--vh) * .15))}.tooltipBubble--left[_ngcontent-%COMP%]{left:0;top:50%}.tooltipBubble--left[_ngcontent-%COMP%]:before{left:100%;transform:translateY(50%);border-left-color:#3d5a74;right:calc(calc(calc(var(--vh) * .7) * -2) - calc(var(--vh) * .15));bottom:50%}.tooltipBubble--right[_ngcontent-%COMP%]{margin-left:10px;top:50%}.tooltipBubble--right[_ngcontent-%COMP%]:before{right:100%;transform:translateY(50%);border-right-color:#3d5a74;left:calc(calc(calc(var(--vh) * .7) * -2) - calc(var(--vh) * .15));bottom:50%}']
            }), v
        })()
    }, 25774: (ee, R, n) => {
        "use strict";
        n.d(R, {O: () => v});
        var p = n(73307), r = n(5e3), m = n(69808);

        function e(i, t) {
            if (1 & i) {
                const o = r.EpF();
                r.TgZ(0, "gu-announce-banner-template", 1), r.NdJ("onCloseAnnounceBanner", function () {
                    return r.CHM(o), r.oxw().onCloseAnnounceBanner()
                }), r.Hsn(1), r.qZA()
            }
            if (2 & i) {
                const o = r.oxw();
                r.Q6J("closable", o.closable)
            }
        }

        const g = ["*"];
        let v = (() => {
            class i {
                constructor(o) {
                    this.storageService = o, this.closable = !0, this.visible = !1
                }

                ngOnInit() {
                    this.visible = this.showBanner(this.id)
                }

                showBanner(o) {
                    return !o || !this.storageService.get([this.id])
                }

                markSeen(o) {
                    this.storageService.set([o], !0)
                }

                onCloseAnnounceBanner() {
                    this.id && this.markSeen(this.id), this.visible = !1
                }
            }

            return i.\u0275fac = function (o) {
                return new (o || i)(r.Y36(p.qy))
            }, i.\u0275cmp = r.Xpm({
                type: i,
                selectors: [["cerberus-announce-banner-control"]],
                inputs: {id: "id", closable: "closable"},
                ngContentSelectors: g,
                decls: 1,
                vars: 1,
                consts: [[3, "closable", "onCloseAnnounceBanner", 4, "ngIf"], [3, "closable", "onCloseAnnounceBanner"]],
                template: function (o, C) {
                    1 & o && (r.F$t(), r.YNc(0, e, 2, 1, "gu-announce-banner-template", 0)), 2 & o && r.Q6J("ngIf", C.visible)
                },
                directives: [m.O5],
                styles: ["[_nghost-%COMP%]{position:absolute;width:100%;z-index:21}.announceBannerControl--inline[_nghost-%COMP%]{position:relative}"]
            }), i
        })()
    }, 97993: (ee, R, n) => {
        "use strict";
        n.d(R, {i: () => v});
        var p = n(8929), r = n(7625), m = n(61377), e = n(73307), g = n(5e3);
        let v = (() => {
            class i {
                constructor(o) {
                    this.featureFlagsService = o, this.text = "", this.unsubscribe = new p.xQ
                }

                ngOnInit() {
                    this.watchFlagData()
                }

                watchFlagData() {
                    this.featureFlagsService.get(m.vU.controllableBannerData).pipe((0, r.R)(this.unsubscribe)).subscribe(o => {
                        this.text = o.text
                    })
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }
            }

            return i.\u0275fac = function (o) {
                return new (o || i)(g.Y36(e.B3))
            }, i.\u0275cmp = g.Xpm({
                type: i,
                selectors: [["cerberus-controllable-banner"]],
                decls: 2,
                vars: 1,
                consts: [["both", "2x-large", 1, "layout"], ["data-test-id", "controllable-banner-text", "kind", "large", "align", "center", "fillColor", "colors.light.300", 1, "layout__text", 3, "innerHtml"]],
                template: function (o, C) {
                    1 & o && (g.TgZ(0, "gu-vertical-space", 0), g._UZ(1, "gu-paragraph-text", 1), g.qZA()), 2 & o && (g.xp6(1), g.Q6J("innerHtml", C.text, g.oJD))
                },
                styles: ["[_nghost-%COMP%]{display:flex;width:100%}[_nghost-%COMP%]     a, [_nghost-%COMP%]     a:link, [_nghost-%COMP%]     a:visited{color:#affaed;text-decoration:none}.layout[_ngcontent-%COMP%]{display:flex;align-items:flex-start;padding:0 64px;width:100%;justify-content:center}.layout__text[_ngcontent-%COMP%]{max-width:600px}"]
            }), i
        })()
    }, 1639: (ee, R, n) => {
        "use strict";
        n.d(R, {
            ic: () => v,
            am: () => an,
            q6: () => V,
            sZ: () => Le,
            el: () => as,
            gn: () => Tt,
            kM: () => Ds,
            MZ: () => ys.M,
            W2: () => g
        });
        var p = n(69808), r = n(93075), m = n(53161), e = n(5e3);
        let g = (() => {
            class S {
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275mod = e.oAB({type: S}), S.\u0275inj = e.cJS({imports: [[p.ez, r.u5, m.j]]}), S
        })(), v = (() => {
            class S {
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275mod = e.oAB({type: S}), S.\u0275inj = e.cJS({imports: [[p.ez]]}), S
        })();
        const i = ["2x-small", "x-small", "small", "medium", "large", "x-large", "2x-large", "3x-large", "4x-large", "5x-large", "6x-large", "7x-large", "8x-large", "9x-large"];
        var t = n(65281), o = n(69181);
        const C = ["video"], f = ["carousel"], P = ["testParagraph"], w = function (S) {
            return {height: S}
        };

        function k(S, H) {
            if (1 & S && (e.TgZ(0, "div", 71), e._uU(1), e.qZA()), 2 & S) {
                const d = H.$implicit, A = H.index;
                e.Q6J("ngStyle", e.VKq(3, w, d.randomHeight + "px")), e.xp6(1), e.AsE(" ", d.title, " ---- index: ", A + 1, " ")
            }
        }

        function F(S, H) {
            if (1 & S && (e.TgZ(0, "div", 71), e._uU(1), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.Q6J("ngStyle", e.VKq(2, w, d.randomHeight + "px")), e.xp6(1), e.hij(" ", d.title, " ")
            }
        }

        function _(S, H) {
            if (1 & S && (e.TgZ(0, "div", 71), e._uU(1), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.Q6J("ngStyle", e.VKq(2, w, d.randomHeight + "px")), e.xp6(1), e.hij(" ", d.title, " ")
            }
        }

        function T(S, H) {
            if (1 & S && (e.TgZ(0, "div", 71), e._uU(1), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.Q6J("ngStyle", e.VKq(2, w, d.randomHeight + "px")), e.xp6(1), e.hij(" ", d.title, " ")
            }
        }

        function y(S, H) {
            if (1 & S && (e.TgZ(0, "div", 71), e._uU(1), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.Q6J("ngStyle", e.VKq(2, w, d.randomHeight + "px")), e.xp6(1), e.hij(" ", d.title, " ")
            }
        }

        const O = function () {
            return {breakpoint: "small", bothSize: "3x-large"}
        }, E = function (S) {
            return [S]
        }, u = function () {
            return {minWidth: "x-small", slidesPerView: 1.5, spaceBetween: 10}
        }, x = function () {
            return {minWidth: "medium", slidesPerView: 3.5, spaceBetween: 20}
        }, s = function () {
            return {minWidth: "small", slidesPerView: 2.5, spaceBetween: 10}
        }, Z = function (S, H, d) {
            return [S, H, d]
        }, X = function () {
            return {name: "moo cow", id: "moo"}
        }, me = function () {
            return {name: "woof dog", id: "woof"}
        }, ue = function (S, H) {
            return [S, H]
        }, we = function () {
            return {breakpoint: "small", size: "x-large"}
        }, N = function () {
            return {breakpoint: "medium", size: "2x-large"}
        };
        let V = (() => {
            class S {
                constructor() {
                    this.socialMediaAccounts = o.$, this.onetwo = "holy smokes, batman", this.spacing = i[3], this.colors = Object.assign({}, t.colors), this.slides = [{
                        title: '"hello" world',
                        randomHeight: 350 * Math.random() + 100
                    }, {title: '"moo" cow', randomHeight: 350 * Math.random() + 100}, {
                        title: '"woof" dog',
                        randomHeight: 350 * Math.random() + 100
                    }, {title: '"baah" sheep', randomHeight: 350 * Math.random() + 100}, {
                        title: '"meow" cat',
                        randomHeight: 350 * Math.random() + 100
                    }, {title: '"bleet" goat', randomHeight: 350 * Math.random() + 100}, {
                        title: '"howl" wolf',
                        randomHeight: 350 * Math.random() + 100
                    }, {title: '"screech" cockatoo', randomHeight: 350 * Math.random() + 100}]
                }

                ngOnInit() {
                    this.int = window.setInterval(() => {
                        const A = Math.random();
                        this.moo = `${A}`;
                        const K = Math.abs(Math.floor(A * i.length - 1));
                        this.spacing = i[K], this.testParagraph.nativeElement.text = `${A}`, this.testParagraph.nativeElement.bool = !this.testParagraph.nativeElement.bool
                    }, 2e3);
                    const d = this.video.nativeElement;
                    d.currentTime = 4.5, setTimeout(() => {
                        d.style.opacity = 1, d.play()
                    }, 2e3)
                }

                gotoPane(d) {
                    this.carousel.nativeElement.gotoSlide(d)
                }

                onCurrentPaneChange(d) {
                    console.log("pane change!!!", d.detail.currentActiveSlides)
                }

                onDropdownSelect(d) {
                    console.log("drop down is selected!!!", d)
                }

                onCheck(d) {
                    console.log("checked state change!!!", d)
                }

                onMoo(d) {
                    console.log("!!!!!!!!!!!! moooo", d)
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-demo-sheet"]],
                viewQuery: function (d, A) {
                    if (1 & d && (e.Gf(C, 7), e.Gf(f, 7), e.Gf(P, 7)), 2 & d) {
                        let K;
                        e.iGM(K = e.CRH()) && (A.video = K.first), e.iGM(K = e.CRH()) && (A.carousel = K.first), e.iGM(K = e.CRH()) && (A.testParagraph = K.first)
                    }
                },
                decls: 126,
                vars: 43,
                consts: [[2, "display", "flex", "flex-direction", "column", "align-items", "center", "padding", "30px 30px 100px", "height", "100%", "background", "#bbbbbb"], ["simpleTextKind", "large", 3, "simpleTextDisplay"], ["src", "/assets/videos/stars-opens.mp4", "muted", "", "playsinline", "", "preload", "auto", 1, "video"], ["video", ""], ["text", "moo cow"], ["testParagraph", ""], ["furColor", "red", "bodyColor", "gold", "gemColor", "yellowgreen"], ["icon", "marketplace_cart"], ["href", "https://google.com", "kind", "tag"], ["href", "https://google.com", "kind", "help"], ["href", "https://google.com", "kind", "small"], ["href", "https://google.com", "icon", "set_core", "backgroundFillColor", "colors.gunmetal.700", "borderColor", "colors.apocyan.300", "fillColor", "colors.white"], ["href", "https://google.com", "icon", "marketplace_cart", "backgroundFillColor", "colors.gunmetal.700", "borderColor", "colors.apocyan.300", "leftIconPosition", ""], ["href", "https://google.com", "icon", "set_core", "backgroundFillColor", "colors.gunmetal.700", "borderColor", "colors.apocyan.300", "verticalLayout", ""], ["text", "Special Button", "enableSounds", "", "icon", "set_core"], ["text", "Special alt Button", "enableSounds", "", "invertColoring", "", "leftIconPosition", "", "icon", "tribe_dragon"], ["top", "large", 3, "responsiveSize"], ["text", "This is a text link"], ["both", "x-large"], ["size", "large", "text", "large primary button"], ["text", "primary button", "enableSounds", "", "icon", "set_core"], ["text", "secondary button", "enableSounds", ""], ["text", "subtle button"], [2, "display", "block", "overflow", "auto", "padding", "30px 30px 100px", "height", "100%", "background", "#ccc"], ["progress", "50"], ["bottom", "5x-large", "top", "3x-large"], [2, "color", "black", 3, "click"], ["both", "large"], ["text", "GOTO pane 4", "size", "large", 3, "click"], ["spaceBetween", "20", "slidesPerView", "2.2", "data-carousel-kind", "multi slide carousel with an uneven number of slides per screen", 1, "carousel", 3, "onSlideChange"], ["carousel", ""], ["class", "carousel__slide", 3, "ngStyle", 4, "ngFor", "ngForOf"], ["spaceBetween", "0", "slidesPerView", "1", "data-carousel-kind", "multi slide carousel with responsive slidesPerView", 1, "carousel", 3, "responsiveBreakpoints", "onSlideChange"], ["bottom", "large"], ["spaceBetween", "10", "centeredSlides", "true", "slidesPerView", "3", "data-carousel-kind", "multi slide carousel with centered slides", 1, "carousel", 3, "onSlideChange"], ["spaceBetween", "30", "slidesPerView", "3", "data-carousel-kind", "simple multi slide carousel", 1, "carousel", 3, "onSlideChange"], ["spaceBetween", "0", "slidesPerView", "1", "data-carousel-kind", "single slide carousel", 1, "carousel", 3, "onSlideChange"], [1, "useJsVars"], ["bottom", "2x-large"], [3, "fillColor"], ["labelText", "moo cow", 3, "checked", "onCheck"], ["labelText", "large moo cow", "labelPlacement", "right", "size", "large", 3, "checked", "onCheck"], ["top", "small"], ["placeholderText", "select something", 3, "items", "onSelect"], ["top", "6x-large"], ["iconLigature", "social_telegram", 1, "customGradient"], ["top", "medium"], ["kind", "help", "fillColor", "colors.gunmetal.300"], ["both", "4x-large"], ["iconLigature", "social_telegram", "fillColor", "colors.gold.300", 2, "font-size", "100px"], ["iconLigature", "friends_helmet", "fillGradient", "gradients.god.magic", "fillGradientTarget", "top right", 2, "font-size", "100px"], ["fillColor", "colors.dark.700"], ["bottom", "3x-large"], [3, "disabled"], [3, "loading"], ["size", "large", "href", "https://google.com"], ["size", "large", "align", "left", "fillGradient", "gradients.god.nature", "fillGradientTarget", "bottom"], ["top", "x-large"], ["size", "large", "fillColor", "colors.light.100", 1, "bannerHeadings__largeHeading", 3, "responsiveBreakpoints"], ["bottom", "medium", 3, "top"], ["size", "small", "align", "center"], ["bottom", "6x-large", 3, "top"], ["size", "x-small", "align", "right"], ["align", "left", "kind", "tag"], ["align", "left", "kind", "tag", "text", "simple text can also be fed input text like so... (this text is 100% untouchable from the external global styles)"], ["align", "left", "kind", "help", "fillGradient", "gradients.apocyan.simple", 1, "customSimpleText"], ["top", "2x-large", "bottom", "medium"], ["kind", "large"], ["kind", "help", "align", "right"], [3, "accounts"], ["kind", "tag"], [1, "carousel__slide", 3, "ngStyle"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "div", 0), e._UZ(1, "gu-countdown-timer"), e._UZ(2, "gu-countdown-timer", 1), e._UZ(3, "video", 2, 3), e._UZ(5, "gu-paragraph-text", 4, 5), e._UZ(7, "gu-regular-crypto-kitty", 6), e.qZA(), e.TgZ(8, "div", 0), e.TgZ(9, "gu-plain-square-button", 7), e._uU(10, " plain square button "), e.qZA(), e.TgZ(11, "gu-simple-text-button", 8), e._uU(12, " simple text button "), e.qZA(), e.TgZ(13, "gu-simple-text-button", 9), e._uU(14, " simple text button "), e.qZA(), e.TgZ(15, "gu-simple-text-button", 10), e._uU(16, " simple text button "), e.qZA(), e.TgZ(17, "gu-plain-square-button", 11), e._uU(18, " plain square "), e.qZA(), e.TgZ(19, "gu-plain-square-button", 12), e._uU(20, " Cart "), e.qZA(), e.TgZ(21, "gu-plain-square-button", 13), e._uU(22, " plain square vertical "), e.qZA(), e._UZ(23, "gu-special-hex-button", 14), e._UZ(24, "gu-special-hex-button", 15), e.TgZ(25, "gu-vertical-space", 16), e.TgZ(26, "gu-paragraph-text"), e._uU(27, "Arcu bibendum at varius vel. Nec feugiat nisl pretium fusce id velit ut tortor. Vel eros donec ac odio. "), e._UZ(28, "gu-simple-text-button", 17), e.qZA(), e.qZA(), e.TgZ(29, "gu-vertical-space", 18), e._UZ(30, "gu-primary-hex-button", 19), e.qZA(), e._UZ(31, "gu-primary-hex-button", 20), e.TgZ(32, "gu-vertical-space", 18), e._UZ(33, "gu-secondary-hex-button", 21), e.qZA(), e._UZ(34, "gu-subtle-hex-button", 22), e.qZA(), e.TgZ(35, "div", 23), e._UZ(36, "gu-hex-progress-bar", 24), e.TgZ(37, "gu-vertical-space", 25), e.TgZ(38, "button", 26), e.NdJ("click", function () {
                        return A.gotoPane(1)
                    }), e._uU(39, "goto pane 2"), e.qZA(), e.TgZ(40, "gu-vertical-space", 27), e.TgZ(41, "gu-primary-hex-button", 28), e.NdJ("click", function () {
                        return A.gotoPane(3)
                    }), e.qZA(), e.qZA(), e.TgZ(42, "gu-carousel", 29, 30), e.NdJ("onSlideChange", function (_e) {
                        return A.onCurrentPaneChange(_e)
                    }), e.YNc(44, k, 2, 5, "div", 31), e.qZA(), e.TgZ(45, "gu-vertical-space", 27), e.TgZ(46, "gu-carousel", 32), e.NdJ("onSlideChange", function (_e) {
                        return A.onCurrentPaneChange(_e)
                    }), e.YNc(47, F, 2, 4, "div", 31), e.qZA(), e.qZA(), e.TgZ(48, "gu-vertical-space", 33), e.TgZ(49, "gu-carousel", 34), e.NdJ("onSlideChange", function (_e) {
                        return A.onCurrentPaneChange(_e)
                    }), e.YNc(50, _, 2, 4, "div", 31), e.qZA(), e.qZA(), e.TgZ(51, "gu-carousel", 35), e.NdJ("onSlideChange", function (_e) {
                        return A.onCurrentPaneChange(_e)
                    }), e.YNc(52, T, 2, 4, "div", 31), e.qZA(), e.TgZ(53, "gu-vertical-space", 27), e.TgZ(54, "gu-carousel", 36), e.NdJ("onSlideChange", function (_e) {
                        return A.onCurrentPaneChange(_e)
                    }), e.YNc(55, y, 2, 4, "div", 31), e.qZA(), e.qZA(), e.qZA(), e.TgZ(56, "gu-vertical-space", 33), e.TgZ(57, "div", 37), e._uU(58, " this text is styled thru plain old angular sass, using a color var from our new variables system "), e.qZA(), e.qZA(), e.TgZ(59, "gu-vertical-space", 38), e.TgZ(60, "gu-paragraph-text", 39), e._uU(61), e.qZA(), e.qZA(), e.TgZ(62, "gu-vertical-space", 33), e.TgZ(63, "gu-checkbox-input", 40), e.NdJ("onCheck", function (_e) {
                        return A.onMoo(_e)
                    }), e.qZA(), e.TgZ(64, "gu-checkbox-input", 41), e.NdJ("onCheck", function (_e) {
                        return A.onCheck(_e)
                    }),e.qZA(),e.qZA(),e.TgZ(65, "gu-vertical-space", 42),e.TgZ(66, "gu-dropdown", 43),e.NdJ("onSelect", function (_e) {
                        return A.onDropdownSelect(_e)
                    }),e.qZA(),e.qZA(),e.TgZ(67, "gu-vertical-space", 44),e._UZ(68, "gu-icon", 45),e.TgZ(69, "gu-vertical-space", 46),e.TgZ(70, "gu-simple-text", 47),e._uU(71),e.qZA(),e.qZA(),e.qZA(),e.TgZ(72, "gu-vertical-space", 48),e._UZ(73, "gu-icon", 49),e._UZ(74, "gu-icon", 50),e.TgZ(75, "gu-vertical-space", 46),e.TgZ(76, "gu-simple-text", 51),e._uU(77, " ^ this is an icon - with a gradient fill input, and this text has a color fill input "),e.qZA(),e.qZA(),e.qZA(),e.TgZ(78, "gu-vertical-space", 52),e.TgZ(79, "gu-primary-hex-button", 53),e._uU(80, "disabled button"),e.qZA(),e.TgZ(81, "gu-primary-hex-button", 54),e._uU(82, "loading button"),e.qZA(),e.TgZ(83, "gu-vertical-space", 46),e.TgZ(84, "gu-primary-hex-button", 55),e._uU(85, " moo cow "),e.qZA(),e.qZA(),e.qZA(),e.TgZ(86, "gu-heading-text", 56),e.TgZ(87, "h1"),e._uU(88, 'this is a "large" left aligned heading'),e.qZA(),e.qZA(),e.TgZ(89, "gu-vertical-space", 57),e.TgZ(90, "gu-heading-text", 58),e._uU(91, " This heading has responsively set font-size "),e.qZA(),e.qZA(),e.TgZ(92, "gu-vertical-space", 59),e.TgZ(93, "gu-heading-text", 60),e.TgZ(94, "h3"),e._uU(95),e.qZA(),e.qZA(),e.qZA(),e.TgZ(96, "gu-vertical-space", 61),e.TgZ(97, "gu-heading-text", 62),e.TgZ(98, "h6"),e._uU(99, 'this is an "x-small" right aligned heading'),e.qZA(),e.qZA(),e.qZA(),e.TgZ(100, "gu-vertical-space", 33),e.TgZ(101, "gu-simple-text", 63),e._uU(102, ' this is the simple-text "tag" kind ... '),e.qZA(),e.qZA(),e._UZ(103, "gu-simple-text", 64),e.TgZ(104, "gu-simple-text", 65),e._uU(105, ' this is the simple-text "help" kind ... (note how simple-text displays as an inline element, not block) '),e.qZA(),e.TgZ(106, "gu-vertical-space", 66),e.TgZ(107, "gu-paragraph-text", 67),e._uU(108, ' this is "paragraph-text", kind: "large". note how it has line height, passes it\'s sizing down to "simple-text", and is '),e.TgZ(109, "em"),e._uU(110, "block level"),e.qZA(),e._uU(111, " - just like "),e.TgZ(112, "strong"),e._uU(113, "regular paragraphs!"),e.qZA(),e._UZ(114, "br"),e._uU(115),e.qZA(),e.qZA(),e.TgZ(116, "gu-vertical-space", 59),e.TgZ(117, "gu-paragraph-text", 68),e._uU(118, ' this is the "help" kind of paragraph-text '),e._UZ(119, "br"),e._uU(120, " Bibendum est ultricies integer quis auctor elit sed. Iaculis at erat pellentesque adipiscing commodo elit at imperdiet dui. Malesuada pellentesque elit eget gravida cum sociis natoque penatibus et. Donec massa sapien faucibus et. Felis imperdiet proin fermentum leo vel orci porta non. Augue neque gravida in fermentum et sollicitudin ac orci. Ac tincidunt vitae semper quis. "),e.qZA(),e.qZA(),e._UZ(121, "gu-social-buttons-row", 69),e.TgZ(122, "gu-paragraph-text", 70),e._uU(123, ' this is the "tag" kind of paragraph-text '),e._UZ(124, "br"),e._uU(125, " Arcu bibendum at varius vel. Nec feugiat nisl pretium fusce id velit ut tortor. Vel eros donec ac odio. Ante metus dictum at tempor commodo ullamcorper a. Hendrerit gravida rutrum quisque non tellus orci ac auctor augue. Non curabitur gravida arcu ac. "),e.qZA(),e.qZA()), 2 & d && (e.xp6(2), e.Q6J("simpleTextDisplay", !0), e.xp6(23), e.Q6J("responsiveSize", e.VKq(24, E, e.DdM(23, O))), e.xp6(19), e.Q6J("ngForOf", A.slides), e.xp6(2), e.Q6J("responsiveBreakpoints", e.kEZ(29, Z, e.DdM(26, u), e.DdM(27, x), e.DdM(28, s))), e.xp6(1), e.Q6J("ngForOf", A.slides), e.xp6(3), e.Q6J("ngForOf", A.slides), e.xp6(2), e.Q6J("ngForOf", A.slides), e.xp6(3), e.Q6J("ngForOf", A.slides), e.xp6(5), e.s9C("fillColor", A.colors.dark[500]), e.xp6(1), e.hij(" this text is styled using direct variable input from an angular scope variable: ", A.colors.dark[500], " (colors.dark[500]) "), e.xp6(2), e.Q6J("checked", !0), e.xp6(1), e.Q6J("checked", !1), e.xp6(2), e.Q6J("items", e.WLB(35, ue, e.DdM(33, X), e.DdM(34, me))), e.xp6(5), e.hij(" ^ this is an icon - with a custom scss gradient as text-fill ", A.onetwo, " (this text is colored as gunmetal[300]) "), e.xp6(8), e.Q6J("disabled", !0), e.xp6(2), e.s9C("loading", !0), e.xp6(9), e.Q6J("responsiveBreakpoints", e.WLB(40, ue, e.DdM(38, we), e.DdM(39, N))), e.xp6(2), e.s9C("top", A.spacing), e.xp6(3), e.hij('this is a "small" center aligned heading > spacing: ', A.spacing, ""), e.xp6(1), e.s9C("top", A.spacing), e.xp6(19), e.hij(" Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut eu sem integer vitae justo. Amet porttitor ", A.moo, " eget dolor morbi non arcu risus quis varius. Est velit egestas dui id ornare arcu odio ut. Integer quis auctor elit sed vulputate mi sit. Dui ut ornare lectus sit amet est placerat. Cras sed felis eget velit aliquet sagittis. "), e.xp6(1), e.s9C("top", A.spacing), e.xp6(5), e.Q6J("accounts", A.socialMediaAccounts))
                },
                directives: [p.sg, p.PC],
                styles: ["[_nghost-%COMP%]{display:block}.useJsVars[_ngcontent-%COMP%]{color:#affaed}.customGradient[_ngcontent-%COMP%]{font-size:200px;background:linear-gradient(to bottom,#9DE764 0%,#5AC33F 50%,#4C772F 100%)}.customSimpleText[_ngcontent-%COMP%]{border:2px dotted gold;margin-left:8px;padding:16px}.carousel[_ngcontent-%COMP%]{box-shadow:inset 0 0 0 2px #0003}.carousel[_ngcontent-%COMP%]:before{content:attr(data-carousel-kind);position:absolute;z-index:1;bottom:0px;left:3px;color:#0000004d}.carousel__slide[_ngcontent-%COMP%]{background:yellowgreen;box-shadow:inset 0 0 0 3px gold}.carousel__slide[_ngcontent-%COMP%]:first-child{background:rebeccapurple}.carousel__slide[_ngcontent-%COMP%]:last-child{background:dodgerblue}.video[_ngcontent-%COMP%]{width:60%;margin:0 auto;opacity:0}"]
            }), S
        })(), ae = {numbers: {randomNumber: 0}, text: {randomText: "moo"}};
        setInterval(() => {
            ae = Object.assign(Object.assign({}, ae), {numbers: {randomNumber: Math.random()}})
        }, 400);
        var be = n(73307), B = n(94057);
        const pe = ["carousel"], re = function (S) {
            return {"championButtons__button--active": S}
        };

        function Be(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "div", 14), e.NdJ("click", function () {
                    const _e = e.CHM(d).index;
                    return e.oxw().gotoChampionSlide(_e)
                }), e.TgZ(1, "picture"), e._UZ(2, "source", 15), e._UZ(3, "source", 16), e._UZ(4, "img", 17), e.qZA(), e.qZA()
            }
            if (2 & S) {
                const d = H.$implicit, A = H.index, K = e.oxw();
                e.Q6J("ngClass", e.VKq(13, re, K.activeChampionIndex === A)), e.xp6(1), e.Gre("championButtons__button__picture championButtons__button__picture--", d.name, ""), e.xp6(1), e.FAE("srcset", "\n          //images.godsunchained.com/art2/250/", d.protoId, ".webp 250w,\n          //images.godsunchained.com/art2/375/", d.protoId, ".webp 375w,\n          //images.godsunchained.com/art2/500/", d.protoId, ".webp 500w,\n          //images.godsunchained.com/art2/720/", d.protoId, ".webp 720w\n        ", e.LSH), e.xp6(1), e.FAE("srcset", "\n          //images.godsunchained.com/art2/250/", d.protoId, ".jpg 250w,\n          //images.godsunchained.com/art2/375/", d.protoId, ".jpg 375w,\n          //images.godsunchained.com/art2/500/", d.protoId, ".jpg 500w,\n          //images.godsunchained.com/art2/720/", d.protoId, ".jpg 720w\n        ", e.LSH), e.xp6(1), e.MGl("src", "//images.godsunchained.com/art2/500/", d.protoId, ".jpg", e.LSH)
            }
        }

        function De(S, H) {
            if (1 & S && (e.TgZ(0, "div", 18), e.TgZ(1, "picture", 19), e._UZ(2, "source", 20), e._UZ(3, "source", 21), e._UZ(4, "img", 22), e.qZA(), e.TgZ(5, "gu-vertical-space", 23), e.TgZ(6, "gu-heading-text", 24), e._uU(7), e.qZA(), e.qZA(), e.TgZ(8, "gu-paragraph-text", 25), e._uU(9), e.qZA(), e.TgZ(10, "gu-vertical-space", 26), e.TgZ(11, "gu-simple-text-button", 27), e._uU(12, " Read more "), e.qZA(), e.qZA(), e.TgZ(13, "gu-paragraph-text", 28), e._uU(14), e.qZA(), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.xp6(2), e.bRH("srcset", "\n            //images.godsunchained.com/art2/250/", d.protoId, ".webp 250w,\n            //images.godsunchained.com/art2/375/", d.protoId, ".webp 375w,\n            //images.godsunchained.com/art2/500/", d.protoId, ".webp 500w,\n            //images.godsunchained.com/art2/720/", d.protoId, ".webp 720w,\n            //images.godsunchained.com/art2/1024/", d.protoId, ".webp 1024w,\n            //images.godsunchained.com/art2/1280/", d.protoId, ".webp 1280w,\n            //images.godsunchained.com/art2/1440/", d.protoId, ".webp 1440w\n          ", e.LSH), e.xp6(1), e.bRH("srcset", "\n            //images.godsunchained.com/art2/250/", d.protoId, ".jpg 250w,\n            //images.godsunchained.com/art2/375/", d.protoId, ".jpg 375w,\n            //images.godsunchained.com/art2/500/", d.protoId, ".jpg 500w,\n            //images.godsunchained.com/art2/720/", d.protoId, ".jpg 720w,\n            //images.godsunchained.com/art2/1024/", d.protoId, ".jpg 1024w,\n            //images.godsunchained.com/art2/1280/", d.protoId, ".jpg 1280w,\n            //images.godsunchained.com/art2/1440/", d.protoId, ".jpg 1440w\n          ", e.LSH), e.xp6(1), e.MGl("src", "//images.godsunchained.com/art2/720/", d.protoId, ".jpg", e.LSH), e.xp6(3), e.hij(" ", d.title, " "), e.xp6(2), e.hij(" ", d.description, " "), e.xp6(2), e.s9C("href", d.link), e.xp6(3), e.hij(" ", d.byline, " ")
            }
        }

        let Y = (() => {
            class S {
                constructor() {
                    this.activeChampionIndex = 0, this.champions = B.zy.Y, this.routes = B.CF.J
                }

                ngOnInit() {
                }

                gotoChampionSlide(d) {
                    this.carousel.nativeElement.gotoSlide(d)
                }

                onChampionCarouselUpdate(d) {
                    this.activeChampionIndex = d.detail.currentActiveSlides[0]
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-season1-champion-section"]],
                viewQuery: function (d, A) {
                    if (1 & d && e.Gf(pe, 7), 2 & d) {
                        let K;
                        e.iGM(K = e.CRH()) && (A.carousel = K.first)
                    }
                },
                decls: 18,
                vars: 4,
                consts: [["size", "large", "fillGradient", "gradients.gold.simple", "align", "center", 1, "heading"], [1, "championButtons"], ["class", "championButtons__button", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "championCarouselWrapper"], [1, "championCarousel", 3, "onSlideChange"], ["carousel", ""], ["class", "championCarousel__championSlide", 4, "ngFor", "ngForOf"], [1, "sideBarImage", "sideBarImage--left"], ["srcset", "/assets/images/expansion-1/carousel-sidebar.webp", "type", "image/webp"], ["srcset", "/assets/images/expansion-1/carousel-sidebar.png", "type", "image/png"], ["src", "/assets/images/expansion-1/carousel-sidebar.png", "alt", "", 1, "sideBarImage__img"], [1, "sideBarImage", "sideBarImage--right"], ["both", "x-large", 1, "ctaButtonRow"], ["text", "Buy Packs", "size", "large", 3, "disabled", "href"], [1, "championButtons__button", 3, "ngClass", "click"], ["sizes", "20vw", "type", "image/webp", 3, "srcset"], ["sizes", "20vw", "type", "image/jpg", 3, "srcset"], ["alt", "", 1, "championButtons__button__picture__img", 3, "src"], [1, "championCarousel__championSlide"], [1, "championCarousel__championSlide__imgWrapper"], ["sizes", "75vw", "type", "image/webp", 3, "srcset"], ["sizes", "75vw", "type", "image/jpg", 3, "srcset"], ["alt", "", 1, "championCarousel__championSlide__imgWrapper__img", 3, "src"], ["both", "x-large"], ["size", "x-small", "fillColor", "colors.light.100", "align", "center"], ["fillColor", "colors.light.100", "align", "center", "kind", "large", 1, "championCarousel__championSlide__description"], ["top", "large", "bottom", "3x-large", 1, "readMoreLink"], ["kind", "tag", "target", "_blank", "fillColor", "colors.apocyan.300", "align", "center", 3, "href"], ["align", "center", "kind", "large"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "gu-heading-text", 0), e._uU(1, " Meet your champions\n"), e.qZA(), e.TgZ(2, "div", 1), e.YNc(3, Be, 5, 15, "div", 2), e.qZA(), e.TgZ(4, "div", 3), e.TgZ(5, "gu-carousel", 4, 5), e.NdJ("onSlideChange", function (_e) {
                        return A.onChampionCarouselUpdate(_e)
                    }), e.YNc(7, De, 15, 19, "div", 6), e.qZA(), e.TgZ(8, "picture", 7), e._UZ(9, "source", 8), e._UZ(10, "source", 9), e._UZ(11, "img", 10), e.qZA(), e.TgZ(12, "picture", 11), e._UZ(13, "source", 8), e._UZ(14, "source", 9), e._UZ(15, "img", 10), e.qZA(), e.qZA(), e.TgZ(16, "gu-vertical-space", 12), e._UZ(17, "gu-primary-hex-button", 13), e.qZA()), 2 & d && (e.xp6(3), e.Q6J("ngForOf", A.champions), e.xp6(4), e.Q6J("ngForOf", A.champions), e.xp6(10), e.Q6J("disabled", !0)("href", A.routes.buyPacks.path))
                },
                directives: [p.sg, p.mk],
                styles: ['@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}@keyframes upAndDown2{0%{transform:translateY(-2%)}50%{transform:translateY(2%)}to{transform:translateY(-2%)}}@keyframes shine2{0%{filter:brightness(.96) hue-rotate(0deg)}50%{filter:brightness(1.12) hue-rotate(-10deg)}to{filter:brightness(.96) hue-rotate(0deg)}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}[_nghost-%COMP%]{position:relative;padding:80px 0;display:flex;flex-direction:column;background:url(/assets/images/expansion-1/Lysander_LC_BG.jpg);background-size:cover;background-position:center}[_nghost-%COMP%]:before{content:"";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(to bottom,#0A0A0A 0%,rgba(10,10,10,.8) 50%)}[_nghost-%COMP%]:after{content:"";position:absolute;left:0;right:0;bottom:0;height:12px;background:radial-gradient(47.52% 50% at 50% 50%,#C6A052 0%,rgba(198,160,82,0) 100%)}.heading[_ngcontent-%COMP%]{position:relative;padding:0 20px}.championButtons[_ngcontent-%COMP%]{margin:20px auto 48px;padding:0 28px;display:grid;grid-template-columns:repeat(3,1fr);grid-column-gap:28px;grid-row-gap:28px;max-width:"768px";width:100%}@media screen and (min-width: 512px){.championButtons[_ngcontent-%COMP%]{grid-template-columns:repeat(6,1fr)}}.championButtons__button[_ngcontent-%COMP%]{border-radius:50%;width:100%;padding-bottom:100%;transition:box-shadow .25s ease-in-out;position:relative;overflow:hidden;cursor:pointer}.championButtons__button__picture[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%}.championButtons__button__picture__img[_ngcontent-%COMP%]{height:300%;width:300%;object-fit:cover;position:absolute;top:0;left:50%;transform:translate(-50%,-10%)}.championButtons__button__picture--lysander[_ngcontent-%COMP%]   .championButtons__button__picture__img[_ngcontent-%COMP%]{transform:translate(-50%,-9%)}.championButtons__button__picture--neferu[_ngcontent-%COMP%]   .championButtons__button__picture__img[_ngcontent-%COMP%]{transform:translate(-45%,-14%)}.championButtons__button__picture--valka[_ngcontent-%COMP%]   .championButtons__button__picture__img[_ngcontent-%COMP%]{transform:translate(-52%,-6.5%)}.championButtons__button__picture--pallas[_ngcontent-%COMP%]   .championButtons__button__picture__img[_ngcontent-%COMP%]{transform:translate(-54%,-7%)}.championButtons__button__picture--selena[_ngcontent-%COMP%]   .championButtons__button__picture__img[_ngcontent-%COMP%]{transform:translate(-50%,-8%)}.championButtons__button--active[_ngcontent-%COMP%]{box-shadow:0 0 20px #f7ea9b}.championCarouselWrapper[_ngcontent-%COMP%]{margin:0 auto;width:85%;max-width:1000px;position:relative}@media screen and (min-width: 768px){.championCarouselWrapper[_ngcontent-%COMP%]{width:65%}}.sideBarImage[_ngcontent-%COMP%]{display:none;position:absolute;top:-3%;left:-6.25%;width:12.5%;user-select:none;pointer-events:none}.sideBarImage--right[_ngcontent-%COMP%]{left:auto;right:-6.25%;transform:rotateY(180deg)}.sideBarImage__img[_ngcontent-%COMP%]{display:block;width:100%}.championCarousel[_ngcontent-%COMP%]{width:100%;margin:auto;overflow:hidden}.championCarousel__championSlide[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:100%;position:relative}.championCarousel__championSlide__imgWrapper[_ngcontent-%COMP%]{width:100%;padding-bottom:50%;position:relative;overflow:hidden}@media screen and (min-width: 512px){.sideBarImage[_ngcontent-%COMP%]{display:block}.championCarousel[_ngcontent-%COMP%]{border-radius:4vw 4vw 0 0}.championCarousel__championSlide__imgWrapper[_ngcontent-%COMP%]{border-radius:0 0 4vw 4vw}}.championCarousel__championSlide__imgWrapper__img[_ngcontent-%COMP%]{position:absolute;top:0;left:0;height:100%;width:100%;object-fit:cover;object-position:center 20%}.championCarousel__championSlide__description[_ngcontent-%COMP%]{width:75%;margin:0 auto}.ctaButtonRow[_ngcontent-%COMP%]{display:flex;justify-content:center}.readMoreLink[_ngcontent-%COMP%]{text-align:center;display:flex;justify-content:center}.readMoreLink__text[_ngcontent-%COMP%]{padding-bottom:4px;border-bottom:2px solid #8BE1E0}.bottomContent[_ngcontent-%COMP%]{position:relative}']
            }), S
        })();
        var ne = n(72986);
        n(99454);
        const te = ["emailInput"], ce = function () {
            return ["email"]
        };
        let ge = (() => {
            class S {
                constructor(d) {
                    this.authHostService = d, this.emailValue = {value: "", valid: !1}, this.disableSubmitButton = !1
                }

                submitEmail() {
                    if (!this.emailValue.valid) return !1;
                    this.authHostService.post(`/subscribe/${this.emailValue.value}`).pipe((0, ne.q)(1)).subscribe({
                        next: d => {
                            "success" === d ? (this.inputElement.nativeElement.setCurrentStatus({
                                status: "success",
                                helpText: "Success! You\u2019re all signed up."
                            }), this.disableSubmitButton = !0) : this.handleError()
                        }, error: () => this.handleError()
                    })
                }

                handleError() {
                    this.inputElement.nativeElement.setCurrentStatus({
                        status: "error",
                        helpText: "Encountered an error. Please try again"
                    })
                }

                onValueChange(d) {
                    this.emailValue = {value: d.detail.newValue, valid: d.detail.valid}
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(be.LI))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-newsletter-signup-form"]],
                viewQuery: function (d, A) {
                    if (1 & d && e.Gf(te, 5), 2 & d) {
                        let K;
                        e.iGM(K = e.CRH()) && (A.inputElement = K.first)
                    }
                },
                inputs: {emailValue: "emailValue", disableSubmitButton: "disableSubmitButton"},
                decls: 7,
                vars: 4,
                consts: [["fillColor", "colors.light[100]", "align", "center", "size", "x-small"], [3, "submit"], ["errorHelpText", "Please enter a valid email", "placeholderText", "Enter your email here", 1, "textInput", 3, "validateToPattern", "onValueChange"], ["emailInput", ""], ["size", "large", 3, "disabled", "horizontalStretch", "click"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "gu-heading-text", 0), e._uU(1, " signup for our newsletter!\n"), e.qZA(), e.TgZ(2, "gu-form-context", 1), e.NdJ("submit", function () {
                        return A.submitEmail()
                    }), e.TgZ(3, "gu-text-input", 2, 3), e.NdJ("onValueChange", function (_e) {
                        return A.onValueChange(_e)
                    }), e.qZA(), e.TgZ(5, "gu-primary-hex-button", 4), e.NdJ("click", function () {
                        return A.submitEmail()
                    }), e._uU(6, " submit "), e.qZA(), e.qZA()), 2 & d && (e.xp6(3), e.Q6J("validateToPattern", e.DdM(3, ce)), e.xp6(2), e.Q6J("disabled", A.disableSubmitButton || !A.emailValue.valid)("horizontalStretch", !1))
                },
                styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;box-sizing:border-box}", ".textInput[_ngcontent-%COMP%] {\n      margin: 16px 0 24px;\n    }\n\n    .textInput[_ngcontent-%COMP%]   .helpText[_ngcontent-%COMP%], .textInput[_ngcontent-%COMP%]   .inputArea__input[_ngcontent-%COMP%], .textInput[_ngcontent-%COMP%]   .inputArea__input[_ngcontent-%COMP%]::placeholder {\n      text-align: center;\n    }\n\n    gu-primary-hex-button[_ngcontent-%COMP%] {\n      min-width: 170px;\n    }"]
            }), S
        })(), Le = (() => {
            class S {
                constructor(d, A) {
                    this.authService = d, this.authHostService = A
                }

                get isLoggedIn() {
                    return this.authService.isLoggedIn()
                }

                ngOnInit() {
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(be.mI), e.Y36(be.LI))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-lore-route"]],
                decls: 33,
                vars: 0,
                consts: [[1, "headerStrip"], ["top", "4x-large"], ["fillColor", "colors.light.100", "align", "center", "size", "x-large"], ["bottom", "4x-large", "top", "large", 1, "headerStrip__bodyCopy"], ["fillColor", "colors.light.100", "align", "center", "kind", "large"], [1, "bandedStrip"], ["both", "x-large"], ["fillGradient", "gradients.gold.simple", "align", "center", "size", "small"], ["top", "medium"], ["kind", "help", "align", "center"], ["both", "medium"], ["src", "/assets/images/weird-spacer-thing.svg", 1, "weirdSpacingImage"], ["kind", "tag", "align", "center"], ["top", "4x-large", "bottom", "2x-large", 1, "loreIntroText"], ["kind", "large"], ["top", "large"], ["href", "https://blog.godsunchained.com/2020/01/24/chapter-1-citadel-of-the-gods/", 1, "readMoreLink"], ["kind", "tag", "fillColor", "colors.apocyan.300", "align", "center", 1, "readMoreLink__text"], ["top", "6x-large"], ["size", "x-small", "align", "center", 1, "mysteryHeading"], ["top", "2x-large", 1, "ctaButtonRow"], ["text", "Visit blog", "href", "https://blog.godsunchained.com/"], ["both", "6x-large"], [1, "newsLetterSignUp"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "header", 0), e.TgZ(1, "gu-vertical-space", 1), e.TgZ(2, "gu-heading-text", 2), e._uU(3, " LORE "), e.qZA(), e.qZA(), e.TgZ(4, "gu-vertical-space", 3), e.TgZ(5, "gu-paragraph-text", 4), e._uU(6, " Come, mortal! Settle in and be regaled by tales that traverse the Nine Realms, recount the deeds of the champions of Eucos, and whisper of the gods themselves. "), e.qZA(), e.qZA(), e.qZA(), e.TgZ(7, "div", 5), e.TgZ(8, "gu-vertical-space", 6), e.TgZ(9, "gu-heading-text", 7), e._uU(10, " Citadel of the gods "), e.qZA(), e.TgZ(11, "gu-vertical-space", 8), e.TgZ(12, "gu-paragraph-text", 9), e._uU(13, " Welcome to the trial "), e.qZA(), e.qZA(), e.TgZ(14, "gu-vertical-space", 10), e._UZ(15, "img", 11), e.qZA(), e.TgZ(16, "gu-paragraph-text", 12), e._uU(17, " by kelly digges "), e.qZA(), e.qZA(), e.qZA(), e.TgZ(18, "gu-vertical-space", 13), e.TgZ(19, "gu-paragraph-text", 14), e._uU(20, " You've seen the statues of the gods in temples, of course. Incorruptible Thaeriel, Vengeful Auros, Gentle Aeona. To mortal worshipers, the statues are the gods: terrible and beautiful. But the reality is they are the pale shadow of a blazing truth. This is the story of one fateful meeting, and a divine contest that would alter the course of the Nine Relams for aeons to come. "), e.qZA(), e.TgZ(21, "gu-vertical-space", 15), e.TgZ(22, "a", 16), e.TgZ(23, "gu-simple-text", 17), e._uU(24, " Read more "), e.qZA(), e.qZA(), e.qZA(), e.qZA(), e._UZ(25, "cerberus-season1-champion-section"), e.TgZ(26, "gu-vertical-space", 18), e.TgZ(27, "gu-heading-text", 19), e._uU(28, " FOR MORE GODS UNCHAINED CONTENT & UPDATES "), e.qZA(), e.TgZ(29, "gu-vertical-space", 20), e._UZ(30, "gu-primary-hex-button", 21), e.qZA(), e.qZA(), e.TgZ(31, "gu-vertical-space", 22), e._UZ(32, "cerberus-newsletter-signup-form", 23), e.qZA())
                },
                directives: [Y, ge],
                styles: ["@keyframes blink{0%{opacity:.2}20%{opacity:1}to{opacity:.2}}@keyframes glowing{0%{box-shadow:0 0 -10px #28a1ee}40%{box-shadow:0 0 10px #28a1ee}60%{box-shadow:0 0 10px #28a1ee}to{box-shadow:0 0 -10px #28a1ee}}@keyframes moving-gradient{0%{background-position:left}to{background-position:right}}@keyframes spin{to{transform:rotate(360deg)}}@keyframes upAndDown2{0%{transform:translateY(-2%)}50%{transform:translateY(2%)}to{transform:translateY(-2%)}}@keyframes shine2{0%{filter:brightness(.96) hue-rotate(0deg)}50%{filter:brightness(1.12) hue-rotate(-10deg)}to{filter:brightness(.96) hue-rotate(0deg)}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}[_nghost-%COMP%]{display:block}.headerStrip[_ngcontent-%COMP%]{background:url(/assets/images/colour-palace-background2.jpg);background-size:cover;background-position:center;display:flex;flex-direction:column}.headerStrip__bodyCopy[_ngcontent-%COMP%]{max-width:800px;width:80%;margin-left:auto;margin-right:auto}.bandedStrip[_ngcontent-%COMP%]{background:#0F1B27;display:flex;flex-direction:column}.weirdSpacingImage[_ngcontent-%COMP%]{display:block;width:148px;margin-left:auto;margin-right:auto}.loreIntroText[_ngcontent-%COMP%]{width:80%;max-width:800px;margin-left:auto;margin-right:auto}.readMoreLink[_ngcontent-%COMP%]{display:inline-flex;justify-content:flex-start}.readMoreLink__text[_ngcontent-%COMP%]{padding-bottom:4px;border-bottom:2px solid #8BE1E0}.ctaButtonRow[_ngcontent-%COMP%]{display:flex;justify-content:center}.mysteryHeading[_ngcontent-%COMP%]{max-width:500px;padding:0 20px;margin-left:auto;margin-right:auto}.signupForm[_ngcontent-%COMP%]{width:85%;max-width:450px;display:flex;flex-direction:column;margin-left:auto;margin-right:auto}.signupForm__emailInput[_ngcontent-%COMP%]{background:#0F1B27;color:#7192b0;border:1px solid #527493;text-align:center;padding:12px 20px;width:100%}.signupForm__emailInput[_ngcontent-%COMP%]::placeholder{font-size:14px;font-style:italic;color:#f6f6f6b3}.signupForm__emailInput[_ngcontent-%COMP%]:-ms-input-placeholder{font-size:14px;font-style:italic;color:#f6f6f6b3}.signupForm__emailInput[_ngcontent-%COMP%]:-moz-placeholder{font-size:14px;font-style:italic;color:#f6f6f6b3}.newsLetterSignUp[_ngcontent-%COMP%]{max-width:530px;width:85%;margin-left:auto;margin-right:auto}"]
            }), S
        })();
        var Ce = n(61377), Te = n(28510), D = n(51395), J = n(8929), ie = n(7625), xe = n(61709), Ct = n(24850),
            Ze = n(4390), pt = n(11735);
        let rt = (() => {
            class S {
                constructor(d, A, K) {
                    this.environment = d, this.router = A, this.modalService = K
                }

                ngOnInit() {
                }

                onBuyPacks() {
                    this.closeModal(), "website" === this.environment.clientType ? this.router.navigate([B.CF.J.buyPacks.path]) : window.open(B.gv.routeContent(this.environment).buyPacks.url)
                }

                closeModal() {
                    this.modalService.dismissAll()
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(be.Ho), e.Y36(pt.F0), e.Y36(Te.Qz))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-temple-chest-opened-modal"]],
                inputs: {transactionUrl: "transactionUrl"},
                decls: 16,
                vars: 1,
                consts: [["bottom", "2x-large"], ["size", "small", "fillGradient", "gradients.gold.simple"], ["fillColor", "colors.light.100", "align", "center"], ["both", "2x-large"], ["kind", "tag", "target", "_blank", "fillColor", "colors.apocyan.300", 3, "href"], ["top", "2x-large"], ["size", "large", 3, "click"], ["iconLigature", "close_x", "fillColor", "colors.apocyan.300", 1, "xButton", 3, "click"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "gu-vertical-space", 0), e.TgZ(1, "gu-heading-text", 1), e._uU(2, " Chest opened! "), e.qZA(), e.qZA(), e.TgZ(3, "gu-paragraph-text", 2), e._uU(4, " Opening a chest grants you 5 packs of the corresponding quality. Once you open a chest, the packs have to be created on the blockchain, and sent to you. "), e.TgZ(5, "strong"), e._uU(6, "This can take a few minutes to complete."), e.qZA(), e.qZA(), e.TgZ(7, "gu-vertical-space", 3), e.TgZ(8, "gu-simple-text-button", 4), e._uU(9, " you can check the status of your transaction here "), e.qZA(), e.qZA(), e.TgZ(10, "gu-paragraph-text", 2), e._uU(11, " When the transaction is complete, your new packs will show up in the temple.\n"), e.qZA(), e.TgZ(12, "gu-vertical-space", 5), e.TgZ(13, "gu-primary-hex-button", 6), e.NdJ("click", function () {
                        return A.onBuyPacks()
                    }), e._uU(14, " BUY "), e.qZA(), e.qZA(), e.TgZ(15, "gu-icon", 7), e.NdJ("click", function () {
                        return A.closeModal()
                    }), e.qZA()), 2 & d && (e.xp6(8), e.s9C("href", A.transactionUrl))
                },
                styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center;background:#0F1B27;width:100%;min-width:60vh;max-width:75vw;min-height:40vh;padding:40px;text-align:center;position:relative;box-shadow:inset 0 0 0 2px #3d5a7480}.xButton[_ngcontent-%COMP%]{position:absolute;top:12px;right:12px;font-size:28px;cursor:pointer}.xButton[_ngcontent-%COMP%]:hover{color:#f6f6f6}"]
            }), S
        })();
        var Fe = n(39029), Ie = n(69039), We = n(5284), Me = n(84876), Oe = n(32830), Qe = n(98539), Pt = n(97223),
            st = n(19444);
        const Vt = "FLIP_A_CARD", $e = "TOGGLE_OPEN_PACK_VIDEO_VISIBILITY", gt = "TOGGLE_OPEN_PACK_CARDS",
            q = "SET_OPEN_PACK_VIDEO_ID", Se = "RESET_TEMPLE", Ne = "SET_CURRENT_UNOPENED_PACKS",
            dt = "TOGGLE_PACK_VISIBILITY", it = "TOGGLE_RAFFLE_TICKETS", W = "SET_CURRENT_OPEN_CHEST",
            j = "SET_OPEN_CHEST_VIDEO_ID", a = "TOGGLE_OPEN_CHEST_VIDEO_FINISHED", h = "PARTIAL_RESET_TEMPLE",
            I = "TOGGLE_OPEN_PACK_VIDEO_LOADING", oe = "TOGGLE_OPEN_PACK_VIDEO_PLAYING",
            Pe = "TOGGLE_OPEN_CHEST_VIDEO_PLAYING", ts = S => ({type: Ne, payload: S}),
            ss = S => ({type: j, payload: S}), At = S => ({type: a, payload: S}), ws = S => ({type: I, payload: S}),
            ks = S => ({type: Pe, payload: S}), jt = S => ({type: oe, payload: S}), ns = {
                flippedCards: {},
                openPackVideoId: "",
                openChestVideoId: "",
                openChestVideoComplete: !1,
                openChestVideoPlaying: !1,
                openPackVideoVisible: !1,
                openPackVideoLoading: !0,
                openPackVideoPlaying: !1,
                firstPackCardsVisible: !1,
                packImageVisible: !1,
                currentUnOpenedPacks: [],
                currentOpenPack: {},
                currentOpenChest: {},
                raffleTicketsDisplayVisible: !1
            }, _t = (0, Pt.MT)((S = ns, {type: H, payload: d}) => {
                switch (H) {
                    case q:
                        return Object.assign(Object.assign({}, S), {openPackVideoId: d});
                    case gt:
                        return Object.assign(Object.assign({}, S), {firstPackCardsVisible: "boolean" == typeof d ? d : !S.firstPackCardsVisible});
                    case $e:
                        return Object.assign(Object.assign({}, S), {openPackVideoVisible: "boolean" == typeof d ? d : !S.openPackVideoVisible});
                    case Vt:
                        return Object.assign(Object.assign({}, S), {flippedCards: Object.assign(Object.assign({}, S.flippedCards), {[d]: !S.flippedCards[d]})});
                    case dt:
                        return Object.assign(Object.assign({}, S), {packImageVisible: "boolean" == typeof d ? d : !S.packImageVisible});
                    case Ne:
                        return Object.assign(Object.assign({}, S), {
                            currentUnOpenedPacks: d,
                            currentOpenPack: Object.assign(Object.assign({}, d[0]), {id: (0, st.v4)()})
                        });
                    case it:
                        return Object.assign(Object.assign({}, S), {raffleTicketsDisplayVisible: !S.raffleTicketsDisplayVisible});
                    case W:
                        return Object.assign(Object.assign({}, S), {currentOpenChest: d});
                    case j:
                        return Object.assign(Object.assign({}, S), {openChestVideoId: d, openChestVideoComplete: !1});
                    case a:
                        return Object.assign(Object.assign({}, S), {openChestVideoComplete: "boolean" == typeof d ? d : !S.openChestVideoComplete});
                    case Pe:
                        return Object.assign(Object.assign({}, S), {openChestVideoPlaying: "boolean" == typeof d ? d : !S.openChestVideoPlaying});
                    case I:
                        return Object.assign(Object.assign({}, S), {openPackVideoLoading: "boolean" == typeof d ? d : !S.openPackVideoLoading});
                    case oe:
                        return Object.assign(Object.assign({}, S), {openPackVideoPlaying: "boolean" == typeof d ? d : !S.openPackVideoPlaying});
                    case h:
                        return Object.assign(Object.assign({}, ns), {packImageVisible: !0});
                    case Se:
                        return Object.assign({}, ns);
                    default:
                        return S
                }
            }, ns);
        var Qt = n(80102), he = n(26532), Et = n(61462);
        const zs = Oe.iv`
  ${(0, he.asCssProp)((0, he.setBoxSizing)())}

  :host {
    height: 100%;
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    ${(0, he.asCssProp)((0, Et.userSelect)("none"))};
  }

  :host(.visible) {
    ${(0, he.asCssProp)((0, Et.userSelect)("auto"))};
  }

  gu-controllable-vimeo-embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    ${(0, he.asCssProp)(t.uifx.userSelect("none"))};
  }

  @keyframes fadeAndSlideUp {
    0% {
      opacity: 0;
      transform: translateY(5%);
    }
    100% {
      opacity: 1;
      transform: translateY(0%);
    }
  }

  .chestOpenVideo {
    background: linear-gradient(
      to bottom,
      ${(0, he.asCssProp)(t.colors.gunmetal[500])} 0%,
      ${(0, he.asCssProp)(t.colors.gunmetal[700])} 100%
    );
    animation: fadeAndSlideUp 0.5s ease-in-out;
    ${(0, he.asCssProp)(t.uifx.userSelect("auto"))};
    z-index: 2;
  }

  .chestOpenVideo--aboveAllLayers {
    z-index: 3;
  }

  .unOpenedChestsListing {
    position: absolute;
    top: calc(var(--ch) * 5);
    right: calc(var(--ch) * 5);
    display: flex;
    flex-direction: column;
    z-index: 2;
  }

  .unOpenedChestsListing__chest {
    position: relative;
    padding: 0;
    padding-right: calc(var(--cw) * 6);
    padding-left: calc(var(--cw) * 1);
    margin-bottom: calc(var(--ch) * 5);
    display: flex;
    align-items: center;
    justify-content: flex-start;
    background: ${(0, he.asCssProp)(t.colors.dark[900])};
    cursor: pointer;
    opacity: 0;
    border: 1px solid ${(0, he.asCssProp)(t.colors.dark[500])};
    ${(0, he.asCssProp)(t.animation.slowTransition("opacity"))};
  }

  .unOpenedChestsListing__chest:active {
    border: 1px solid ${(0, he.asCssProp)(t.colors.light[100])} !important;
    background: ${(0, he.asCssProp)(t.colors.light[100])} !important;
  }

  .unOpenedChestsListing__chest:active .unOpenedChestsListing__chest__openNowText {
    ${(0, he.asCssProp)(t.gradients.textFill(t.colors.dark[900]))};
  }

  .unOpenedChestsListing__chest:active .unOpenedChestsListing__chest__count {
    color: ${(0, he.asCssProp)(t.colors.dark[900])};
    border-color: ${(0, he.asCssProp)(t.colors.dark[900])};
  }

  .unOpenedChestsListing__chest:hover {
    border: 1px solid ${(0, he.asCssProp)(t.colors.gunmetal[700])};
    background: ${(0, he.asCssProp)(t.colors.gunmetal[700])};
  }

  .unOpenedChestsListing__chest:nth-child(1) {
    transition-delay: ${0}ms;
  }
  .unOpenedChestsListing__chest:nth-child(2) {
    transition-delay: ${200}ms;
  }
  .unOpenedChestsListing__chest:nth-child(3) {
    transition-delay: ${400}ms;
  }
  .unOpenedChestsListing__chest:nth-child(4) {
    transition-delay: ${600}ms;
  }

  .unOpenedChestsListing--visible .unOpenedChestsListing__chest {
    opacity: 1;
  }

  .unOpenedChestsListing__chest__picture {
    display: block;
    width: calc(var(--cw) * 7.5);
    height: calc(var(--cw) * 7.5 * 0.9183);
    /* chest image aspect ratio: 91.83%; */
    position: absolute;
    right: calc(var(--cw) * -1);
    top: 50%;
    transform: scaleX(-1) translateY(-50%);
  }

  .unOpenedChestsListing__chest__picture__img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .unOpenedChestsListing__chest__openNowText {
    padding: calc(var(--ch) * 2) 0;
  }

  .unOpenedChestsListing__chest__count {
    margin: 0 calc(var(--cw) * 1);
    padding: calc(var(--ch) * 0.6) calc(var(--cw) * 0.6);
    border: 1px solid ${(0, he.asCssProp)(t.colors.gold[500])};
  }

  .chestsCta {
    position: absolute;
    left: 8%;
    bottom: 7%;
    min-width: ${(0, he.asCssProp)((0, Qt.gridUnits)(50))};
    opacity: 0;
    ${(0, he.asCssProp)(t.uifx.userSelect("none"))};
    ${(0, he.asCssProp)(t.animation.slowTransition("opacity"))};
  }

  .chestsCta--visible {
    ${(0, he.asCssProp)(t.uifx.userSelect("auto"))};
    opacity: 1;
    z-index: 2;
  }
`;
        customElements.define("gu-temple-chest-layer", (0, Fe.x1)({
            renderer: function ({unOpenedChests: S = [], volume: H}) {
                const d = (0, Me.sO)(null), A = (0, Fe.I0)(_t), {
                    currentOpenChest: K,
                    openChestVideoId: _e,
                    openChestVideoPlaying: b,
                    openChestVideoComplete: L,
                    openPackVideoVisible: l
                } = (0, Fe.v9)({
                    store: _t,
                    selector: U => ({
                        openChestVideoPlaying: U.openChestVideoPlaying,
                        openPackVideoVisible: U.openPackVideoVisible,
                        currentOpenChest: U.currentOpenChest,
                        openChestVideoId: U.openChestVideoId,
                        openChestVideoComplete: U.openChestVideoComplete
                    })
                });
                (0, Me.d4)(() => {
                    this.isIos = We.I5.isIos(), K.set && fetch(`https://video.godsunchained.com?search=chest-open-videos%20${K.set}--neutral--${K.rarity}`).then(le => le.json()).then(le => A(ss(le)))
                }, [K]), (0, Me.d4)(() => {
                    l ? this.classList.remove("visible") : this.classList.add("visible")
                }, [l]);
                return Oe.dy`
    ${_e ? Oe.dy`
          <gu-controllable-vimeo-embed
            class=${(0, Qe.$)({chestOpenVideo: !0, "chestOpenVideo--aboveAllLayers": b})}
            autoPlay
            videoId=${_e}
            pauseOnEndFrame
            @onVideoEnd=${() => {
                    A(At(!0)), A(ks(!1)), this.dispatchEvent(new CustomEvent("onChestOpened", {
                        detail: Object.assign({}, K),
                        bubbles: !0,
                        composed: !0
                    }))
                }}
            ?domRef=${(0, Ie.Q)(d)}
            ?muted=${this.isIos}
            .volume=${H}
          ></gu-controllable-vimeo-embed>
        ` : null}
    ${S.length ? Oe.dy`
          <div
            class=${(0, Qe.$)({unOpenedChestsListing: !0, "unOpenedChestsListing--visible": !l})}
          >
            ${S.reduce((U, le) => {
                    let ke;
                    return U.find((He, je) => {
                        const Je = le.set === He.set && le.rarity === He.rarity;
                        return Je && (ke = je), Je
                    }) ? U[ke].quantityCount += 1 : U.push(Object.assign(Object.assign({}, le), {quantityCount: 1})), U
                }, []).map(U => {
                    const le = `${U.set}--neutral--${U.rarity}`;
                    return Oe.dy`
                  <div class="unOpenedChestsListing__chest" @click=${() => (U => {
                        A(ks(!0)), U.rarity === K.rarity && U.set === K.set ? (A(At(!1)), d.current.playVideo(0)) : A((S => ({
                            type: W,
                            payload: S
                        }))(U))
                    })(U)}>
                    <picture class="unOpenedChestsListing__chest__picture">
                      <source
                        type="image/webp"
                        srcset="
                          //images.godsunchained.com/transparent-chest-images--open/434/${le}.webp 434w,
                          //images.godsunchained.com/transparent-chest-images--open/256/${le}.webp 256w,
                          //images.godsunchained.com/transparent-chest-images--open/128/${le}.webp 128w
                        "
                      />
                      <source
                        type="image/png"
                        srcset="
                          //images.godsunchained.com/transparent-chest-images--open/434/${le}.png 434w,
                          //images.godsunchained.com/transparent-chest-images--open/256/${le}.png 256w,
                          //images.godsunchained.com/transparent-chest-images--open/128/${le}.png 128w
                        "
                      />
                      <img
                        src="//images.godsunchained.com/transparent-chest-images--open/128/${le}.png"
                        alt="chest image"
                        class="unOpenedChestsListing__chest__picture__img"
                      />
                    </picture>
                    <gu-heading-text
                      fillGradient=${t.gradients.gold.simple()}
                      size="3x-small"
                      .responsiveSize=${[{size: "2x-small", breakpoint: "small"}]}
                      class="unOpenedChestsListing__chest__openNowText"
                    >
                      Open 1 Now
                    </gu-heading-text>
                    <gu-paragraph-text
                      kind="small"
                      class="unOpenedChestsListing__chest__count"
                      fillColor=${t.colors.gold[500]}
                      fontWeight="bold"
                    >
                      ${U.quantityCount}x
                    </gu-paragraph-text>
                  </div>
                `
                })}
          </div>
        ` : null}

    <gu-primary-hex-button
      size="large"
      class=${(0, Qe.$)({chestsCta: !0, "chestsCta--visible": L})}
      @click=${() => {
                    A(At(!1)), A(ss(null))
                }}
    >
      Back to Packs
    </gu-primary-hex-button>
  `
            }, props: {properties: {unOpenedChests: {type: Array}, volume: {type: Number}}, styles: zs}
        }));
        var xt = n(49749), Ws = n(46461), Hs = n(7203);
        const lt = "/assets/audio/temple", js = {
            diamond__common: `${lt}/temple_reveal_diamond_common`,
            diamond__rare: `${lt}/temple_reveal_diamond_rare`,
            diamond__epic: `${lt}/temple_reveal_diamond_epic`,
            diamond__legendary: `${lt}/temple_reveal_diamond_legendary`,
            gold__common: `${lt}/temple_reveal_gold_common`,
            gold__rare: `${lt}/temple_reveal_gold_rare`,
            gold__epic: `${lt}/temple_reveal_gold_epic`,
            gold__legendary: `${lt}/temple_reveal_gold_legendary`,
            shadow__common: `${lt}/temple_reveal_shadow_common`,
            shadow__rare: `${lt}/temple_reveal_shadow_rare`,
            shadow__epic: `${lt}/temple_reveal_shadow_epic`,
            shadow__legendary: `${lt}/temple_reveal_shadow_legendary`,
            meteorite__common: `${lt}/temple_reveal_meteorite_common`,
            meteorite__rare: `${lt}/temple_reveal_meteorite_rare`,
            meteorite__epic: `${lt}/temple_reveal_meteorite_epic`,
            meteorite__legendary: `${lt}/temple_reveal_meteorite_legendary`,
            plain__common: `${lt}/temple_reveal_plain_common`,
            plain__rare: `${lt}/temple_reveal_plain_rare`,
            plain__epic: `${lt}/temple_reveal_plain_epic`,
            plain__legendary: `${lt}/temple_reveal_plain_legendary`
        }, us = Oe.iv`
  ${(0, he.asCssProp)((0, he.setBoxSizing)())}

  :host {
    position: absolute;
    width: 100%;
    /* Add some padding so that scrollbars don't flicker while things are being
    rotate transformed... */
    padding: calc(var(--ch) * 5) calc(var(--cw) * 5) calc(var(--ch) * 15);
    top: calc(var(--ch) * 5);
    left: 0;
    overflow-x: auto;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    ${(0, he.asCssProp)((0, Et.userSelect)("none"))};
  }

  :host(.visible) {
    z-index: 1;
    ${(0, he.asCssProp)((0, Et.userSelect)("auto"))};
  }

  .raffleTicketsArea {
    min-width: 155px;
    min-height: 88px;
    width: calc(var(--cw) * 18);
    height: calc(var(--ch) * 15);
    margin-right: calc(var(--cw) * 2);
    opacity: 0;
    display: flex;
    position: relative;
    cursor: pointer;
    ${(0, he.asCssProp)(t.animation.slowTransition("height"))};
    transition-property: height, transform;
  }

  .raffleTicketsArea--opened {
    height: calc(var(--ch) * (15 + 17.3));
  }

  .raffleTicketsArea__dropdown {
    position: absolute;
    background: ${(0, he.asCssProp)(t.gradients.gold.simple("bottom"))};
    padding: 3px;
    width: 68%;
    height: calc(var(--ch) * 17.3);
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    ${(0, he.asCssProp)((0, he.drawBottomHexShapePolygonMask)("calc(var(--ch) * 4)"))};
    ${(0, he.asCssProp)(t.animation.slowTransition("opacity"))};
  }

  .raffleTicketsArea--opened .raffleTicketsArea__dropdown {
    opacity: 1;
  }

  .raffleTicketsArea__dropdown__inner {
    width: 100%;
    height: 100%;
    background: ${(0, he.asCssProp)(t.colors.gunmetal[900])};
    ${(0, he.asCssProp)((0, he.drawBottomHexShapePolygonMask)("calc(var(--ch) * 3.9)"))};
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: calc(var(--ch) * 4) 0 calc(var(--ch) * 6);
  }

  .raffleTicketsArea__dropdown__inner__label {
    font-size: calc(var(--cw) * 1);
  }

  /* @TODO: Due to the use of !important inside of our gu-heading-text control...
  this one little piece of text cannot use the standard control.
  Once we have done away with all global styles, this can be once again made into a
  standard heading text control */
  .raffleTicketsArea__dropdown__inner__value {
    font-family: ${(0, he.asCssProp)(t.typography.headingFont)};
    font-size: calc(var(--cw) * 2.2);
    line-height: 1;
    margin: calc(var(--ch) * 0.5) 0 0 0;
  }

  .raffleTicketsArea__ticketImage {
    position: relative;
    display: block;
    width: 100%;
    cursor: pointer;
  }

  .raffleTicketsArea__ticketImage__img {
    display: block;
    width: 100%;
  }

  .perspectiveWrapper {
    position: relative;
    width: calc(var(--cw) * 16);
    perspective: calc(var(--cw) * 50);
    opacity: 0;
  }

  .perspectiveWrapper:last-child {
    margin: 0;
  }

  .cardWrapper {
    height: 100%;
    position: relative;
    transform-style: preserve-3d;
    cursor: pointer;
  }

  .cardWrapper__frontFace,
  .cardWrapper__rearFace {
    ${(0, he.asCssProp)((0, Et.userSelect)("none"))};
    transform: rotateX(0deg);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  /*
  @TEMP CODE DEBUG:
  (used to quickly style the cards and tickets GUI)
  ---------------------------------------- *
  .unlockedPackItems {
    opacity: 1;
  }
  .raffleTicketsArea,
  .cardWrapper {
    opacity: 1;
    ${(0, he.asCssProp)((0, Et.userSelect)("auto"))};
  }
  .cardWrapper__frontFace,
  .cardWrapper__rearFace {
    backface-visibility: visible;
  }
  /* -------------------------------------------- */

  .cardWrapper__frontFace {
    width: 100%;
    transform: rotateY(180deg);
    position: relative;
  }

  .cardWrapper__frontFace__bloom {
    position: absolute;
    right: 8%;
    width: 76%;
    top: 9%;
    height: 88%;
    border-radius: calc(var(--cw) * 3);
    opacity: 0;
    transform: scale(0.7);
    filter: brightness(1);
  }

  .cardWrapper__frontFace__bloom--rare {
    background: ${(0, he.asCssProp)(t.colors.rarity.rare)};
    box-shadow: 0 0 calc(var(--ch) * 3) calc(var(--ch) * 3) ${(0, he.asCssProp)(t.colors.rarity.rare)};
  }
  .cardWrapper__frontFace__bloom--epic {
    background: ${(0, he.asCssProp)(t.colors.rarity.epic)};
    box-shadow: 0 0 calc(var(--ch) * 3) calc(var(--ch) * 3) ${(0, he.asCssProp)(t.colors.rarity.epic)};
  }
  .cardWrapper__frontFace__bloom--legendary {
    background: ${(0, he.asCssProp)(t.colors.rarity.legendary)};
    box-shadow: 0 0 calc(var(--ch) * 3) calc(var(--ch) * 3) ${(0, he.asCssProp)(t.colors.rarity.legendary)};
  }
  .cardWrapper__frontFace__bloom--mythic {
    background: ${(0, he.asCssProp)(t.colors.rarity.mythic)};
    box-shadow: 0 0 calc(var(--ch) * 3) calc(var(--ch) * 3) ${(0, he.asCssProp)(t.colors.rarity.mythic)};
  }

  .cardWrapper__frontFace__scarcity {
    padding-left: calc(var(--cw) * 1);
    position: absolute;
    width: 100%;
    left: 0;
    top: calc(100% + (var(--ch) * 1.5));
  }

  .cardWrapper__frontFace__card {
    position: relative;
  }

  .cardWrapper__rearFace {
    position: absolute;
    top: 8%;
    height: 88%;
    width: 95%;
    right: 4.5%;
  }

  .cardWrapper__rearFace__img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
`, os = S => Hs.PW[S];
        customElements.define("gu-temple-pack-card-listing", (0, Fe.x1)({
            renderer: function ({}) {
                const H = (0, Fe.I0)(_t), [d, A] = (0, Me.eJ)([]), {
                    currentOpenPack: K,
                    firstPackCardsVisible: _e,
                    raffleTicketsDisplayVisible: b,
                    flippedCards: L
                } = (0, Fe.v9)({
                    store: _t,
                    selector: U => ({
                        flippedCards: U.flippedCards,
                        raffleTicketsDisplayVisible: U.raffleTicketsDisplayVisible,
                        firstPackCardsVisible: U.firstPackCardsVisible,
                        currentOpenPack: U.currentOpenPack
                    })
                });
                (0, Me.d4)(() => {
                    _e ? this.classList.add("visible") : this.classList.remove("visible"), xt.p8.to(this.shadowRoot.children, {
                        duration: _e ? .3 : 0,
                        opacity: _e ? 1 : 0,
                        stagger: _e ? .15 : 0,
                        onComplete: () => {
                            _e || l()
                        }
                    })
                }, [_e]), (0, Me.d4)(() => {
                    !K.cards || A([...K.cards.map(U => {
                        const {quality: le, rarity: ke} = U, ze = js[`${os(le - 1)}__${ke}`];
                        return ze ? new Ws.Howl({src: [`${ze}.ogg`, `${ze}.mp3`]}) : {
                            play: () => {
                            }, id: `${os(le)}__${ke}`
                        }
                    })])
                }, [K]), (0, Me.d4)(() => () => l(), []);
                const l = () => {
                    xt.p8.set([this.shadowRoot.querySelectorAll(".cardWrapper"), this.shadowRoot.children], {clearProps: "all"})
                }, M = U => {
                    H({type: Vt, payload: U});
                    const le = this.shadowRoot.querySelectorAll(".perspectiveWrapper")[U].querySelector(".cardWrapper"),
                        ke = le.querySelector(".cardWrapper__frontFace__bloom"), ze = !!L[U];
                    ze || d[U].play(), xt.p8.killTweensOf([ke, le]), xt.p8.set([ke], {clearProps: "all"});
                    const He = xt.p8.timeline({paused: !0}),
                        je = xt.p8.timeline({repeat: -1, repeatDelay: 1, delay: 1, yoyo: !0, paused: !0});
                    je.to(ke, {duration: 1.2, filter: "brightness(1.5)"}).to(ke, {
                        duration: 1.2,
                        filter: "brightness(1)"
                    }), He.to(le, {duration: .4, rotateY: ze ? 0 : 180, ease: "power2.inOut"}).to(ke, {
                        duration: .7,
                        opacity: 1,
                        scale: 1.04,
                        ease: "power2.inOut"
                    }, "-=0.2").to(ke, {
                        duration: .4,
                        opacity: .78,
                        scale: .88,
                        ease: "power2.inOut"
                    }).add(je.play(), "loopingBloom"), He.play()
                };
                return Oe.dy`
    ${K.raffleTickets ? Oe.dy`
          <div
            class=${(0, Qe.$)({raffleTicketsArea: !0, "raffleTicketsArea--opened": b})}
          >
            <div
              class=${(0, Qe.$)({raffleTicketsArea__dropdown: !0})}
            >
              <div class="raffleTicketsArea__dropdown__inner">
                <gu-paragraph-text
                  kind="tag"
                  align="center"
                  class="raffleTicketsArea__dropdown__inner__label"
                  fillGradient=${t.gradients.gold.simple()}
                >
                  Draw Tickets
                </gu-paragraph-text>

                <gu-paragraph-text
                  kind="tag"
                  align="center"
                  class="raffleTicketsArea__dropdown__inner__label"
                  fillGradient=${t.gradients.gold.simple()}
                >
                  Received
                </gu-paragraph-text>

                <h3 class="raffleTicketsArea__dropdown__inner__value">${K.raffleTickets}</h3>
              </div>
            </div>
            <picture class="raffleTicketsArea__ticketImage" @click=${() => H({type: it})}>
              <source
                srcset="
                  /assets/images/collectables-art/collectables-art--raffle-ticket@3x.webp 687w,
                  /assets/images/collectables-art/collectables-art--raffle-ticket@2x.webp 458w,
                  /assets/images/collectables-art/collectables-art--raffle-ticket@1x.webp 229w
                "
                type="image/webp"
              />
              <source
                srcset="
                  /assets/images/collectables-art/collectables-art--raffle-ticket@3x.png 687w,
                  /assets/images/collectables-art/collectables-art--raffle-ticket@2x.png 458w,
                  /assets/images/collectables-art/collectables-art--raffle-ticket@1x.png 229w
                "
                type="image/png"
              />
              <img
                src="/assets/images/collectables-art/collectables-art--raffle-ticket@1x.png"
                alt=""
                class="raffleTicketsArea__ticketImage__img"
              />
            </picture>
          </div>
        ` : null}
    ${K.cards ? K.cards.map((U, le) => Oe.dy`
            <div class="perspectiveWrapper">
              <div class=${(0, Qe.$)({cardWrapper: !0})} @click=${() => M(le)}>
                <div class="cardWrapper__frontFace">
                  <i class="cardWrapper__frontFace__bloom cardWrapper__frontFace__bloom--${U.rarity}"></i>
                  <gu-card-picture
                    protoId=${U.proto}
                    quality=${U.quality}
                    class="cardWrapper__frontFace__card"
                  ></gu-card-picture>

                  ${null}
                </div>
                <picture class="cardWrapper__rearFace">
                  <source
                    type="image/webp"
                    srcset="
                      //images.godsunchained.com/rear-card-face-images/1024/regular-gu-rear-card-face.webp 1024w,
                      //images.godsunchained.com/rear-card-face-images/720/regular-gu-rear-card-face.webp   720w,
                      //images.godsunchained.com/rear-card-face-images/512/regular-gu-rear-card-face.webp   512w,
                      //images.godsunchained.com/rear-card-face-images/256/regular-gu-rear-card-face.webp   256w
                    "
                  />
                  <source
                    type="image/png"
                    srcset="
                      //images.godsunchained.com/rear-card-face-images/1024/regular-gu-rear-card-face.png 1024w,
                      //images.godsunchained.com/rear-card-face-images/720/regular-gu-rear-card-face.png   720w,
                      //images.godsunchained.com/rear-card-face-images/512/regular-gu-rear-card-face.png   512w,
                      //images.godsunchained.com/rear-card-face-images/256/regular-gu-rear-card-face.png   256w
                    "
                  />
                  <img
                    src="//images.godsunchained.com/rear-card-face-images/256/regular-gu-rear-card-face.png"
                    alt="GodsUnchained rear card face image"
                    class="cardWrapper__rearFace__img"
                  />
                </picture>
              </div>
            </div>
          `) : null}
  `
            }, props: {properties: {volume: {type: Number}}, styles: us}
        }));
        const Ot = Oe.iv`
  :host {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 1;
    background: ${(0, he.asCssProp)(t.colors.gunmetal[900])};
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    opacity: 0.94;
  }

  .icon {
    font-size: ${(0, he.asCssProp)((0, Qt.gridUnits)(20))};
  }

  .text {
    max-width: 350px;
  }

  @media screen and (min-width: ${(0, he.asCssProp)(t.breakpoints.breakpointSizeMapping.small)}) {
    :host {
      display: none;
    }
  }
`;
        customElements.define("gu-temple-overlay-layer", (0, Fe.x1)({
            renderer: function () {
                return Oe.dy`
    <gu-icon iconLigature="alert_triangle" align="center" fillColor=${t.colors.god.war.secondary} class="icon"></gu-icon>
    <gu-vertical-space top="x-large">
      <gu-paragraph-text class="text" align="center" fillColor=${t.colors.light[100]}>
        <slot></slot>
      </gu-paragraph-text>
    </gu-vertical-space>
  `
            }, props: {properties: {message: {type: String}}, styles: Ot}
        }));
        var Ks = n(92436), vn = n(71459), $s = n.n(vn), Jt = n(63082), As = n.n(Jt), Ys = n(65171);
        const Qs = Oe.iv`
  ${(0, he.asCssProp)((0, he.setBoxSizing)())}

  :host {
    height: calc(100vh - var(--headerAreaHeight));
    display: flex;
    flex-flow: column nowrap;
    overflow: hidden;
  }

  .videoAspectRatio {
    margin: auto;
    position: relative;
    padding-bottom: 56.25%;
    width: 100%;
  }

  .videoAspectRatio__img {
    display: none;
  }

  @media screen and (min-aspect-ratio: 1282/800) {
    .videoAspectRatio {
      height: 100%;
      width: auto;
      padding-bottom: 0;
    }
    .videoAspectRatio__img {
      display: block;
      width: auto;
      height: 100%;
    }
  }

  gu-controllable-vimeo-embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    ${(0, he.asCssProp)(t.uifx.userSelect("none"))};
  }

  .packOpenVideo {
    ${(0, he.asCssProp)(t.animation.standardTransition("opacity"))};
  }

  .packOpenVideo--hidden {
    opacity: 0;
  }

  /*

    @NOTE: position the drag target area roughly above the podium center

  */
  .targetDropArea {
    position: absolute;
    top: calc(var(--ch) * 32.8);
    left: calc(var(--cw) * 48.5);
    width: calc(var(--ch) * 24.5);
    height: calc(var(--ch) * 31);
  }

  /*

    @NOTE: position the draggable pack, roughly above the left podium stand

  */

  .draggablePackHitzone {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .draggablePack {
    position: absolute;
    bottom: calc(var(--ch) * 10);
    left: calc(var(--cw) * 8.7);
    width: calc(var(--ch) * 34);
    transform: rotate(-4deg);
    opacity: 0;
    cursor: pointer;
    ${(0, he.asCssProp)(t.animation.slowTransition("opacity"))};
  }

  .draggablePack--touchable {
    ${(0, he.asCssProp)((0, Et.userSelect)("auto"))};
  }

  .draggablePack--visible {
    opacity: 1;
  }

  .draggablePack--disabled {
    opacity: 0;
  }

  .draggablePack__img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
    filter: drop-shadow(0 0 calc(var(--ch) * 5) rgba(${(0, he.asCssProp)((0, Ys.hexToCssRgbString)(t.colors.black))}, 0.6));
  }

  .helpText {
    position: absolute;
    top: calc(var(--ch) * 67.5);
    left: calc(var(--cw) * 41);
    width: calc(var(--cw) * 30);
    text-align: center;
  }

  .unlockedPackItems {
    position: absolute;
    width: 100%;
    /* Add some padding so that scrollbars dont flick on while things are being
    rotate transformed... */
    padding: calc(var(--ch) * 5) calc(var(--cw) * 5) calc(var(--ch) * 15);
    top: calc(var(--ch) * 5);
    left: 0;
    overflow-x: auto;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    opacity: 0;
  }

  .unlockedPackItems--visible {
    opacity: 1;
    z-index: 1;
  }

  .unlockedPackItems__raffleTicketsArea {
    min-width: 155px;
    min-height: 88px;
    width: calc(var(--cw) * 18);
    height: calc(var(--ch) * 15);
    margin-right: calc(var(--cw) * 2);
    opacity: 0;
    display: flex;
    position: relative;
    ${(0, he.asCssProp)((0, Et.userSelect)("none"))};
    ${(0, he.asCssProp)(t.animation.slowTransition("height"))};
    transition-property: height, transform;
  }

  .unlockedPackItems__raffleTicketsArea--opened {
    height: calc(var(--ch) * (15 + 17.3));
  }

  .unlockedPackItems__raffleTicketsArea__dropdown {
    position: absolute;
    background: ${(0, he.asCssProp)(t.gradients.gold.simple("bottom"))};
    padding: 3px;
    width: 68%;
    height: calc(var(--ch) * 17.3);
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    ${(0, he.asCssProp)((0, he.drawBottomHexShapePolygonMask)("calc(var(--ch) * 4)"))};
    ${(0, he.asCssProp)(t.animation.slowTransition("opacity"))};
  }

  .unlockedPackItems__raffleTicketsArea--opened .unlockedPackItems__raffleTicketsArea__dropdown {
    opacity: 1;
  }

  .unlockedPackItems__raffleTicketsArea__dropdown__inner {
    width: 100%;
    height: 100%;
    background: ${(0, he.asCssProp)(t.colors.gunmetal[900])};
    ${(0, he.asCssProp)((0, he.drawBottomHexShapePolygonMask)("calc(var(--ch) * 3.9)"))};
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: calc(var(--ch) * 4) 0 calc(var(--ch) * 6);
  }

  .unlockedPackItems__raffleTicketsArea__dropdown__inner__label {
    font-size: calc(var(--cw) * 1);
  }

  /* @TODO: Due to the use of !important inside of our gu-heading-text control...
  this one little piece of text cannot use the standard control.
  Once we have done away with all global styles, this can be once again made into a
  standard heading text control */
  .unlockedPackItems__raffleTicketsArea__dropdown__inner__value {
    font-family: ${(0, he.asCssProp)(t.typography.headingFont)};
    font-size: calc(var(--cw) * 2.2);
    line-height: 1;
    margin: calc(var(--ch) * 0.5) 0 0 0;
  }

  .unlockedPackItems__raffleTicketsArea__ticketImage {
    position: relative;
    display: block;
    width: 100%;
    cursor: pointer;
  }

  .unlockedPackItems__raffleTicketsArea__ticketImage__img {
    display: block;
    width: 100%;
  }

  .unlockedPackItems__3dPerspectiveWrapper {
    position: relative;
    width: calc(var(--cw) * 16);
    perspective: calc(var(--cw) * 50);
  }

  .unlockedPackItems__3dPerspectiveWrapper:last-child {
    margin: 0;
  }

  .unlockedPackItems__cardWrapper {
    ${(0, he.asCssProp)((0, Et.userSelect)("none"))};
    ${(0, he.asCssProp)(t.animation.slowTransition("transform"))};
    transition-timing-function: ease-out;
    height: 100%;
    opacity: 0;
    position: relative;
    transform-style: preserve-3d;
    transition-property: transform, opacity;
  }

  .unlockedPackItems--visible .unlockedPackItems__3dPerspectiveWrapper:nth-of-type(1) .unlockedPackItems__cardWrapper {
    transition-delay: ${0}ms;
  }
  .unlockedPackItems--visible .unlockedPackItems__3dPerspectiveWrapper:nth-of-type(2) .unlockedPackItems__cardWrapper {
    transition-delay: ${150}ms;
  }
  .unlockedPackItems--visible .unlockedPackItems__3dPerspectiveWrapper:nth-of-type(3) .unlockedPackItems__cardWrapper {
    transition-delay: ${300}ms;
  }
  .unlockedPackItems--visible .unlockedPackItems__3dPerspectiveWrapper:nth-of-type(4) .unlockedPackItems__cardWrapper {
    transition-delay: ${450}ms;
  }
  .unlockedPackItems--visible .unlockedPackItems__3dPerspectiveWrapper:nth-of-type(5) .unlockedPackItems__cardWrapper {
    transition-delay: ${600}ms;
  }
  .unlockedPackItems--visible .unlockedPackItems__3dPerspectiveWrapper:nth-of-type(6) .unlockedPackItems__cardWrapper {
    transition-delay: ${750}ms;
  }

  .unlockedPackItems__cardWrapper--flipped {
    transform: rotateY(180deg);
    transition-delay: 0ms !important;
  }

  .unlockedPackItems--visible .unlockedPackItems__cardWrapper,
  .unlockedPackItems--visible .unlockedPackItems__raffleTicketsArea {
    opacity: 1;
    cursor: pointer;
    ${(0, he.asCssProp)((0, Et.userSelect)("auto"))};
  }

  .unlockedPackItems__cardWrapper__frontFace,
  .unlockedPackItems__cardWrapper__rearFace {
    transform: rotateX(0deg);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  /*
  @TEMP CODE DEBUG:
  (used to quickly style the cards and tickets GUI)
  ---------------------------------------- *
  .unlockedPackItems {
    opacity: 1;
  }
  .unlockedPackItems__raffleTicketsArea,
  .unlockedPackItems__cardWrapper {
    opacity: 1;
    ${(0, he.asCssProp)((0, Et.userSelect)("auto"))};
  }
  .unlockedPackItems__cardWrapper__frontFace,
  .unlockedPackItems__cardWrapper__rearFace {
    backface-visibility: visible;
  }
  .unlockedPackItems__cardWrapper__rearFace {
    opacity: 0.5;
  }
  /* -------------------------------------------- */

  .unlockedPackItems__cardWrapper__frontFace {
    width: 100%;
    transform: rotateY(180deg);
    position: relative;
  }

  .unlockedPackItems__cardWrapper__frontFace__scarcity {
    padding-left: calc(var(--cw) * 1);
    position: absolute;
    width: 100%;
    left: 0;
    top: calc(100% + (var(--ch) * 1.5));
  }

  .unlockedPackItems__cardWrapper__rearFace {
    position: absolute;
    top: 6%;
    height: 93%;
    width: 100%;
    right: 4.5%;
  }

  .unlockedPackItems__cardWrapper__rearFace__img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .ctasArea {
    position: absolute;
    z-index: 1;
    bottom: 13%;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
  }

  .ctasArea__cta {
    min-width: 200px;
  }

  .ctasArea__cta--buyPacksCta {
    margin-left: calc(var(--cw) * 12);
  }
`;
        customElements.define("gu-temple-view-layer", (0, Fe.x1)({
            renderer: function ({
                                    unOpenedPacks: S = [],
                                    unOpenedChests: H = [],
                                    volume: d = .9,
                                    headerAreaHeight: A = t.measurements.standardHeaderHeight
                                }) {
                const K = (0, Me.sO)(null), _e = (0, Me.sO)(null), b = (0, Me.sO)(null), L = (0, Me.sO)(null),
                    l = (0, Me.sO)(null), M = (0, Me.sO)(null), U = (0, Fe.I0)(_t), {
                        openPackVideoId: le,
                        openPackVideoVisible: ke,
                        firstPackCardsVisible: ze,
                        flippedCards: He,
                        packImageVisible: je,
                        currentOpenPack: Je,
                        openPackVideoLoading: Gt,
                        openPackVideoPlaying: ye
                    } = (0, Fe.v9)({
                        store: _t,
                        selector: Ke => ({
                            openPackVideoId: Ke.openPackVideoId,
                            openPackVideoVisible: Ke.openPackVideoVisible,
                            firstPackCardsVisible: Ke.firstPackCardsVisible,
                            flippedCards: Ke.flippedCards,
                            packImageVisible: Ke.packImageVisible,
                            currentOpenPack: Ke.currentOpenPack,
                            openPackVideoLoading: Ke.openPackVideoLoading,
                            openPackVideoPlaying: Ke.openPackVideoPlaying
                        })
                    });
                (0, Me.d4)(() => {
                    this.style.setProperty("--headerAreaHeight", `${A}px`)
                }, [A]), (0, Me.d4)(() => {
                    this.openPackVideoLoading = Gt
                }, [Gt]), (0, Me.d4)(() => (ls.observe(l.current), () => {
                    ls.unobserve(l.current), Ve(), hn()
                }), []);
                const fe = () => {
                    Ve(), this.gestureControl = new ($s())(_e.current, {
                        sensitivity: 0,
                        passive: !1,
                        capture: !0,
                        startDirectionLoopCount: 1
                    }), this.gestureControl.on("pan.prestart", Ut), this.gestureControl.on("pan.start", Zt), this.gestureControl.on("pan.all", mt), this.gestureControl.on("pan.end", es)
                }, Ve = () => {
                    this.gestureControl && (this.gestureControl.removeListener("pan.prestart", Ut), this.gestureControl.removeListener("pan.start", Zt), this.gestureControl.removeListener("pan.all", mt), this.gestureControl.removeListener("pan.end", es), this.gestureControl.destroy(), this.gestureControl = null)
                };
                (0, Me.d4)(() => {
                    Je.set ? (fe(), fetch(`https://video.godsunchained.com?search=pack-open-videos-4k%20${Je.set}--${Je.god}--${Je.rarity}`).then(Ht => Ht.json()).then(Ht => {
                        U((S => ({type: q, payload: S}))(Ht))
                    })) : Ve()
                }, [Je]), (0, Me.d4)(() => {
                    !Je.set && S.length && U(ts(S))
                }, [S]);
                const Ut = Ke => {
                        Ke.sourceEvent.preventDefault()
                    }, Zt = Ke => {
                        this.terminatedPan = !1, xt.p8.set(K.current, {x: 0, y: 0})
                    }, mt = ({deltaX: Ke, deltaY: Ht, sourceEvent: cs}) => {
                        if (Rt(), We.dz.checkOutOfBounds({
                            x: cs.pageX,
                            y: cs.pageY,
                            width: this.dimensions.width,
                            height: this.dimensions.height,
                            top: this.dimensions.top,
                            left: this.dimensions.left,
                            tolerance: 20
                        })) return this.terminatedPan = !0, es({});
                        this.terminatedPan || xt.p8.set(K.current, {
                            x: this.openPackVideoLoading ? .2 * Ke : Ke,
                            y: this.openPackVideoLoading ? .2 * Ht : Ht
                        })
                    }, es = Ke => {
                        xt.p8.to(K.current, this.draggablePackIsIntersecting && !this.openPackVideoLoading ? {
                            rotation: -1,
                            x: 37.2 * this.dimensions.cw + "px",
                            y: -25 * this.dimensions.ch + "px",
                            onComplete: () => Ss(),
                            duration: .3
                        } : {duration: .3, x: 0, y: 0})
                    }, Rt = As()(() => {
                        this.draggablePackIsIntersecting = function (S, H) {
                            let d = !1;
                            return S && H && (d = !(S.right < H.left || S.left > H.right || S.bottom < H.top || S.top > H.bottom)), d
                        }(K.current.getBoundingClientRect(), this.dragTargetRectangle)
                    }, 50), ls = new Ks.do(Ke => {
                        Ke.forEach(Ht => Cs())
                    }), Cs = As()(() => {
                        const Ke = l.current.getBoundingClientRect();
                        this.dimensions = {
                            ch: .01 * l.current.offsetHeight,
                            cw: .01 * l.current.offsetWidth,
                            width: Ke.width,
                            height: Ke.height,
                            top: Ke.top,
                            left: Ke.left
                        }, this.style.setProperty("--cw", `${this.dimensions.cw}px`), this.style.setProperty("--ch", `${this.dimensions.ch}px`), this.dragTargetRectangle = M.current.getBoundingClientRect()
                    }, 500), Ss = () => {
                        U({
                            type: $e,
                            payload: !0
                        }), this.dispatchEvent(new CustomEvent("onPackOpened", {detail: {pack: Je}})), b.current.playVideo(), U(jt(!0))
                    }, hn = () => {
                        console.log("RESET TEMPLE CODE"), U({type: Se}), xt.p8.set(K.current, {clearProps: "all"})
                    }, mn = je && !ke && Gt, Gn = !Je.set || Object.keys(He).length === Je.cards.length,
                    Zn = Gn && !S.length && je;
                return Oe.dy`
    <div class="videoAspectRatio" ?domRef=${(0, Ie.Q)(l)}>
      <img class="videoAspectRatio__img" alt="ratio image" src="/assets/images/ratio-images/16-x-9-ratio.png" />

      <gu-controllable-vimeo-embed
        class="introVideo"
        videoId="405676137"
        autoPlay
        pauseOnEndFrame
        muted
        @onVideoEnd=${() => U({type: dt, payload: !0})}
        ?domRef=${(0, Ie.Q)(L)}
        .volume=${d}
      ></gu-controllable-vimeo-embed>

      <gu-controllable-vimeo-embed
        class=${(0, Qe.$)({packOpenVideo: !0, "packOpenVideo--hidden": !ke})}
        pauseOnEndFrame
        startPausedOnFirstFrame
        videoId=${le}
        @onVideoLoading=${() => {
                    U(ws(!0))
                }}
        @onVideoReady=${() => {
                    U(ws(!1))
                }}
        @onVideoEnd=${() => {
                    U(jt(!1))
                }}
        @onVideoProgress=${Ke => {
                    const {percent: Ht} = Ke.detail;
                    Ht >= .425 && !ze && U({type: gt, payload: !0})
                }}
        ?domRef=${(0, Ie.Q)(b)}
        .volume=${d}
      ></gu-controllable-vimeo-embed>

      <i class="targetDropArea" ?domRef=${(0, Ie.Q)(M)}></i>

      ${je && !ke ? Oe.dy`
            <gu-paragraph-text
              class="helpText"
              kind="small"
              text=${Je.set ? mn ? "Please wait, loading ..." : "Drag a pack here to open it" : "You have no packs."}
            ></gu-paragraph-text>
          ` : null}

      <gu-temple-pack-card-listing></gu-temple-pack-card-listing>

      <div
        class=${(0, Qe.$)({ctasArea: !0})}
      >
        ${Zn ? Oe.dy`
              <gu-primary-hex-button
                size="large"
                @click=${() => {
                    this.dispatchEvent(new CustomEvent("onBuyPacks"))
                }}
                class="ctasArea__cta ctasArea__cta--buyPacksCta"
              >
                Buy Packs
              </gu-primary-hex-button>
            ` : null}
        <!-- @NOTE: While a card sale is active, direct users toward buying packs, not playing the game
          ${Zn ? Oe.dy`
              <gu-primary-hex-button
                size="large"
                href=${`imtbl://${B.gv.routeContent({}).home.path}`}
                class="ctasArea__cta ctasArea__cta--buyPacksCta"
              >
                Play to unlock
              </gu-primary-hex-button>
            ` : null} -->
        ${Gn && S.length && !ye ? Oe.dy`
              <gu-primary-hex-button size="large" @click=${() => {
                    xt.p8.set(K.current, {clearProps: "all"}), U({type: h}), U(ts(S))
                }} class="ctasArea__cta">
                Next Pack
              </gu-primary-hex-button>
              <gu-vertical-space top="large">
                <gu-heading-text size="2x-small" align="center"> ${S.length} packs left </gu-heading-text>
              </gu-vertical-space>
            ` : null}
      </div>

      ${je ? Oe.dy` <gu-temple-chest-layer .unOpenedChests=${H} .volume=${d}></gu-temple-chest-layer> ` : null}
      ${Je.set ? Oe.dy`
            <gu-card-pack-picture
              type="temple"
              set=${Je.set}
              god=${Je.god}
              rarity=${Je.rarity}
              class=${(0, Qe.$)({
                    draggablePack: !0,
                    "draggablePack--visible": je && !ke,
                    "draggablePack--disabled": mn,
                    "draggablePack--touchable": this.isIos
                })}
              ?domRef=${(0, Ie.Q)(K)}
              @click=${() => !!this.isIos && Ss()}
            ></gu-card-pack-picture>
            ${ze ? null : Oe.dy`<i class="draggablePackHitzone" ?domRef=${(0, Ie.Q)(_e)}></i>`}
          ` : null}
    </div>
  `
            },
            props: {
                properties: {
                    unOpenedPacks: {type: Array},
                    unOpenedChests: {type: Array},
                    volume: {type: Number},
                    headerAreaHeight: {type: Number}
                }, styles: Qs
            }
        }));
        const Is = ["viewLayer"];
        let Ds = (() => {
            class S {
                constructor(d, A, K, _e, b, L, l, M, U) {
                    this.environment = d, this.packService = A, this.chestService = K, this.router = _e, this.ngZone = b, this.ethService = L, this.modalService = l, this.audioService = M, this.navigationStateService = U, this.unopenedChests = [], this.unopenedPacks = [], this.unsubscribe = new J.xQ, this.volumeSetting = 1, this.currentWalletAddress = ""
                }

                ngOnInit() {
                    this.initPacks(), this.initAudio(), "website" === this.environment.clientType && this.initChests()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                initAudio() {
                    this.audioService.currentVolume$.pipe((0, ie.R)(this.unsubscribe)).subscribe(d => {
                        this.volumeSetting = d
                    })
                }

                initPacks() {
                    this.packService.fetchUnopenedPacks(), this.packService.unopenedPacks$.pipe((0, ie.R)(this.unsubscribe), (0, xe.VS)(d => this.packService.updateScarcityAndRarity$(d))).subscribe(d => {
                        console.log("TempleRoute->initPacks() packs", d), this.unopenedPacks = d
                    })
                }

                initChests() {
                    this.chestService.fetchChests(), this.chestService.chests$.pipe((0, ie.R)(this.unsubscribe), (0, Ct.U)(d => this.formatChests(d))).subscribe(d => {
                        this.unopenedChests = d, console.log("TempleRoute->initChests() chests", d)
                    })
                }

                formatChests(d) {
                    console.log("TempleRoute->formatChests() tps", d);
                    let A = [];
                    return d.forEach(K => {
                        A = [...A, ...Array.from(Array(K.amount)).map(_e => ({
                            rarity: K.rarity,
                            set: K.set,
                            type: K.type
                        }))]
                    }), A
                }

                onPackOpened(d) {
                    console.log("TempleRoute->onOpenPack() opening pack", d.detail.pack), this.packService.openPack$(d.detail.pack).pipe((0, ne.q)(1)).subscribe(A => {
                        console.log("TempleRoute->onOpenPack() pack opened!!!", d.detail.pack)
                    })
                }

                onChestOpened(d) {
                    this.chestService.open(d.detail.type, 1).pipe((0, ne.q)(1)).subscribe(K => {
                        console.log("TempleRoute->onChestOpened() Chest Opened!!!!!!! p ", K), this.showChestOpenedModal(this.etherscanUrl(K.hash))
                    })
                }

                etherscanUrl(d) {
                    return `https://${this.environment.production ? "" : "ropsten."}etherscan.io/tx/${d}`
                }

                onBuyPacks() {
                    "website" === this.environment.clientType ? this.router.navigate([B.CF.J.buyPacks.path]) : (0, Ze.rb)({url: B.gv.routeContent(this.environment).buyPacks.url})
                }

                showChestOpenedModal(d) {
                    this.modalService.open(rt, {
                        defaultStylings: !1,
                        centered: !0,
                        scrollable: !1
                    }).componentInstance.transactionUrl = d
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(be.Ho), e.Y36(D.F), e.Y36(D.W), e.Y36(pt.F0), e.Y36(e.R0b), e.Y36(be.ux), e.Y36(Te.Qz), e.Y36(be.pk), e.Y36(Ce.fY))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-temple"]],
                viewQuery: function (d, A) {
                    if (1 & d && e.Gf(Is, 7), 2 & d) {
                        let K;
                        e.iGM(K = e.CRH()) && (A.viewLayerDom = K.first)
                    }
                },
                decls: 4,
                vars: 4,
                consts: [[3, "headerAreaHeight", "unOpenedPacks", "unOpenedChests", "volume", "onPackOpened", "onChestOpened", "onBuyPacks"], ["viewLayer", ""]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "gu-temple-view-layer", 0, 1), e.NdJ("onPackOpened", function (_e) {
                        return A.onPackOpened(_e)
                    })("onChestOpened", function (_e) {
                        return A.onChestOpened(_e)
                    })("onBuyPacks", function () {
                        return A.onBuyPacks()
                    }), e.qZA(), e.TgZ(2, "gu-temple-overlay-layer"), e._uU(3, " Your screen is too puny for such a mighty prize. Please expand your browser window or use a larger device such as a laptop or PC.\n"), e.qZA()), 2 & d && e.Q6J("headerAreaHeight", A.navigationStateService.dataStore.headerAreaHeight)("unOpenedPacks", A.unopenedPacks)("unOpenedChests", A.unopenedChests)("volume", A.volumeSetting)
                },
                styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column}"]
            }), S
        })();
        var Xs = n(61715), wt = n(98723);

        function qs(S, H) {
            if (1 & S && (e.TgZ(0, "gu-paragraph-text", 10), e._uU(1, " Buy "), e.TgZ(2, "strong"), e._uU(3), e.qZA(), e._uU(4, " for "), e.TgZ(5, "span", 11), e._uU(6), e.qZA(), e._UZ(7, "gu-icon", 12), e._uU(8, "? "), e.qZA()), 2 & S) {
                const d = e.oxw();
                e.xp6(3), e.Oqu(d.storeItem.item_name), e.xp6(3), e.hij("", d.storeItem.value, " ")
            }
        }

        function Ls(S, H) {
            if (1 & S && e._UZ(0, "gu-paragraph-text", 13), 2 & S) {
                const d = e.oxw();
                e.Q6J("innerHTML", d.descriptionText, e.oJD)
            }
        }

        function Us(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "gu-paragraph-text", 10), e._uU(1, " Great choice! "), e.TgZ(2, "strong"), e._uU(3), e.qZA(), e._uU(4, " has been added to your "), e.TgZ(5, "span"), e.TgZ(6, "gu-simple-text-button", 14), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().goToCollections()
                }), e._uU(7, " Collections "), e.qZA(), e.qZA(), e._uU(8, ". "), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw();
                e.xp6(3), e.Oqu(d.storeItem.item_name)
            }
        }

        function Rs(S, H) {
            if (1 & S && (e.TgZ(0, "gu-vertical-space", 15), e.TgZ(1, "picture", 16), e._UZ(2, "source", 17), e._UZ(3, "img", 18), e.qZA(), e.qZA()), 2 & S) {
                const d = e.oxw();
                e.xp6(2), e.Q6J("srcset", d.storeItem.image_url, e.LSH), e.xp6(1), e.Q6J("src", d.storeItem.image_url, e.LSH)
            }
        }

        function Bs(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.ynx(0), e.TgZ(1, "gu-primary-hex-button", 19), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().exit()
                }), e.qZA(), e.BQk()
            }
        }

        function Fs(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "gu-secondary-hex-button", 20), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().back()
                }), e.qZA(), e.TgZ(1, "gu-primary-hex-button", 21), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().buyNow()
                }), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw();
                e.xp6(1), e.Q6J("disabled", d.awaitingPurchaseRes)
            }
        }

        let Gs = (() => {
            class S {
                constructor(d, A, K, _e, b) {
                    this.activeModal = d, this.router = A, this.environment = K, this.akuma = _e, this.starsService = b, this.stage = "confirm", this.awaitingPurchaseRes = !1, this.buyNowEvent$ = new e.vpe
                }

                ngOnInit() {
                    this.setStage(this.stage)
                }

                setStage(d) {
                    switch (this.stage = d, d) {
                        case"confirm":
                            return this.akuma.postEvent("Screen", "starstoreConfirmPurchase_opened"), void (this.headingText = "CONFIRM PURCHASE");
                        case"failure":
                            return this.logFailure(), this.headingText = "NOT ENOUGH STARS!", void (this.descriptionText = `Sorry you don\u2019t have enough Stars to purchase${this.startsWithThe(this.storeItem.item_name) ? "" : " the"} <strong>${this.storeItem.item_name}</strong>. Play some ranked games to earn more!`);
                        case"success":
                            return this.logSuccess(), void (this.headingText = "PURCHASE SUCCESS");
                        default:
                            return
                    }
                }

                logFailure() {
                    const d = this.starsService.getScreenOrder(this.storeItem);
                    this.akuma.postEvent("Screen", "starstoreInsufficientFunds_opened", d), "function" == typeof gtag && gtag("event", "_purchaseStarstore_failed", d), this.akuma.postEvent("Flow", "_purchaseStarstore_failed", d)
                }

                logSuccess() {
                    const d = this.starsService.getScreenOrder(this.storeItem);
                    this.akuma.postEvent("Screen", "starstoreSuccessPurchase_opened", d), this.akuma.postEvent("Flow", "_purchaseStarstore_succeeded", d), "function" == typeof gtag && gtag("event", "_purchaseStarstore_succeeded", d)
                }

                goToCollections() {
                    this.akuma.postEvent("Control", "starstoreSuccessPurchaseCollectionsLnk_pressed"), "website" === this.environment.clientType ? this.router.navigate(["/collections"]) : "desktop" === this.environment.clientType && this.router.navigate(["/game/gu/inventory"]), this.exit()
                }

                startsWithThe(d) {
                    return "the" === d.slice(0, 3).toLowerCase()
                }

                exit() {
                    this.activeModal.close()
                }

                back() {
                    this.akuma.postEvent("Control", "starstoreConfirmPurchaseBackBtn_pressed"), this.exit()
                }

                buyNow() {
                    this.akuma.postEvent("Control", "starstoreConfirmPurchaseBuyBtn_pressed", this.starsService.getScreenOrder(this.storeItem)), this.buyNowEvent$.emit(this.storeItem)
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(Te.mX), e.Y36(pt.F0), e.Y36(be.Ho), e.Y36(Ce.jt), e.Y36(Ce.cM))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-star-store-buy-modal"]],
                inputs: {stage: "stage", storeItem: "storeItem", awaitingPurchaseRes: "awaitingPurchaseRes"},
                outputs: {buyNowEvent$: "buyNowEvent$"},
                decls: 13,
                vars: 7,
                consts: [["goldBorder", "top"], ["top", "2x-large", 1, "headerSection"], ["size", "small", "fillGradient", "gradients.gold.simple", "align", "center"], ["top", "small", "bottom", "large", 1, "descriptionSection"], ["kind", "small", "align", "center", "fillColor", "colors.light.100", 4, "ngIf"], ["kind", "small", "align", "center", "fillColor", "colors.light.100", 3, "innerHTML", 4, "ngIf"], ["class", "imageSection", 4, "ngIf"], ["top", "large", "bottom", "2x-large", 1, "ctaSection"], [4, "ngIf", "ngIfElse"], ["confirmSection", ""], ["kind", "small", "align", "center", "fillColor", "colors.light.100"], [1, "descriptionSection__price"], ["iconLigature", "collectable_stars", "fillGradientTarget", "top", "fillGradient", "gradients.apocyan.simple", 1, "descriptionSection__icon"], ["kind", "small", "align", "center", "fillColor", "colors.light.100", 3, "innerHTML"], ["fillColor", "colors.gunmetal.300", 3, "click"], [1, "imageSection"], [1, "imageSection__picture"], ["type", "image/jpg", 3, "srcset"], [1, "imageSection__picture__img", 3, "src"], ["size", "large", "text", "OKAY", 1, "ctaSection__primary", 3, "click"], ["size", "large", "text", "BACK", 1, "ctaSection__secondary", 3, "click"], ["size", "large", "text", "BUY NOW", 1, "ctaSection__primary", 3, "disabled", "click"]],
                template: function (d, A) {
                    if (1 & d && (e._UZ(0, "gu-modal-background", 0), e.TgZ(1, "gu-vertical-space", 1), e.TgZ(2, "gu-heading-text", 2), e._uU(3), e.qZA(), e.qZA(), e.TgZ(4, "gu-vertical-space", 3), e.YNc(5, qs, 9, 2, "gu-paragraph-text", 4), e.YNc(6, Ls, 1, 1, "gu-paragraph-text", 5), e.YNc(7, Us, 9, 1, "gu-paragraph-text", 4), e.qZA(), e.YNc(8, Rs, 4, 2, "gu-vertical-space", 6), e.TgZ(9, "gu-vertical-space", 7), e.YNc(10, Bs, 2, 0, "ng-container", 8), e.YNc(11, Fs, 2, 1, "ng-template", null, 9, e.W1O), e.qZA()), 2 & d) {
                        const K = e.MAs(12);
                        e.xp6(3), e.hij(" ", A.headingText, " "), e.xp6(2), e.Q6J("ngIf", "confirm" === A.stage), e.xp6(1), e.Q6J("ngIf", "failure" === A.stage), e.xp6(1), e.Q6J("ngIf", "success" === A.stage), e.xp6(1), e.Q6J("ngIf", "confirm" === A.stage), e.xp6(2), e.Q6J("ngIf", "confirm" !== A.stage)("ngIfElse", K)
                    }
                },
                directives: [p.O5],
                styles: ["[_nghost-%COMP%]{position:relative;display:flex;flex-direction:column;padding:0 60px;align-items:center;max-width:100vw;width:520px}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.descriptionSection__price[_ngcontent-%COMP%]{background-image:linear-gradient(to top,#AFFAED 0%,#54BBCD 100%);color:transparent;-webkit-background-clip:text;background-clip:text}.descriptionSection__icon[_ngcontent-%COMP%]{display:inline-flex}.imageSection[_ngcontent-%COMP%]{display:flex;justify-content:center}.imageSection__picture__img[_ngcontent-%COMP%]{width:280px;max-width:70vw}.ctaSection[_ngcontent-%COMP%]{display:flex;justify-content:center;width:100%}.ctaSection[_ngcontent-%COMP%]   gu-primary-hex-button[_ngcontent-%COMP%]:nth-child(2){margin-left:20px}"]
            }), S
        })(), Zs = (() => {
            class S {
                constructor(d, A) {
                    this.activeModal = d, this.akuma = A
                }

                ngOnInit() {
                    this.akuma.postEvent("Screen", "starstoreInfo_opened")
                }

                exit() {
                    this.activeModal.close()
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(Te.mX), e.Y36(Ce.jt))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-star-store-more-info-modal"]],
                inputs: {imageUrl: "imageUrl", name: "name", description: "description"},
                decls: 12,
                vars: 4,
                consts: [["iconLigature", "close_x", "fillColor", "colors.apocyan.300", 1, "closeIcon", 3, "click"], ["top", "x-large", 1, "imageSection"], [1, "imageSection__picture"], ["type", "image/jpg", 3, "srcset"], [1, "imageSection__picture__img", 3, "src"], ["both", "large"], ["size", "x-small", "fillColor", "colors.light.100", "align", "center"], ["bottom", "x-large"], ["kind", "small", "align", "center", "fillColor", "colors.light.100"]],
                template: function (d, A) {
                    1 & d && (e._UZ(0, "gu-modal-background"), e.TgZ(1, "gu-icon", 0), e.NdJ("click", function () {
                        return A.exit()
                    }), e.qZA(), e.TgZ(2, "gu-vertical-space", 1), e.TgZ(3, "picture", 2), e._UZ(4, "source", 3), e._UZ(5, "img", 4), e.qZA(), e.qZA(), e.TgZ(6, "gu-vertical-space", 5), e.TgZ(7, "gu-heading-text", 6), e._uU(8), e.qZA(), e.qZA(), e.TgZ(9, "gu-vertical-space", 7), e.TgZ(10, "gu-paragraph-text", 8), e._uU(11), e.qZA(), e.qZA()), 2 & d && (e.xp6(4), e.Q6J("srcset", A.imageUrl, e.LSH), e.xp6(1), e.Q6J("src", A.imageUrl, e.LSH), e.xp6(3), e.hij(" ", A.name, " "), e.xp6(3), e.hij(" ", A.description, " "))
                },
                styles: ["[_nghost-%COMP%]{position:relative;display:flex;flex-direction:column;padding:0 60px;align-items:center;max-width:100vw;width:520px}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.imageSection[_ngcontent-%COMP%]{display:flex;justify-content:center}.imageSection__picture__img[_ngcontent-%COMP%]{max-width:100%}.closeIcon[_ngcontent-%COMP%]{position:absolute!important;top:0;right:0;margin:14px 16px;font-size:20px;cursor:pointer}"]
            }), S
        })();

        function en(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "gu-star-store-sale-item", 14), e.NdJ("onBuyItem", function () {
                    e.CHM(d);
                    const K = e.oxw().$implicit;
                    return e.oxw(2).showBuyItem(K)
                })("onMoreInfo", function () {
                    e.CHM(d);
                    const K = e.oxw().$implicit;
                    return e.oxw(2).showMoreInfo(K)
                }), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw().$implicit;
                e.Q6J("price", d.value)("imageUrl", d.image_url)("name", d.item_name)("durationType", d.label)("endTimestamp", d.end_timestamp)("title", d.title)
            }
        }

        function Wt(S, H) {
            if (1 & S && (e.ynx(0), e.YNc(1, en, 1, 6, "gu-star-store-sale-item", 13), e.BQk()), 2 & S) {
                const d = H.$implicit, A = e.oxw(2);
                e.xp6(1), e.Q6J("ngIf", A.isCurrentItem(d))
            }
        }

        function tn(S, H) {
            if (1 & S && (e.ynx(0), e.TgZ(1, "div", 7), e.TgZ(2, "gu-vertical-space", 8), e.TgZ(3, "gu-heading-text", 9), e._uU(4, " Welcome to the Star Store "), e.qZA(), e.TgZ(5, "gu-paragraph-text", 10), e._uU(6, " Exchange your Stars for some awesome items. "), e._UZ(7, "br"), e._uU(8, " Availability and prices are subject to change. "), e.qZA(), e.qZA(), e.TgZ(9, "gu-vertical-space", 11), e.YNc(10, Wt, 2, 1, "ng-container", 12), e.qZA(), e.qZA(), e.BQk()), 2 & S) {
                const d = e.oxw();
                e.xp6(10), e.Q6J("ngForOf", d.storeItems)
            }
        }

        function hs(S, H) {
            1 & S && (e.TgZ(0, "div", 15), e.TgZ(1, "gu-heading-text", 9), e._uU(2, " the Star Store is Restocking "), e.qZA(), e.TgZ(3, "gu-paragraph-text", 10), e._uU(4, " We are currently out of stock! Please check back at a later time. "), e.qZA(), e.qZA())
        }

        let Tt = (() => {
            class S {
                constructor(d, A, K) {
                    this.modalService = d, this.starsService = A, this.akuma = K, this.storeItems = [], this.currentEpochTime = this.timeNowEpoch(), this.currentItemsToDisplay = !0, this.unsubscribe = new J.xQ
                }

                ngOnInit() {
                    this.initStoreItems(), this.initTimestampCheck()
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                initTimestampCheck() {
                    (0, Xs.F)(1e3).pipe((0, ie.R)(this.unsubscribe)).subscribe(d => {
                        this.currentEpochTime = this.timeNowEpoch(), this.checkForCurrentItems()
                    })
                }

                checkForCurrentItems() {
                    this.currentItemsToDisplay = this.storeItems.some(d => this.isCurrentItem(d))
                }

                timeNowEpoch() {
                    return (new Date).getTime()
                }

                isCurrentItem(d) {
                    return d.end_timestamp_epoch > this.currentEpochTime && d.start_timestamp_epoch < this.currentEpochTime
                }

                initStoreItems() {
                    this.starsService.fetchStarStoreItems$().pipe((0, ne.q)(1)).subscribe(d => {
                        this.storeItems = d, this.scheduleRefresh(d), this.checkForCurrentItems(), (!d || 0 === d.length || !this.currentItemsToDisplay) && this.akuma.postEvent("Screen", "starstoreEmpty_opened"), this.logStarStoreOpened(), console.log("StarStoreRoute->initStoreItems()", this.storeItems)
                    })
                }

                scheduleRefresh(d) {
                    const A = Date.now(), K = d.reduce((b, L) => b.end_timestamp_epoch < L.end_timestamp_epoch ? b : L);
                    if (!K) return;
                    const _e = K.end_timestamp_epoch + 1e3 - A;
                    _e < 0 || (0, wt.H)(_e).pipe((0, ie.R)(this.unsubscribe), (0, ne.q)(1)).subscribe(b => {
                        this.initStoreItems()
                    })
                }

                logStarStoreOpened() {
                    const d = {};
                    this.storeItems.forEach((A, K) => {
                        d[`item_${K + 1}`] = A
                    }), this.akuma.postEvent("Screen", "starstoreHome_opened", d)
                }

                logBuyButton(d) {
                    this.akuma.postEvent("Control", "starstoreHomeBuyBtn_pressed", this.starsService.getScreenOrder(d)), this.akuma.postEvent("Flow", "_purchaseStarstore_started", this.starsService.getScreenOrder(d)), "function" == typeof gtag && gtag("event", "_purchaseStarstore_started", this.starsService.getScreenOrder(d))
                }

                showBuyItem(d) {
                    this.logBuyButton(d), this.modalService.hasOpenModals() && this.modalService.dismissAll(), this.openedModal$ && this.openedModal$.unsubscribe();
                    const K = this.modalService.open(Gs, {defaultStylings: !1, centered: !0}).componentInstance;
                    K.storeItem = d, this.openedModal$ = K.buyNowEvent$.pipe((0, ne.q)(1), (0, xe.VS)(_e => (K.awaitingPurchaseRes = !0, this.handleBuyNow$(_e)))).subscribe(_e => {
                        K.awaitingPurchaseRes = !1, K.setStage(_e ? "success" : "failure")
                    })
                }

                showMoreInfo(d) {
                    this.akuma.postEvent("Control", "starstoreHomeTipBtn_pressed", this.starsService.getScreenOrder(d)), this.modalService.hasOpenModals() && this.modalService.dismissAll();
                    const K = this.modalService.open(Zs, {defaultStylings: !1, centered: !0}).componentInstance;
                    K.name = d.item_name, K.description = d.item_description, K.imageUrl = d.image_url
                }

                handleBuyNow$(d) {
                    return this.starsService.purchaseItem$(d.asset_group, d.value).pipe((0, ne.q)(1), (0, Ct.U)(A => (console.log("StarStoreRoute->handleBuyNow$", A), !(A && A.error))))
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(Te.Qz), e.Y36(Ce.cM), e.Y36(Ce.jt))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-star-store-route"]],
                decls: 8,
                vars: 2,
                consts: [[1, "background"], [1, "background__picture"], ["srcset", "\n        /assets/images/misc-art/misc-art--star-store@1x.webp 2284w,\n        /assets/images/misc-art/misc-art--star-store@1x.webp 1714w,\n        /assets/images/misc-art/misc-art--star-store@1x.webp 1142w,\n        /assets/images/misc-art/misc-art--star-store@1x.webp  572w\n      ", "type", "image/webp"], ["srcset", "\n        /assets/images/misc-art/misc-art--star-store@1x.jpg 2284w,\n        /assets/images/misc-art/misc-art--star-store@1x.jpg 1714w,\n        /assets/images/misc-art/misc-art--star-store@1x.jpg 1142w,\n        /assets/images/misc-art/misc-art--star-store@1x.jpg  572w\n      ", "type", "image/jpg"], ["src", "/assets/images/misc-art/misc-art--star-store@1x.jpg", "alt", "", 1, "background__picture__img"], [4, "ngIf", "ngIfElse"], ["emptyStateSection", ""], [1, "storeSection"], ["top", "x-large", 1, "storeSection__header"], ["size", "x-large", "fillGradient", "gradients.gold.simple", "align", "center"], ["kind", "large", "align", "center", "fillColor", "colors.light.100"], ["top", "x-large", 1, "storeSection__specials"], [4, "ngFor", "ngForOf"], ["class", "storeSection__specials__item", 3, "price", "imageUrl", "name", "durationType", "endTimestamp", "title", "onBuyItem", "onMoreInfo", 4, "ngIf"], [1, "storeSection__specials__item", 3, "price", "imageUrl", "name", "durationType", "endTimestamp", "title", "onBuyItem", "onMoreInfo"], [1, "emptyStateSection"]],
                template: function (d, A) {
                    if (1 & d && (e.TgZ(0, "div", 0), e.TgZ(1, "picture", 1), e._UZ(2, "source", 2), e._UZ(3, "source", 3), e._UZ(4, "img", 4), e.qZA(), e.qZA(), e.YNc(5, tn, 11, 1, "ng-container", 5), e.YNc(6, hs, 5, 0, "ng-template", null, 6, e.W1O)), 2 & d) {
                        const K = e.MAs(7);
                        e.xp6(5), e.Q6J("ngIf", A.currentItemsToDisplay)("ngIfElse", K)
                    }
                },
                directives: [p.O5, p.sg],
                styles: ["[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;align-items:center}.background[_ngcontent-%COMP%], .background__picture[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%}.background__picture__img[_ngcontent-%COMP%]{display:block;width:100%;height:100%;object-fit:cover}.storeSection[_ngcontent-%COMP%]{position:relative;overflow-y:auto;width:100%}.storeSection__header[_ngcontent-%COMP%]{padding:0 8px}.storeSection__header[_ngcontent-%COMP%]   gu-paragraph-text[_ngcontent-%COMP%]{max-width:630px;margin:auto}.storeSection__specials[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;justify-content:center}.emptyStateSection[_ngcontent-%COMP%]{position:relative;margin:auto}"]
            }), S
        })();

        function on(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "gu-secondary-hex-button", 7), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().secondaryCtaClick()
                }), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw();
                e.Q6J("text", d.secondaryCtaText)
            }
        }

        function rn(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "gu-primary-hex-button", 7), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().primaryCtaClick()
                }), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw();
                e.Q6J("text", d.primaryCtaText)
            }
        }

        n(52886), n(98590);
        let an = (() => {
            class S {
                constructor(d) {
                    this.activeModal = d, this.onPrimaryCtaClick = () => {
                    }, this.onSecondaryCtaClick = () => {
                    }
                }

                secondaryCtaClick() {
                    this.onSecondaryCtaClick(), this.activeModal.close()
                }

                primaryCtaClick() {
                    this.onPrimaryCtaClick(), this.activeModal.close()
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(Te.mX))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-confirm-modal"]],
                inputs: {
                    title: "title",
                    text: "text",
                    primaryCtaText: "primaryCtaText",
                    onPrimaryCtaClick: "onPrimaryCtaClick",
                    secondaryCtaText: "secondaryCtaText",
                    onSecondaryCtaClick: "onSecondaryCtaClick"
                },
                decls: 10,
                vars: 4,
                consts: [["goldBorder", "top"], ["top", "4x-large"], ["align", "center", "fillGradient", "gradients.gold.simple", "fillGradientTarget", "bottom", "size", "small"], ["top", "large"], ["align", "center", "kind", "small", "fillColor", "colors.light.100", 1, "text"], ["top", "2x-large", "bottom", "4x-large", 1, "ctaSection"], ["class", "ctaSection__button", "size", "large", 3, "text", "click", 4, "ngIf"], ["size", "large", 1, "ctaSection__button", 3, "text", "click"]],
                template: function (d, A) {
                    1 & d && (e._UZ(0, "gu-modal-background", 0), e.TgZ(1, "gu-vertical-space", 1), e.TgZ(2, "gu-heading-text", 2), e._uU(3), e.qZA(), e.qZA(), e.TgZ(4, "gu-vertical-space", 3), e.TgZ(5, "gu-paragraph-text", 4), e._uU(6), e.qZA(), e.qZA(), e.TgZ(7, "gu-vertical-space", 5), e.YNc(8, on, 1, 1, "gu-secondary-hex-button", 6), e.YNc(9, rn, 1, 1, "gu-primary-hex-button", 6), e.qZA()), 2 & d && (e.xp6(3), e.hij(" ", A.title, " "), e.xp6(3), e.hij(" ", A.text, " "), e.xp6(2), e.Q6J("ngIf", A.secondaryCtaText), e.xp6(1), e.Q6J("ngIf", A.primaryCtaText))
                },
                directives: [p.O5],
                styles: ["[_nghost-%COMP%]{position:relative;display:flex;flex-direction:column;padding:0 60px;align-items:center;max-width:100vw;width:640px}[_nghost-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.alertIcon[_ngcontent-%COMP%]{font-size:80px}.heading[_ngcontent-%COMP%]{text-transform:uppercase}.ctaSection[_ngcontent-%COMP%]{display:flex;flex-flow:row nowrap}.ctaSection__button[_ngcontent-%COMP%]{min-width:200px}.ctaSection__button[_ngcontent-%COMP%]:nth-child(2){margin-left:16px}"]
            }), S
        })();
        var Ns = n(92198);

        function ms(S, H) {
            1 & S && e._UZ(0, "gu-icon", 3)
        }

        const Tn = function (S, H) {
            return {check__complete: S, check__unfinished: H}
        };
        let ln = (() => {
            class S {
                constructor() {
                }

                ngOnInit() {
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["tick-box"]],
                inputs: {finished: "finished"},
                decls: 3,
                vars: 5,
                consts: [[1, "check", 3, "ngClass"], [1, "check__box"], ["class", "checkmark", "iconLigature", "checkbox_tick", 4, "ngIf"], ["iconLigature", "checkbox_tick", 1, "checkmark"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "div", 0), e.TgZ(1, "div", 1), e.YNc(2, ms, 1, 0, "gu-icon", 2), e.qZA(), e.qZA()), 2 & d && (e.Q6J("ngClass", e.WLB(2, Tn, A.finished, !A.finished)), e.xp6(2), e.Q6J("ngIf", A.finished))
                },
                directives: [p.mk, p.O5],
                styles: [".check__text[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.22)}.check[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center}.check__text[_ngcontent-%COMP%]{font-weight:700;line-height:28px;padding-left:10px}.check__complete[_ngcontent-%COMP%]{color:#50bcff;border-color:#50bcff}.check__unfinished[_ngcontent-%COMP%]{color:#7192b0;border-color:#7192b0}.check__box[_ngcontent-%COMP%]{height:20px;width:20px;background:#0F1B27;border:2px solid #8BE1E0;box-sizing:border-box}.checkmark[_ngcontent-%COMP%]{color:#50bcff;display:flex;font-weight:700}"]
            }), S
        })();

        function cn(S, H) {
            if (1 & S && (e.TgZ(0, "tr"), e.TgZ(1, "td"), e._uU(2), e.qZA(), e.TgZ(3, "td"), e._UZ(4, "tick-box", 21), e.qZA(), e.TgZ(5, "td"), e._UZ(6, "tick-box", 21), e.qZA(), e.TgZ(7, "td"), e._UZ(8, "tick-box", 21), e.qZA(), e.TgZ(9, "td"), e._uU(10), e.qZA(), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.xp6(2), e.Oqu(d.username), e.xp6(2), e.Q6J("finished", d.gu_account), e.xp6(2), e.Q6J("finished", d.coinbase_confirmed), e.xp6(2), e.Q6J("finished", d.game_played), e.xp6(2), e.Oqu(d.payment_status)
            }
        }

        const rs = function () {
            return {breakpoint: "small", size: "large"}
        }, dn = function (S) {
            return [S]
        };
        let Mn = (() => {
            class S {
                constructor(d, A, K, _e) {
                    this.activeModal = d, this.analyticsService = A, this.referralService = K, this.authService = _e, this.unsubscribe = new J.xQ
                }

                openLink(d, A) {
                    window.location.href = d
                }

                ngOnInit() {
                    this.isUserSignedIn = !!this.authService.getUserId(), this.authService.account$.pipe((0, ie.R)(this.unsubscribe)).subscribe(d => {
                        this.isUserSignedIn = !!d, this.userId = this.isUserSignedIn ? this.authService.getUserId() : 0, this.referralService.getUserReferralsStatus(this.userId).pipe((0, ie.R)(this.unsubscribe)).subscribe(A => {
                            console.log(A), this.userReferrals = A, this.totalAmount = this.userReferrals.reduce((K, _e) => K + _e.total_amt, 0)
                        })
                    })
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                onClose() {
                    this.activeModal.close("Referrals CTA closed")
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(Te.mX), e.Y36(Ce.jt), e.Y36(Ce.C_), e.Y36(be.mI))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["referrals-status"]],
                inputs: {userId: "userId"},
                decls: 47,
                vars: 10,
                consts: [["iconLigature", "close_x", 1, "modal__closeButton", 3, "click"], [1, "referrals__modal__content"], ["top", "3x-large", "bottom", "medium"], ["align", "center", "size", "small", 3, "responsiveSize"], ["top", "large", "bottom", "large"], [1, "referrals_status_container"], [2, "width", "100%"], [4, "ngFor", "ngForOf"], [1, "divider__line"], ["top", "medium", "bottom", "medium"], [1, "earnings"], [1, "earnings__shine"], [1, "earnings__container"], [1, "earnings__text"], [1, "earnings__value"], [1, "earnings__subtext"], [1, "earnings__info"], ["fillColor", "colors.light.500", "kind", "x-small", "align", "center", 2, "max-width", "450px"], ["top", "2x-large", "bottom", "3x-large"], [1, "signInToBegin"], ["size", "large", 2, "padding", "0 20px", 3, "click"], [3, "finished"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "gu-icon", 0), e.NdJ("click", function () {
                        return A.onClose()
                    }), e.qZA(), e.TgZ(1, "div", 1), e.TgZ(2, "gu-vertical-space", 2), e.TgZ(3, "gu-heading-text", 3), e._uU(4, " Referral Status"), e.qZA(), e.qZA(), e.TgZ(5, "gu-vertical-space", 4), e.TgZ(6, "div", 5), e.TgZ(7, "table", 6), e.TgZ(8, "tr"), e.TgZ(9, "th"), e._uU(10, "User"), e.qZA(), e.TgZ(11, "th"), e._uU(12, "GU account"), e.qZA(), e.TgZ(13, "th"), e._uU(14, "Coinbase account"), e.qZA(), e.TgZ(15, "th"), e._uU(16, "Game played"), e.qZA(), e.TgZ(17, "th"), e._uU(18, "Reward Status"), e.qZA(), e.qZA(), e.YNc(19, cn, 11, 5, "tr", 7), e.qZA(), e.qZA(), e.qZA(), e._UZ(20, "div", 8), e.TgZ(21, "gu-vertical-space", 9), e.TgZ(22, "gu-heading-text", 3), e._uU(23, " Earnings"), e.qZA(), e.qZA(), e.TgZ(24, "gu-vertical-space", 9), e.TgZ(25, "div", 10), e._UZ(26, "div", 11), e.TgZ(27, "div", 12), e.TgZ(28, "div", 13), e.TgZ(29, "div", 14), e._uU(30), e.qZA(), e.TgZ(31, "div", 15), e._uU(32, " Worth of Eth "), e.qZA(), e.TgZ(33, "div", 16), e._uU(34, " Earned from Referrals "), e.qZA(), e.qZA(), e.qZA(), e.qZA(), e.qZA(), e.TgZ(35, "gu-vertical-space", 9), e.TgZ(36, "gu-paragraph-text", 17), e._uU(37, " Once a friend has completed the required steps, it will take a few days to verify everything. Your referral earnings will be payed out every 7 days "), e.qZA(), e.qZA(), e.TgZ(38, "gu-vertical-space", 9), e.TgZ(39, "gu-paragraph-text", 17), e.TgZ(40, "strong"), e._uU(41, "Need some help?"), e.qZA(), e._uU(42, " Reach out to us on social media! "), e.qZA(), e.qZA(), e.TgZ(43, "gu-vertical-space", 18), e.TgZ(44, "div", 19), e.TgZ(45, "gu-primary-hex-button", 20), e.NdJ("click", function () {
                        return A.onClose()
                    }), e._uU(46, " Close Window "), e.qZA(), e.qZA(), e.qZA(), e.qZA()), 2 & d && (e.xp6(3), e.Q6J("responsiveSize", e.VKq(5, dn, e.DdM(4, rs))), e.xp6(16), e.Q6J("ngForOf", A.userReferrals), e.xp6(3), e.Q6J("responsiveSize", e.VKq(8, dn, e.DdM(7, rs))), e.xp6(8), e.hij(" $", A.totalAmount, " "))
                },
                directives: [p.sg, ln],
                styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;max-width:840px;text-align:center}.modal__closeButton[_ngcontent-%COMP%]{position:absolute;top:20px;right:20px;z-index:1;font-size:calc(var(--vh) * 2);color:#8be1e0;cursor:pointer}.modal__closeButton[_ngcontent-%COMP%]:hover{color:#f6f6f6}.referrals__modal__content[_ngcontent-%COMP%]{background:#0F1B27;box-sizing:border-box;border:2px solid #3D5A74;display:flex;flex-direction:column;padding:0 50px;align-items:center}@media only screen and (max-width: 768px){.referrals__modal__content[_ngcontent-%COMP%]{padding:0 20px;overflow-y:auto}}table[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{border-left:2px solid #0A0A0A;border-right:2px solid #0A0A0A;border-collapse:collapse}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{text-align:center}th[_ngcontent-%COMP%]{font-size:16px;font-weight:400;line-height:24px;background:#1D2F41;color:#f6f6f6;padding:20px}td[_ngcontent-%COMP%]{font-size:16px;font-weight:400;line-height:24px;padding:10px 5px;color:#464646}tr[_ngcontent-%COMP%]{background:#F6F6F6}tr[_ngcontent-%COMP%]:nth-child(odd){background-color:#d7d7d7}.divider__line[_ngcontent-%COMP%]{border:1px solid #1D2F41;margin:20px;width:100%}.earnings[_ngcontent-%COMP%]{display:flex;flex-direction:row}.earnings__container[_ngcontent-%COMP%]{background:linear-gradient(90deg,rgba(242,242,242,.1) .67%,rgba(255,255,255,.1) 51.76%,rgba(242,242,242,.1) 100%);border:1px solid #7f7f7f;box-sizing:border-box;font-family:Unchained;font-style:normal}.earnings__shine[_ngcontent-%COMP%]{background:linear-gradient(180deg,#fff2d8 0%,#ebc98b 50.34%,#c6a052 100%);width:8px;height:60px;box-sizing:border-box}.earnings__text[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center;align-items:center;margin:10px}.earnings__value[_ngcontent-%COMP%]{font-weight:700;font-size:32px;line-height:38px;text-transform:uppercase;color:#f6f6f6;padding-right:5px}.earnings__subtext[_ngcontent-%COMP%]{font-weight:700;font-size:12px;line-height:20px;text-transform:uppercase;color:#b6b6b6;padding-right:2vw}.earnings__info[_ngcontent-%COMP%]{font-weight:400;font-size:16px;line-height:24px;color:#f6f6f6}.socialButton[_ngcontent-%COMP%]{cursor:pointer;font-size:35px;margin:0 5px}.referrals_status_container[_ngcontent-%COMP%]{width:100%}@media only screen and (max-width: 768px){.referrals_status_container[_ngcontent-%COMP%]{width:90vw;overflow-x:scroll}}"]
            }), S
        })(), $n = (() => {
            class S {
                constructor() {
                }

                ngOnInit() {
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["referrals-card-back"]],
                decls: 16,
                vars: 0,
                consts: [[1, "earnTogether__sideFigure"], [1, "earnTogether__figure"], ["srcset", "/assets/images/social-isolation/referrals/card_bg.webp", "type", "image/webp"], ["src", "/assets/images/social-isolation/referrals/card_bg.png", "alt", "", 1, "stackedCard__top"], [1, "stackedCard__lower", "stackedCard__lower__first"], [1, "stackedCard__lower", "stackedCard__lower__second"], [1, "earnTogether__cardContent"], ["top", "medium", "bottom", "large"], ["iconLigature", "friends_helmet", "fillGradient", "gradients.gold.simple", "fillGradientTarget", "bottom", 1, "earnTogether__icon"], [1, "rewardsBlock__text", "rewardsBlock__totalValue"], ["top", "large", "bottom", "medium"], ["src", "/assets/images/social-isolation/referrals/gu-divder-small.svg", 1, "tasks__divider"], ["fillColor", "colors.light.100", 2, "padding", "0 40px"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "div", 0), e.TgZ(1, "figure", 1), e.TgZ(2, "picture"), e._UZ(3, "source", 2), e._UZ(4, "img", 3), e.qZA(), e._UZ(5, "div", 4), e._UZ(6, "div", 5), e.qZA(), e.TgZ(7, "div", 6), e.TgZ(8, "gu-vertical-space", 7), e._UZ(9, "gu-icon", 8), e.qZA(), e.TgZ(10, "div", 9), e._uU(11, " 10% "), e.qZA(), e.TgZ(12, "gu-vertical-space", 10), e._UZ(13, "img", 11), e.qZA(), e.TgZ(14, "gu-paragraph-text", 12), e._uU(15, " of referrals money spent added to your wallet "), e.qZA(), e.qZA(), e.qZA())
                },
                styles: ["[_nghost-%COMP%]{height:400px}.earnTogether__sideFigure[_ngcontent-%COMP%]{position:relative}.earnTogether__figure[_ngcontent-%COMP%]{min-width:300px}.earnTogether__cardContent[_ngcontent-%COMP%]{position:absolute;z-index:10;width:245px;height:360px;text-align:center;display:flex;flex-direction:column;justify-content:center;align-items:center;left:10%}.stackedCard__top[_ngcontent-%COMP%]{box-shadow:4px 4px 8px #0a0a0a;border:1px solid #464646;position:absolute;z-index:3}.stackedCard__lower[_ngcontent-%COMP%]{background:linear-gradient(360deg,#0f1b27 0%,#0f1b27 11.53%,#1d2f41 50.05%,#0f1b27 88.69%,#0f1b27 100%);box-shadow:4px 4px 8px #0a0a0a;border:1px solid #464646;box-sizing:border-box;position:absolute;height:360px;width:240px}.stackedCard__lower__first[_ngcontent-%COMP%]{left:30px;top:15px;z-index:2}.stackedCard__lower__second[_ngcontent-%COMP%]{left:25px;top:25px;z-index:1}.earnTogether__icon[_ngcontent-%COMP%]{font-size:90px}.rewardsBlock__text[_ngcontent-%COMP%]{font-family:Unchained;font-style:normal;font-weight:700;text-transform:uppercase}.rewardsBlock__totalValue[_ngcontent-%COMP%]{font-size:43px;line-height:30px;color:#f6f6f6}.rewardsBlock__totalValue__currency[_ngcontent-%COMP%]{font-size:24px;line-height:29px;text-align:center;color:#d7d7d7}.tasks__divider[_ngcontent-%COMP%]{width:100%}"]
            }), S
        })(), An = (() => {
            class S {
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["referrals-task"]],
                inputs: {
                    taskId: "taskId",
                    taskTitle: "taskTitle",
                    taskImage: "taskImage",
                    taskDescription: "taskDescription"
                },
                decls: 13,
                vars: 4,
                consts: [[1, "taskId"], ["align", "center", "size", "x-small", "fillGradient", "gradients.gold.simple", 1, "taskId__number"], [1, "taskPicture"], ["srcset", "/assets/images/social-isolation/referrals/task_diamond.webp", "type", "image/webp"], ["src", "/assets/images/social-isolation/referrals/task_diamond.png", "alt", "GU_Task"], [1, "outerBox"], [1, "innerBox"], ["align", "center", "size", "x-small", 1, "taskTitle"], ["alt", "GU_Task", 1, "taskPicture__img", 3, "src"], ["align", "center", "fillColor", "colors.light.300", 1, "taskDescription", 3, "innerHTML"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "div", 0), e.TgZ(1, "gu-heading-text", 1), e._uU(2), e.qZA(), e.TgZ(3, "picture", 2), e._UZ(4, "source", 3), e._UZ(5, "img", 4), e.qZA(), e.qZA(), e.TgZ(6, "div", 5), e.TgZ(7, "div", 6), e.TgZ(8, "gu-heading-text", 7), e._uU(9), e.qZA(), e.TgZ(10, "picture", 2), e._UZ(11, "img", 8), e.qZA(), e._UZ(12, "gu-paragraph-text", 9), e.qZA(), e.qZA()), 2 & d && (e.xp6(2), e.hij(" ", A.taskId, " "), e.xp6(7), e.hij(" ", A.taskTitle, " "), e.xp6(2), e.Q6J("src", A.taskImage, e.LSH), e.xp6(1), e.Q6J("innerHTML", A.taskDescription, e.oJD))
                },
                styles: ["[_nghost-%COMP%]{background-color:#0f1b27;display:block;min-height:300px;position:relative;width:300px;border:2px solid #0F1B27;box-sizing:border-box;margin:20px}.outerBox[_ngcontent-%COMP%]{background:linear-gradient(90deg,#c6a052 2.93%,#ebc98b 25.01%,#fff2d8 50.44%,#ebc98b 74.21%,#c6a052 96.95%);box-shadow:0 2px 5px #0000004d;height:100%;width:100%;padding:2px}.innerBox[_ngcontent-%COMP%]{width:100%;height:100%;background:#0F1B27;display:flex;flex-direction:column}.taskId[_ngcontent-%COMP%]{position:absolute;left:50%;top:-32px;transform:translate(-50%)}.taskId__number[_ngcontent-%COMP%]{position:absolute;left:50%;transform:translate(-50%);top:25%}.taskTitle[_ngcontent-%COMP%]{padding:10px;margin-top:30px}.taskPicture__img[_ngcontent-%COMP%]{border-top:1px solid #979797;border-bottom:1px solid #979797;width:100%}.taskDescription[_ngcontent-%COMP%]{padding:8px 10px;font-size:15px}"]
            }), S
        })(), Lt = (() => {
            class S {
                constructor(d, A) {
                    this.analyticsService = d, this.copyService = A
                }

                ngOnInit() {
                    switch (this.socialMedia) {
                        case"facebook":
                            this.iconLigature = "social_facebook", this.title = "Facebook";
                            break;
                        case"twitter":
                            this.iconLigature = "social_twitter", this.title = "Twitter";
                            break;
                        default:
                            this.iconLigature = "action_duplicate", this.title = "Copy Message"
                    }
                }

                shareLink() {
                    switch (this.socialMedia) {
                        case"facebook":
                            window.open(`https://www.facebook.com/sharer/sharer.php?u=${this.referralLink}&quote=${this.referralCopy}`, "_blank");
                            break;
                        case"twitter":
                            window.open(`https://twitter.com/intent/tweet?text=${this.referralCopy}&url=${this.referralLink}`, "_blank");
                            break;
                        default:
                            this.copyLink()
                    }
                }

                copyLink() {
                    this.copyService.copyText(this.referralCopy + this.referralLink), this.title = "Link Copied", setTimeout(() => {
                        this.title = "Copy Message"
                    }, 2e3)
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(Ce.jt), e.Y36(Ce.tX))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["share-button"]],
                inputs: {socialMedia: "socialMedia", referralLink: "referralLink", referralCopy: "referralCopy"},
                decls: 4,
                vars: 2,
                consts: [[1, "shareButton", 3, "click"], [1, "shareButton__icon", 3, "iconLigature"], ["size", "2x-small", 1, "shareButton__shareText"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "button", 0), e.NdJ("click", function () {
                        return A.shareLink()
                    }), e._UZ(1, "gu-icon", 1), e.TgZ(2, "gu-heading-text", 2), e._uU(3), e.qZA(), e.qZA()), 2 & d && (e.xp6(1), e.Q6J("iconLigature", A.iconLigature), e.xp6(2), e.hij(" ", A.title, " "))
                },
                styles: ["[_nghost-%COMP%]{margin:10px 10px 10px 0}.shareButton[_ngcontent-%COMP%]{white-space:nowrap;padding:10px 15px;background:transparent;border:2px solid #8be1e0;display:flex;align-items:center;outline:none}.shareButton[_ngcontent-%COMP%]:hover{padding:12px 17px;color:#182531;border:none;background:linear-gradient(to bottom,#AFFAED 0%,#54BBCD 100%)}.shareButton[_ngcontent-%COMP%]:hover   .shareButton__shareText[_ngcontent-%COMP%]{-webkit-text-fill-color:var(--gu-blue-dark)}.shareButton[_ngcontent-%COMP%]:hover   .shareButton__icon[_ngcontent-%COMP%]{-webkit-text-fill-color:black}@media only screen and (max-width: 768px){.shareButton[_ngcontent-%COMP%]{padding:10px}}.shareButton__icon[_ngcontent-%COMP%]{-webkit-text-fill-color:var(--gu-blue);font-size:calc(var(--vh) * 2.5);margin-right:calc(var(--vw) * .5);display:inline-flex;align-items:flex-start}.shareButton__icon[_ngcontent-%COMP%]:hover{-webkit-text-fill-color:black}@media only screen and (max-width: 768px){.shareButton__icon[_ngcontent-%COMP%]{margin-right:0}}.shareButton__shareText[_ngcontent-%COMP%]{background:linear-gradient(to bottom,#affaed 0%,#8be1e0 50%,#54bbcd 100%);-webkit-background-clip:text;background-clip:text;-webkit-text-fill-color:transparent}@media only screen and (max-width: 768px){.shareButton__shareText[_ngcontent-%COMP%]{display:none}}"]
            }), S
        })();

        function qt(S, H) {
            if (1 & S && (e.TgZ(0, "option", 3), e._uU(1), e.qZA()), 2 & S) {
                const d = H.$implicit;
                e.Q6J("ngValue", d), e.xp6(1), e.Oqu(d)
            }
        }

        function un(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "form", 1), e.TgZ(1, "select", 2), e.NdJ("ngModelChange", function (K) {
                    return e.CHM(d), e.oxw().updateWallet(K)
                })("ngModelChange", function (K) {
                    return e.CHM(d), e.oxw().selectedWallet = K
                }), e.TgZ(2, "option", 3), e._uU(3, "Please select a wallet"), e.qZA(), e.YNc(4, qt, 2, 2, "option", 4), e.qZA(), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw();
                e.xp6(1), e.Q6J("ngModel", d.selectedWallet), e.xp6(1), e.Q6J("ngValue", null), e.xp6(2), e.Q6J("ngForOf", d.playerWallets)
            }
        }

        function In(S, H) {
            1 & S && (e.TgZ(0, "div", 1), e.TgZ(1, "div", 5), e._uU(2, " You don't have a wallet linked. "), e.qZA(), e.TgZ(3, "a", 6), e._uU(4, "Link my wallet"), e.qZA(), e.qZA())
        }

        let Dn = (() => {
            class S {
                constructor() {
                    this.walletSelected = new e.vpe
                }

                updateWallet(d) {
                    this.selectedWallet = d, this.walletSelected.emit(this.selectedWallet)
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["wallet-settings"]],
                inputs: {playerWallets: "playerWallets", selectedWallet: "selectedWallet"},
                outputs: {walletSelected: "walletSelected"},
                decls: 2,
                vars: 2,
                consts: [["class", "settings", 4, "ngIf"], [1, "settings"], ["name", "selectedWallet", "id", "sel1", 1, "settings__select", 3, "ngModel", "ngModelChange"], [3, "ngValue"], [3, "ngValue", 4, "ngFor", "ngForOf"], [1, "settings__label"], ["href", "https://www.godsunchained.com/?linkwallet=true", 1, "settings__cta"]],
                template: function (d, A) {
                    1 & d && (e.YNc(0, un, 5, 3, "form", 0), e.YNc(1, In, 5, 0, "div", 0)), 2 & d && (e.Q6J("ngIf", A.playerWallets && A.playerWallets.length > 0), e.xp6(1), e.Q6J("ngIf", !A.playerWallets || 0 === A.playerWallets.length))
                },
                directives: [p.O5, r._Y, r.JL, r.F, r.EJ, r.JJ, r.On, r.YN, r.Kr, p.sg],
                styles: [".settings__label[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.22)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.9)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{line-height:1.5}.settings__select[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}[_nghost-%COMP%]{display:block}.settings[_ngcontent-%COMP%]{display:flex;flex-flow:column nowrap;width:100%;margin:auto}.settings__label[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 3)}.settings__select[_ngcontent-%COMP%]{color:#fff;font-size:16px;line-height:24px;width:100%;display:flex;align-items:center;background:#0F1B27;border:1px solid #3D5A74;box-sizing:border-box;border-radius:2px;padding:7px;margin-top:calc(var(--vh) * .65)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * 1.48);padding-left:calc(var(--vw) * .83);padding-right:calc(var(--vw) * .83);padding-top:calc(var(--vh) * 1.29);padding-bottom:calc(var(--vh) * 1.29);margin-bottom:0;background:#182531;color:#f6f6f6;border:calc(var(--vh) * .15) solid #0f1b27;border-radius:calc(var(--vh) * .4)}.settings__select[_ngcontent-%COMP%] > option[_ngcontent-%COMP%]::-webkit-input-placeholder{color:#fff}.settings__cta[_ngcontent-%COMP%]{margin-top:calc(var(--vh) * .65);color:#affaed}"]
            }), S
        })();

        function Ln(S, H) {
            if (1 & S && (e.ynx(0), e._UZ(1, "referrals-task", 30), e.BQk()), 2 & S) {
                const d = H.$implicit;
                e.xp6(1), e.Q6J("taskId", d.taskId)("taskTitle", d.taskTitle)("taskDescription", d.taskDescription)("taskImage", d.taskImage)
            }
        }

        function _s(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "section", 31), e.TgZ(1, "figure", 32), e.TgZ(2, "picture"), e._UZ(3, "source", 33), e._UZ(4, "img", 34), e.qZA(), e.qZA(), e.TgZ(5, "div", 35), e.TgZ(6, "gu-vertical-space", 36), e.TgZ(7, "div", 37), e._uU(8, " Share the below link with your friends "), e.qZA(), e.qZA(), e.TgZ(9, "div", 38), e._uU(10), e.TgZ(11, "strong"), e._uU(12), e.qZA(), e._uU(13, " on the website here "), e.TgZ(14, "span", 39), e._uU(15), e.qZA(), e.qZA(), e.TgZ(16, "div", 40), e._UZ(17, "share-button", 41), e._UZ(18, "share-button", 42), e._UZ(19, "share-button", 42), e.qZA(), e.TgZ(20, "gu-vertical-space", 43), e._UZ(21, "div", 44), e.qZA(), e.TgZ(22, "gu-vertical-space", 45), e.TgZ(23, "gu-paragraph-text", 46), e._uU(24, " Select the wallet you want your rewards to go to "), e.qZA(), e.qZA(), e.TgZ(25, "wallet-settings", 47), e.NdJ("walletSelected", function (K) {
                    return e.CHM(d), e.oxw().updateWallet(K)
                }), e.qZA(), e.qZA(), e.qZA()
            }
            if (2 & S) {
                const d = e.oxw();
                e.xp6(10), e.hij(" ", d.referralCopy, " "), e.xp6(2), e.Oqu(d.referralCode), e.xp6(3), e.Oqu(d.referralLink), e.xp6(2), e.Q6J("referralLink", d.referralLink)("referralCopy", d.shareCopy), e.xp6(1), e.Q6J("referralLink", d.referralLink)("referralCopy", d.shareCopy)("socialMedia", "facebook"), e.xp6(1), e.Q6J("referralLink", d.referralLink)("referralCopy", d.shareCopy)("socialMedia", "twitter"), e.xp6(6), e.Q6J("playerWallets", d.playerWallets)("selectedWallet", d.selectedWallet)
            }
        }

        function fs(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "div", 48), e.TgZ(1, "gu-primary-hex-button", 49), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().signIn()
                }), e._uU(2, " Sign in to begin "), e.qZA(), e.qZA()
            }
        }

        function bs(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "div", 48), e.TgZ(1, "gu-primary-hex-button", 49), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().signIn()
                }), e._uU(2, " Sign in to begin "), e.qZA(), e.qZA()
            }
        }

        function pn(S, H) {
            if (1 & S) {
                const d = e.EpF();
                e.TgZ(0, "div", 48), e.TgZ(1, "gu-primary-hex-button", 49), e.NdJ("click", function () {
                    return e.CHM(d), e.oxw().copyShareCode()
                }), e._uU(2, " Copy share Code "), e.qZA(), e.qZA()
            }
        }

        const Mt = function () {
            return {breakpoint: "small", size: "large"}
        }, vt = function (S) {
            return [S]
        }, vs = function () {
            return {breakpoint: "small", size: "medium"}
        };
        let as = (() => {
            class S {
                constructor(d, A, K, _e, b, L) {
                    this.authService = d, this.cerberusModalService = A, this.router = K, this.analyticsService = _e, this.copyService = b, this.referralService = L, this.selectedWallet = null, this.unsubscribe = new J.xQ, this.referralCopy = "If you're looking for the next game to play, Gods Unchained is a great game that you should check out. Sign up using with my referral code: "
                }

                ngOnDestroy() {
                    this.unsubscribe.next(), this.unsubscribe.complete()
                }

                createReferralCode(d) {
                    this.referralService.createReferralCode(d).subscribe(A => {
                        this.referralCode = A.code, this.selectedWallet = A.referral_payout_address, this.referralLink = A.result, this.shareCopy = `${this.referralCopy}${this.referralCode} on the website here `
                    })
                }

                ngOnInit() {
                    this.getWallets(), this.referralTasks = this.getTasks(), this.userId = this.authService.getUserId(), this.isUserSignedIn = !!this.authService.getUserId(), this.authService.account$.pipe((0, ie.R)(this.unsubscribe), (0, Ns.h)(d => !!d), (0, ne.q)(1)).subscribe(d => {
                        this.isUserSignedIn = !!d, this.userId = this.isUserSignedIn ? this.authService.getUserId() : 0, this.createReferralCode(this.userId)
                    })
                }

                copyShareCode() {
                    this.copyService.copyText(`${this.referralCopy}${this.referralCode} on the website here ${this.referralLink}`)
                }

                signIn() {
                    this.router.navigate(["/account/login"], {queryParams: {return: B.CF.J.learn.children.referrals.path}})
                }

                checkReferralsStatus() {
                    this.cerberusModalService.open(Mn, {
                        centered: !0,
                        scrollable: !0
                    }).componentInstance.userId = this.userId
                }

                getWallets() {
                    this.authService.account$.pipe((0, Ns.h)(d => !!d), (0, Ct.U)(d => d.addresses)).subscribe(d => {
                        this.playerWallets = d.filter(A => A.imx_linked).map(A => A.address)
                    })
                }

                updateWallet(d) {
                    this.selectedWallet = d, this.referralService.updatePayoutAddress(this.userId, d).subscribe(A => console.log(A))
                }

                getTasks() {
                    return [{
                        taskId: 1,
                        taskTitle: "INVITE friends",
                        taskDescription: "Send the link below to a friend or post it to your social channels",
                        taskImage: "/assets/images/social-isolation/referrals/invite_friends.png"
                    }, {
                        taskId: 2,
                        taskTitle: "Track Progress",
                        taskDescription: "The person referred buys any Divine Order card packs",
                        taskImage: "/assets/images/social-isolation/referrals/track_progress.png"
                    }, {
                        taskId: 3,
                        taskTitle: "Earn Rewards",
                        taskDescription: "Receive 10% of the money they spend!",
                        taskImage: "/assets/images/social-isolation/referrals/earn_rewards.png"
                    }]
                }
            }

            return S.\u0275fac = function (d) {
                return new (d || S)(e.Y36(be.mI), e.Y36(Te.Qz), e.Y36(pt.F0), e.Y36(Ce.jt), e.Y36(Ce.tX), e.Y36(Ce.C_))
            }, S.\u0275cmp = e.Xpm({
                type: S,
                selectors: [["cerberus-referrals-route"]],
                decls: 62,
                vars: 13,
                consts: [[1, "intro"], ["top", "5x-large"], ["align", "center", "fillColor", "colors.dark.900", "size", "small", 3, "responsiveSize"], ["top", "large"], ["align", "center", "fillColor", "colors.gunmetal.500", "size", "medium", 1, "subTitle"], ["top", "small"], ["align", "center", "fillColor", "colors.dark.700"], [1, "theMoreYouPurchase"], [1, "steps"], ["top", "2x-large"], [1, "referralSteps"], [4, "ngFor", "ngForOf"], ["class", "share", 4, "ngIf"], ["top", "medium", "bottom", "large"], ["class", "signInToBegin", 4, "ngIf"], [1, "rewards"], ["top", "large", "both", "medium"], ["src", "/assets/images/social-isolation/referrals/tasks_divider.svg", 1, "tasks__divider"], [1, "rewards__container"], [1, "cardBack__container"], ["align", "left", "fillColor", "colors.dark.900", "size", "x-small", 3, "responsiveSize"], ["top", "small", "bottom", "large"], ["align", "left", "fillColor", "colors.gunmetal.500", "fontWeight", "bold", "size", "5x-small"], ["fillColor", "colors.gunmetal.900", "kind", "4x-small"], ["fillColor", "colors.gunmetal.900"], ["top", "small", "bottom", "medium"], ["srcset", "/assets/images/misc-art/misc-art--wizard-with-key.webp", "type", "image/webp"], ["srcset", "/assets/images/misc-art/misc-art--wizard-with-key.jpg", "type", "image/jpg"], ["src", "/assets/images/misc-art/misc-art--wizard-with-key.jpg"], [1, "innerFooter"], [3, "taskId", "taskTitle", "taskDescription", "taskImage"], [1, "share"], [1, "share__figure"], ["srcset", "/assets/images/misc-art/x2_brand_visual.webp", "type", "image/webp"], ["src", "/assets/images/misc-art/x2_brand_visual.png", 1, "share__img"], [1, "share__content"], ["bottom", "medium"], [1, "share__socialMedia__title"], [1, "share__socialMedia__text"], [1, "share__socialMedia__text__Link"], [1, "share__socialMedia__buttons"], [3, "referralLink", "referralCopy"], [3, "referralLink", "referralCopy", "socialMedia"], ["top", "large", "bottom", "large", 2, "width", "100%"], [1, "share__socialMedia__divider__line"], ["top", "large", "bottom", "medium"], ["fillColor", "colors.light.100"], [3, "playerWallets", "selectedWallet", "walletSelected"], [1, "signInToBegin"], ["size", "large", 2, "padding", "0 25px", 3, "click"]],
                template: function (d, A) {
                    1 & d && (e.TgZ(0, "div"), e.TgZ(1, "section", 0), e.TgZ(2, "gu-vertical-space", 1), e.TgZ(3, "gu-heading-text", 2), e._uU(4, " Money Spent Is Money Earned "), e.qZA(), e.qZA(), e.TgZ(5, "gu-vertical-space", 3), e.TgZ(6, "gu-paragraph-text", 4), e._uU(7, " Mortals. Together. Strong. "), e.qZA(), e.qZA(), e.TgZ(8, "gu-vertical-space", 5), e.TgZ(9, "gu-paragraph-text", 6), e.TgZ(10, "div", 7), e._uU(11, " Put down your axe and extend a helping hand to your fellow mortal. By inviting friends who make purchases, you\u2019ll receive great rewards! "), e.qZA(), e.qZA(), e.qZA(), e.qZA(), e.TgZ(12, "section", 8), e.TgZ(13, "gu-vertical-space", 9), e.TgZ(14, "div", 10), e.YNc(15, Ln, 2, 4, "ng-container", 11), e.qZA(), e.qZA(), e.qZA(), e.YNc(16, _s, 26, 13, "section", 12), e.TgZ(17, "section"), e.TgZ(18, "gu-vertical-space", 13), e.YNc(19, fs, 3, 0, "div", 14), e.qZA(), e.qZA(), e.TgZ(20, "section", 15), e.TgZ(21, "gu-vertical-space", 16), e._UZ(22, "img", 17), e.qZA(), e.TgZ(23, "div", 18), e.TgZ(24, "div", 19), e._UZ(25, "referrals-card-back"), e.qZA(), e.TgZ(26, "div"), e.TgZ(27, "gu-heading-text", 20), e._uU(28, " Earn Together "), e.qZA(), e.TgZ(29, "gu-vertical-space", 21), e.TgZ(30, "gu-paragraph-text", 22), e._uU(31, " Receive 10% of the money spent by the people you refer! "), e.qZA(), e.qZA(), e.TgZ(32, "gu-paragraph-text", 23), e.TgZ(33, "strong"), e._uU(34, "People you refer need to:"), e.qZA(), e.TgZ(35, "ol"), e.TgZ(36, "li"), e._uU(37, "Create a Gods Unchained account"), e.qZA(), e.TgZ(38, "li"), e._uU(39, "Purchase any Divine Order Packs and/or Chests"), e.qZA(), e.TgZ(40, "li"), e._uU(41, "Have a valid wallet linked to Immutable X"), e.qZA(), e.qZA(), e.qZA(), e.TgZ(42, "gu-paragraph-text", 24), e._uU(43, " There is "), e.TgZ(44, "strong"), e._uU(45, "no limit to how many friends you can invite"), e.qZA(), e._uU(46, ", so send your unique codes far and wide. "), e.qZA(), e.TgZ(47, "gu-paragraph-text", 24), e._uU(48, " The processing of referral payments will take place every 14 days. At these intervals any referral payouts due will be calculated and payed out for all purchases made in the previous cycle. "), e.TgZ(49, "strong"), e._uU(50, "Payment will be made in ETH"), e.qZA(), e._uU(51, " directly to your selected Immutable X linked wallet. "), e.qZA(), e._UZ(52, "gu-vertical-space", 13), e.qZA(), e.qZA(), e.qZA(), e.TgZ(53, "gu-vertical-space", 25), e.TgZ(54, "div"), e.YNc(55, bs, 3, 0, "div", 14), e.YNc(56, pn, 3, 0, "div", 14), e.qZA(), e.qZA(), e.qZA(), e.TgZ(57, "picture"), e._UZ(58, "source", 26), e._UZ(59, "source", 27), e._UZ(60, "img", 28), e.qZA(), e._UZ(61, "section", 29)), 2 & d && (e.xp6(3), e.Q6J("responsiveSize", e.VKq(8, vt, e.DdM(7, Mt))), e.xp6(12), e.Q6J("ngForOf", A.referralTasks), e.xp6(1), e.Q6J("ngIf", A.isUserSignedIn), e.xp6(3), e.Q6J("ngIf", !A.isUserSignedIn), e.xp6(8), e.Q6J("responsiveSize", e.VKq(11, vt, e.DdM(10, vs))), e.xp6(28), e.Q6J("ngIf", !A.isUserSignedIn), e.xp6(1), e.Q6J("ngIf", A.isUserSignedIn))
                },
                directives: [p.sg, p.O5, $n, An, Lt, Dn],
                styles: [".share__socialMedia__title[_ngcontent-%COMP%], .subTitle[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 2.22)}.share__socialMedia__text[_ngcontent-%COMP%]{font-size:calc(var(--vh) * 1.48)}[_nghost-%COMP%]{overflow-y:auto;background-color:#f6f6f6}a[_ngcontent-%COMP%]{color:#000}.subTitle[_ngcontent-%COMP%]{font-weight:700;line-height:28px}.earnTogether[_ngcontent-%COMP%]{display:flex;flex-direction:row;position:relative;max-width:960px;padding:20px}@media only screen and (max-width: 768px){.earnTogether[_ngcontent-%COMP%]{flex-wrap:wrap;flex-direction:column-reverse;justify-content:center;align-items:center}}.tasks__divider[_ngcontent-%COMP%]{width:100%}.referralSteps[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center;flex-wrap:wrap;margin:10px}.signInToBegin[_ngcontent-%COMP%]{align-items:center;display:flex;flex-direction:column}.theMoreYouPurchase[_ngcontent-%COMP%]{margin:0 auto;max-width:566px;padding:10px}[_nghost-%COMP%]{display:flex;flex-direction:column;position:relative}[_nghost-%COMP%] > div[_ngcontent-%COMP%]{width:100%;z-index:1;display:flex;flex-direction:column;justify-content:center;align-items:center}[_nghost-%COMP%] > picture[_ngcontent-%COMP%]{align-items:center;bottom:0;display:flex;justify-content:center;left:0;overflow:hidden;position:absolute;right:0;top:0}[_nghost-%COMP%] > picture[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100%;height:100%;object-fit:cover;object-position:center top}.earnTogether__text[_ngcontent-%COMP%]{display:flex;flex-direction:column}.innerFooter[_ngcontent-%COMP%]{background:#0A0A0A;height:40px;z-index:1;margin-top:-24px;position:relative;clip-path:polygon(0% 0%,calc(50% - 140px) 0%,calc(50% - 124px) 22px,calc(50% + 124px) 22px,calc(50% + 140px) 0%,100% 0%,100% 100%,0% 100%)}.share[_ngcontent-%COMP%]{width:100%;display:flex;flex-direction:row;border-top:1px solid #0A0A0A;border-bottom:1px solid #0A0A0A;flex-wrap:wrap;justify-content:center;align-items:center;background:#0F1B27}@media only screen and (max-width: 768px){.share[_ngcontent-%COMP%]{display:block}}.share__content[_ngcontent-%COMP%]{flex:1;background:#0F1B27;display:flex;flex-direction:column;padding:40px}@media only screen and (max-width: 768px){.share__content[_ngcontent-%COMP%]{align-items:center;text-align:center}}.share__figure[_ngcontent-%COMP%]{flex:1;margin:0;line-height:.5}.share__img[_ngcontent-%COMP%]{width:100%;object-fit:cover;object-position:center center;height:470px}@media only screen and (max-width: 768px){.share__img[_ngcontent-%COMP%]{height:148px}}.share__socialMedia__title[_ngcontent-%COMP%]{font-weight:700;color:#f6f6f6}.share__socialMedia__text[_ngcontent-%COMP%]{font-size:16px;text-align:left;color:#b6b6b6;border:2px solid #3D5A74;box-sizing:border-box;padding:15px;background:#1D2F41}.share__socialMedia__text__Link[_ngcontent-%COMP%]{color:#f6f6f6}.share__socialMedia__buttons[_ngcontent-%COMP%]{display:flex;flex-direction:row;padding:10px 10px 10px 0}.share__socialMedia__divider__line[_ngcontent-%COMP%]{border:1px solid #1D2F41;width:100%}.referral_status_btn[_ngcontent-%COMP%]{width:200px;margin:10px 0;padding:20px}.rewards[_ngcontent-%COMP%]   ol[_ngcontent-%COMP%]{list-style:inside decimal;padding-left:0;margin-block:0}.rewards[_ngcontent-%COMP%]   gu-paragraph-text[_ngcontent-%COMP%]{margin-bottom:32px}.rewards__container[_ngcontent-%COMP%]{display:flex;flex-direction:column-reverse;max-width:960px;margin:0 20px}.cardBack__container[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:20px}.cardBack__container[_ngcontent-%COMP%] > referrals-card-back[_ngcontent-%COMP%]{margin-right:-80px}@media screen and (min-width: 768px){.rewards__container[_ngcontent-%COMP%]{flex-direction:row}.cardBack__container[_ngcontent-%COMP%]{margin-bottom:0}.cardBack__container[_ngcontent-%COMP%] > referrals-card-back[_ngcontent-%COMP%]{margin-right:-40px}}@media screen and (min-width: 960px){.cardBack__container[_ngcontent-%COMP%] > referrals-card-back[_ngcontent-%COMP%]{margin-right:0}}"]
            }), S
        })();
        var ys = n(37371);
        n(39765)
    }, 46313: ee => {
        function R(n) {
            var p = new Error("Cannot find module '" + n + "'");
            throw p.code = "MODULE_NOT_FOUND", p
        }

        R.keys = () => [], R.resolve = R, R.id = 46313, ee.exports = R
    }, 26093: () => {
    }, 88677: () => {
    }, 52005: () => {
    }, 9327: () => {
    }, 62808: () => {
    }, 82169: () => {
    }, 61860: () => {
    }, 81393: () => {
    }, 50868: () => {
    }, 42803: () => {
    }, 67778: () => {
    }, 61633: () => {
    }, 16572: () => {
    }, 46601: () => {
    }, 71922: () => {
    }, 2363: () => {
    }, 96419: () => {
    }, 56353: () => {
    }, 85568: () => {
    }, 53396: () => {
    }, 68587: () => {
    }, 37957: () => {
    }, 29120: () => {
    }, 46586: () => {
    }, 6567: () => {
    }, 47165: () => {
    }, 69862: () => {
    }, 40964: () => {
    }, 1189: () => {
    }, 2243: () => {
    }, 52293: () => {
    }, 58678: () => {
    }, 92916: ee => {
        "use strict";
        ee.exports = JSON.parse('{"contractName":"CappedVault","abi":[{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"total","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"withdrawAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"limit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"}],"compiler":{"name":"solc","version":"0.5.8+commit.23d335f2.Emscripten.clang"},"networks":{"1":"0x91b9d2835ad914bc1dcfe09bd1816febd04fd689"},"schemaVersion":"3.0.16","updatedAt":"2019-09-18T05:50:16.377Z"}')
    }, 45861: ee => {
        "use strict";
        ee.exports = JSON.parse('{"contractName":"Chest","abi":[{"constant":true,"inputs":[],"name":"sold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address payable","name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"packType","outputs":[{"internalType":"enum Pack.Type","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"cap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"processor","outputs":[{"internalType":"contract IProcessor","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pack","outputs":[{"internalType":"contract IPack","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tradeable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IPack","name":"_pack","type":"address"},{"internalType":"enum Pack.Type","name":"_pt","type":"uint8"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"contract IProcessor","name":"_processor","type":"address"},{"internalType":"uint256","name":"_cap","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"sym","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"count","type":"uint256"},{"indexed":false,"internalType":"address","name":"referrer","type":"address"},{"indexed":false,"internalType":"uint256","name":"paymentID","type":"uint256"}],"name":"ChestsPurchased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":false,"inputs":[{"internalType":"uint256","name":"count","type":"uint256"},{"internalType":"address","name":"referrer","type":"address"}],"name":"purchase","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"count","type":"uint256"},{"internalType":"address","name":"referrer","type":"address"}],"name":"purchaseFor","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"open","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"openFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"makeTradeable","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"compiler":{"name":"solc","version":"0.5.11+commit.c082d0b4.Emscripten.clang","optimizer":false,"runs":200},"networks":{},"schemaVersion":"2.2.3","updatedAt":"2019-10-15T03:24:19.434Z"}')
    }
}, ee => {
    ee.O(0, [736], () => ee(ee.s = 11978)), ee.O()
}]);